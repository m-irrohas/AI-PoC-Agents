#!/usr/bin/env python3
"""
OCR PoC - Command Line Application with Pytesseract
Generated by AI-PoC-Agents-v2

This is a simple OCR (Optical Character Recognition) command-line application that:
- Uses Pytesseract for text extraction
- Supports multiple languages (English and Japanese)
- Processes single images or directories
- Provides clean output suitable for command-line usage

Usage:
    python main.py                          # Process demo images
    python main.py <image_path>             # Process specific image
    python main.py <directory_path>         # Process all images in directory
"""

import os
import sys
import argparse
from pathlib import Path
from datetime import datetime
import numpy as np
import cv2

# Check if pytesseract is available
try:
    import pytesseract
    from PIL import Image
    PYTESSERACT_AVAILABLE = True
except ImportError:
    PYTESSERACT_AVAILABLE = False
    print("Warning: pytesseract not installed. Please install with: pip install pytesseract pillow")

def extract_text_from_image(image_path, verbose=True):
    """
    Extract text from image using Pytesseract
    
    Args:
        image_path (str or Path): Path to the image file
        verbose (bool): Whether to print detailed information
        
    Returns:
        dict: OCR results with text and metadata
    """
    image_path = Path(image_path)
    
    if not image_path.exists():
        raise FileNotFoundError(f"Image file not found: {image_path}")
    
    if verbose:
        print(f"üì∏ Processing: {image_path.name}")
    
    result = {
        'image_path': str(image_path),
        'image_name': image_path.name,
        'text': '',
        'processing_time': 0,
        'error': None
    }
    
    try:
        start_time = datetime.now()
        
        if PYTESSERACT_AVAILABLE:
            # Load image with PIL
            image = Image.open(image_path)
            
            # Extract text using Pytesseract with Japanese and English support
            config = r'--oem 3 --psm 6 -l eng+jpn'
            text = pytesseract.image_to_string(image, config=config)
            
        else:
            # Fallback: Mock OCR for demo purposes
            text = f"Pytesseract not available. Mock text from {image_path.name}"
        
        result['text'] = text.strip()
        result['processing_time'] = (datetime.now() - start_time).total_seconds()
        
        if verbose:
            print(f"‚úÖ Success! Extracted {len(result['text'])} characters")
            print(f"‚è±Ô∏è  Processing time: {result['processing_time']:.2f}s")
            
    except Exception as e:
        result['error'] = str(e)
        if verbose:
            print(f"‚ùå Error: {e}")
    
    return result

def process_directory(directory_path, verbose=True):
    """
    Process all images in a directory
    
    Args:
        directory_path (str or Path): Path to directory containing images
        verbose (bool): Whether to print detailed information
        
    Returns:
        list: List of OCR results for each image
    """
    directory_path = Path(directory_path)
    
    if not directory_path.is_dir():
        raise ValueError(f"Directory not found: {directory_path}")
    
    # Supported image extensions
    image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp'}
    
    # Find all image files
    image_files = []
    for ext in image_extensions:
        image_files.extend(directory_path.glob(f'*{ext}'))
        image_files.extend(directory_path.glob(f'*{ext.upper()}'))
    
    if not image_files:
        print(f"‚ùå No image files found in {directory_path}")
        return []
    
    if verbose:
        print(f"üìÅ Found {len(image_files)} image files in {directory_path}")
        print("=" * 50)
    
    results = []
    for i, image_file in enumerate(image_files, 1):
        if verbose:
            print(f"[{i}/{len(image_files)}] ", end="")
        
        result = extract_text_from_image(image_file, verbose=verbose)
        results.append(result)
        
        if verbose and result['text']:
            print(f"üìù Text preview: {result['text'][:100]}{'...' if len(result['text']) > 100 else ''}")
            print("-" * 30)
    
    return results

def create_demo_images():
    """
    Create demo images with text for testing
    
    Returns:
        list: List of paths to created demo images
    """
    demo_dir = Path('demo_images')
    demo_dir.mkdir(exist_ok=True)
    
    demo_files = []
    
    # Create simple text images using OpenCV
    texts = [
        "Hello World!\nThis is a test image.",
        "OCR Test\n12345\nGood morning!",
        "Sample Text\nfor OCR Processing\n2024"
    ]
    
    for i, text in enumerate(texts):
        # Create blank image
        img = np.ones((200, 400, 3), dtype=np.uint8) * 255
        
        # Add text to image
        lines = text.split('\n')
        y_start = 50
        for j, line in enumerate(lines):
            y_pos = y_start + j * 40
            cv2.putText(img, line, (20, y_pos), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
        
        # Save image
        demo_file = demo_dir / f'demo_image_{i+1}.png'
        cv2.imwrite(str(demo_file), img)
        demo_files.append(demo_file)
    
    return demo_files

def print_results_summary(results):
    """Print summary of OCR results"""
    if not results:
        return
    
    print("\n" + "=" * 60)
    print("üìä OCR PROCESSING SUMMARY")
    print("=" * 60)
    
    total_files = len(results)
    successful = sum(1 for r in results if not r['error'])
    total_chars = sum(len(r['text']) for r in results if r['text'])
    
    print(f"üìÅ Total files processed: {total_files}")
    print(f"‚úÖ Successful extractions: {successful}")
    print(f"‚ùå Failed extractions: {total_files - successful}")
    print(f"üìù Total characters extracted: {total_chars}")
    
    print("\nüìã DETAILED RESULTS:")
    print("-" * 60)
    
    for i, result in enumerate(results, 1):
        status = "‚úÖ" if not result['error'] else "‚ùå"
        print(f"{status} [{i}] {result['image_name']}")
        
        if result['error']:
            print(f"     Error: {result['error']}")
        else:
            char_count = len(result['text'])
            print(f"     Text: {char_count} chars")
            
            if result['text']:
                preview = result['text'].replace('\n', ' ')[:80]
                print(f"     Preview: {preview}{'...' if len(preview) >= 80 else ''}")
        print()

def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="OCR PoC - Extract text from images using Pytesseract",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
    python main.py                          # Process demo images
    python main.py image.png                # Process single image
    python main.py ./images/               # Process directory
        """
    )
    
    parser.add_argument('path', nargs='?', help='Image file or directory path')
    parser.add_argument('--quiet', '-q', action='store_true', help='Minimal output')
    
    args = parser.parse_args()
    verbose = not args.quiet
    
    if verbose:
        print("üîç OCR PoC - Image Text Extraction with Pytesseract")
        print("=" * 50)
    
    # Check dependencies
    if not PYTESSERACT_AVAILABLE:
        if verbose:
            print("‚ö†Ô∏è  Warning: pytesseract not installed")
            print("   Install with: pip install pytesseract pillow")
            print()
    
    results = []
    
    try:
        if args.path:
            path = Path(args.path)
            
            if path.is_file():
                # Process single file
                result = extract_text_from_image(path, verbose=verbose)
                results.append(result)
                
            elif path.is_dir():
                # Process directory
                results = process_directory(path, verbose=verbose)
                
            else:
                print(f"‚ùå Path not found: {path}")
                return 1
        
        else:
            # Default: look for demo images or create them
            demo_dir = Path('demo_images')
            if demo_dir.exists() and any(demo_dir.iterdir()):
                if verbose:
                    print("üìÅ Processing existing demo images...")
                results = process_directory(demo_dir, verbose=verbose)
            else:
                if verbose:
                    print("üé® No input specified. Creating demo images...")
                demo_files = create_demo_images()
                
                for demo_file in demo_files:
                    result = extract_text_from_image(demo_file, verbose=verbose)
                    results.append(result)
                    if verbose:
                        print()
        
        # Print summary
        if verbose and results:
            print_results_summary(results)
        
        # Output results for programmatic use
        if not verbose:
            for result in results:
                if not result['error'] and result['text']:
                    print(f"{result['image_name']}: {result['text']}")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ùå Processing interrupted by user")
        return 1
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        return 1

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)