{
  "qiita_results": {
    "reference_articles": [
      {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:30\">\n<span id=\"最近太ってきました\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E8%BF%91%E5%A4%AA%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F\"><i class=\"fa fa-link\"></i></a>最近太ってきました</h2>\n<p data-sourcepos=\"2:1-2:54\">昔と比べて瘦せづらくなってきました…</p>\n<p data-sourcepos=\"4:1-5:123\">ダイエットにおいて、食事管理はかなり重要です。<br>\n今回は、ユーザー情報や、栄養成分表示の画像から食事管理をするアプリを作成しました。</p>\n<p data-sourcepos=\"7:1-8:125\">ユーザー情報を変更すると、基礎代謝量などの計算結果や1日の目標摂取量が変わります。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3682615%2F6cd02fcf-8741-495a-90da-6446379d409c.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1e73159ce7d260696d13bd5324bbeaa\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3682615%2F6cd02fcf-8741-495a-90da-6446379d409c.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c1e73159ce7d260696d13bd5324bbeaa\" alt=\"output_1.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3682615%2F6cd02fcf-8741-495a-90da-6446379d409c.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bf35ab21d5545695aca93ab4cab2462c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3682615/6cd02fcf-8741-495a-90da-6446379d409c.gif\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"10:1-11:125\">画像に対して栄養成分の抽出を行うと目標値までの量やグラフが表示されます。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3682615%2F695ef91e-8167-4c0a-ae4f-5a1d55d14e93.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dbed6e9471f7617ab1f2b0ac58b6f6a7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3682615%2F695ef91e-8167-4c0a-ae4f-5a1d55d14e93.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dbed6e9471f7617ab1f2b0ac58b6f6a7\" alt=\"output_3.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3682615%2F695ef91e-8167-4c0a-ae4f-5a1d55d14e93.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e3bc10ac9d50507ac63e2bfb37b44e6d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3682615/695ef91e-8167-4c0a-ae4f-5a1d55d14e93.gif\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"14:1-14:18\">\n<span id=\"pfcバランス\" class=\"fragment\"></span><a href=\"#pfc%E3%83%90%E3%83%A9%E3%83%B3%E3%82%B9\"><i class=\"fa fa-link\"></i></a>PFCバランス</h2>\n<p data-sourcepos=\"15:1-15:117\">PFCバランスとは、P（たんぱく質）、F（脂質）、C（炭水化物）の摂取比率のことです。</p>\n<div data-sourcepos=\"17:1-21:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"18:1-18:136\">1~49歳の理想的なPFCバランス（総カロリーに対して）は、P: 13~20%、C: 20~30%、F: 50~65%と言われています。</p>\n<p data-sourcepos=\"20:1-20:89\">※ 参考文献：厚生労働省策定「日本人食事摂取基準（2020年版）」</p>\n</div>\n</div>\n<p data-sourcepos=\"25:1-25:105\">また、今回PFCの目標摂取量などの計算式は以下のサイトを参考にしています。</p>\n<p data-sourcepos=\"27:1-27:34\"><iframe id=\"qiita-embed-content__351b878b9999c406d7c1e9246b974624\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__351b878b9999c406d7c1e9246b974624\" data-content=\"https%3A%2F%2Fwww.luft.co.jp%2Fcgi%2Fpfc.php\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"29:1-29:9\">\n<span id=\"実装\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>実装</h2>\n<p data-sourcepos=\"30:1-30:42\">処理の流れは以下の通りです。</p>\n<ol data-sourcepos=\"32:1-36:0\">\n<li data-sourcepos=\"32:1-32:39\">ユーザーの入力情報を取得</li>\n<li data-sourcepos=\"33:1-33:21\">PFC目標を計算</li>\n<li data-sourcepos=\"34:1-34:9\">表示</li>\n<li data-sourcepos=\"35:1-36:0\">画像アップロード → 抽出 → 合計 → 差分 → グラフ</li>\n</ol>\n<details>\n<summary>コードまとめ</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"40:1-218:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">streamlit</span> <span class=\"k\">as</span> <span class=\"n\">st</span>\n<span class=\"kn\">import</span> <span class=\"n\">base64</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">urllib3</span>\n\n<span class=\"c1\"># --- 初期設定 ---\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">食事管理アプリ</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">urllib3</span><span class=\"p\">.</span><span class=\"nf\">disable_warnings</span><span class=\"p\">(</span><span class=\"n\">urllib3</span><span class=\"p\">.</span><span class=\"n\">exceptions</span><span class=\"p\">.</span><span class=\"n\">InsecureRequestWarning</span><span class=\"p\">)</span>\n<span class=\"n\">matplotlib</span><span class=\"p\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">font.family</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">MS Gothic</span><span class=\"sh\">'</span>\n\n<span class=\"c1\"># --- ユーザー入力 ---\n</span><span class=\"k\">def</span> <span class=\"nf\">get_user_input</span><span class=\"p\">():</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">入力項目</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">number_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">身長（cm）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">300.0</span><span class=\"p\">,</span> <span class=\"mf\">170.0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">number_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">体重（kg）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">300.0</span><span class=\"p\">,</span> <span class=\"mf\">60.0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">number_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">年齢</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">性別</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">男性</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">女性</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">activity_levels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">ほぼ運動しない活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">軽い運動活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.375</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">中程度の運動活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.55</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">激しい運動活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.725</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">非常に激しい活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.9</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">activity_label</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">活動レベル</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">activity_levels</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n\n    <span class=\"n\">goal_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">減量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">現状維持</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">増量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.2</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">goal_label</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">体重の目標</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">goal_options</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">activity_levels</span><span class=\"p\">[</span><span class=\"n\">activity_label</span><span class=\"p\">],</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">goal_options</span><span class=\"p\">[</span><span class=\"n\">goal_label</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># --- 栄養計算 ---\n</span><span class=\"k\">def</span> <span class=\"nf\">calculate_nutrition</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">activity_mult</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">goal_mult</span><span class=\"p\">):</span>\n    <span class=\"n\">bmr</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"mf\">66.47</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">13.75</span> <span class=\"o\">*</span> <span class=\"n\">weight</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">5.0</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mf\">6.76</span> <span class=\"o\">*</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">男性</span><span class=\"sh\">\"</span>\n        <span class=\"k\">else</span> <span class=\"mf\">665.1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">9.56</span> <span class=\"o\">*</span> <span class=\"n\">weight</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">1.85</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mf\">4.68</span> <span class=\"o\">*</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">tdee</span> <span class=\"o\">=</span> <span class=\"n\">bmr</span> <span class=\"o\">*</span> <span class=\"n\">activity_mult</span>\n    <span class=\"n\">target_calories</span> <span class=\"o\">=</span> <span class=\"n\">tdee</span> <span class=\"o\">*</span> <span class=\"n\">goal_mult</span>\n    <span class=\"n\">p_kcal</span><span class=\"p\">,</span> <span class=\"n\">f_kcal</span><span class=\"p\">,</span> <span class=\"n\">c_kcal</span> <span class=\"o\">=</span> <span class=\"n\">target_calories</span> <span class=\"o\">*</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span> <span class=\"o\">*</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span>\n    <span class=\"n\">p_g</span><span class=\"p\">,</span> <span class=\"n\">f_g</span><span class=\"p\">,</span> <span class=\"n\">c_g</span> <span class=\"o\">=</span> <span class=\"n\">p_kcal</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">f_kcal</span> <span class=\"o\">/</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">c_kcal</span> <span class=\"o\">/</span> <span class=\"mi\">4</span>\n    <span class=\"k\">return</span> <span class=\"n\">bmr</span><span class=\"p\">,</span> <span class=\"n\">tdee</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">p_kcal</span><span class=\"p\">,</span> <span class=\"n\">f_kcal</span><span class=\"p\">,</span> <span class=\"n\">c_kcal</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">p_g</span><span class=\"p\">,</span> <span class=\"n\">f_g</span><span class=\"p\">,</span> <span class=\"n\">c_g</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- 表示 ---\n</span><span class=\"k\">def</span> <span class=\"nf\">display_target_info</span><span class=\"p\">(</span><span class=\"n\">bmr</span><span class=\"p\">,</span> <span class=\"n\">tdee</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">pfc_kcal</span><span class=\"p\">,</span> <span class=\"n\">pfc_g</span><span class=\"p\">):</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">計算結果</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">項目</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">基礎代謝量（BMR）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">活動代謝量（TDEE）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">目標摂取カロリー（</span><span class=\"si\">{</span><span class=\"n\">goal_label</span><span class=\"si\">}</span><span class=\"s\">）</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">値 (kcal/日)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">bmr</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">tdee</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">target_calories</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PFC目標摂取量</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">栄養素</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">たんぱく質（P）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">脂質　　　（F）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">炭水化物　（C）</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">カロリー (kcal)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_kcal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_kcal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_kcal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">グラム (g)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_g</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_g</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_g</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- API呼び出し ---\n</span><span class=\"k\">def</span> <span class=\"nf\">encode_image</span><span class=\"p\">(</span><span class=\"n\">uploaded_file</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"nf\">b64encode</span><span class=\"p\">(</span><span class=\"n\">uploaded_file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">analyze_image</span><span class=\"p\">(</span><span class=\"n\">base64_image</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">https://api.openai.com/v1/chat/completions</span><span class=\"sh\">\"</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Content-Type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Authorization</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Bearer </span><span class=\"si\">{</span><span class=\"n\">api_key</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">model</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">この画像の栄養成分表示から「たんぱく質、脂質、炭水化物」の各値を抽出し、```jsonなどマークダウンや説明文はなしで、数値のみをjson形式で出力しなさい。例：{</span><span class=\"se\">\\\"</span><span class=\"s\">P</span><span class=\"se\">\\\"</span><span class=\"s\">: 数値, </span><span class=\"se\">\\\"</span><span class=\"s\">F</span><span class=\"se\">\\\"</span><span class=\"s\">: 数値, </span><span class=\"se\">\\\"</span><span class=\"s\">C</span><span class=\"se\">\\\"</span><span class=\"s\">: 数値}</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">image_url</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">image_url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">data:image/jpeg;base64,</span><span class=\"si\">{</span><span class=\"n\">base64_image</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">max_tokens</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()[</span><span class=\"sh\">'</span><span class=\"s\">choices</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n            <span class=\"nf\">except </span><span class=\"p\">(</span><span class=\"nb\">KeyError</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">JSONDecodeError</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_nutrients</span><span class=\"p\">(</span><span class=\"n\">data_str</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">data_str</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">P</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">F</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">C</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span>\n\n<span class=\"c1\"># --- グラフ表示 ---\n</span><span class=\"k\">def</span> <span class=\"nf\">plot_achievement_rates</span><span class=\"p\">(</span><span class=\"n\">actuals</span><span class=\"p\">,</span> <span class=\"n\">targets</span><span class=\"p\">):</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">達成率</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">columns</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">nutrients</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">たんぱく質（P）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">actuals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">#FFA500</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#FFE5B4</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">脂質（F）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">actuals</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">#FFD700</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#FFFACD</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">炭水化物（C）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">actuals</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">#66BB6A</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#C8E6C9</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">color1</span><span class=\"p\">,</span> <span class=\"n\">color2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">nutrients</span><span class=\"p\">):</span>\n        <span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">actual</span> <span class=\"o\">/</span> <span class=\"n\">target</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">target</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">pie</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"mi\">100</span> <span class=\"o\">-</span> <span class=\"n\">rate</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">達成</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">残り</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n            <span class=\"n\">autopct</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">%1.1f%%</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">startangle</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">counterclock</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">color1</span><span class=\"p\">,</span> <span class=\"n\">color2</span><span class=\"p\">],</span> <span class=\"n\">textprops</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">color</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">black</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">fontsize</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_title</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">axis</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">equal</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">col</span><span class=\"p\">.</span><span class=\"nf\">pyplot</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- メイン処理 ---\n</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">your_openai_api_key</span><span class=\"sh\">\"</span>\n    <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">activity_mult</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">goal_mult</span> <span class=\"o\">=</span> <span class=\"nf\">get_user_input</span><span class=\"p\">()</span>\n    <span class=\"n\">bmr</span><span class=\"p\">,</span> <span class=\"n\">tdee</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span><span class=\"p\">,</span> <span class=\"n\">pfc_kcal</span><span class=\"p\">,</span> <span class=\"n\">pfc_g</span> <span class=\"o\">=</span> <span class=\"nf\">calculate_nutrition</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">activity_mult</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">goal_mult</span><span class=\"p\">)</span>\n    <span class=\"nf\">display_target_info</span><span class=\"p\">(</span><span class=\"n\">bmr</span><span class=\"p\">,</span> <span class=\"n\">tdee</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">pfc_kcal</span><span class=\"p\">,</span> <span class=\"n\">pfc_g</span><span class=\"p\">)</span>\n\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">---</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">画像のアップロード</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">uploaded_files</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">file_uploader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">画像をアップロードしてください</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">jpg</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">jpeg</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">png</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">accept_multiple_files</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">uploaded_files</span> <span class=\"ow\">and</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">栄養成分を抽出する</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">抽出結果</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">columns</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">))</span>\n        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>  <span class=\"c1\"># P, F, C\n</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">):</span>\n            <span class=\"k\">with</span> <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">,</span> <span class=\"n\">use_container_width</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">抽出中...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n                    <span class=\"n\">base64_img</span> <span class=\"o\">=</span> <span class=\"nf\">encode_image</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n                    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nf\">analyze_image</span><span class=\"p\">(</span><span class=\"n\">base64_img</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">)</span>\n                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"ow\">or</span> <span class=\"sh\">\"</span><span class=\"s\">抽出失敗</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                    <span class=\"n\">nutrients</span> <span class=\"o\">=</span> <span class=\"nf\">parse_nutrients</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"ow\">or</span> <span class=\"sh\">\"</span><span class=\"s\">{}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">nutrients</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># 合計と差分\n</span>        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">たんぱく質（P）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">脂質　　　（F）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">炭水化物　（C）</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n        <span class=\"n\">kcal_per_g</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"n\">total_kcal</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">g</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">kcal_per_g</span><span class=\"p\">)]</span>\n        <span class=\"n\">diff_g</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">pfc_g</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">)]</span>\n        <span class=\"n\">diff_kcal</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">pfc_kcal</span><span class=\"p\">,</span> <span class=\"n\">total_kcal</span><span class=\"p\">)]</span>\n\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">合計栄養成分</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">栄養素</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">カロリー (kcal)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">total_kcal</span><span class=\"p\">],</span>\n            <span class=\"sh\">\"</span><span class=\"s\">グラム (g)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">total</span><span class=\"p\">]</span>\n        <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">目標値までの量</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">栄養素</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">カロリー (kcal)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">diff_kcal</span><span class=\"p\">],</span>\n            <span class=\"sh\">\"</span><span class=\"s\">グラム (g)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">diff_g</span><span class=\"p\">]</span>\n        <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n        <span class=\"nf\">plot_achievement_rates</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">pfc_g</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"nf\">main</span><span class=\"p\">()</span>\n\n</code></pre></div></div>\n</details>\n<h3 data-sourcepos=\"223:1-223:31\">\n<span id=\"ユーザー入力の取得\" class=\"fragment\"></span><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%85%A5%E5%8A%9B%E3%81%AE%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>ユーザー入力の取得</h3>\n<p data-sourcepos=\"224:1-224:83\">サイドバーにユーザー情報を入力するUIをまとめた関数です。</p>\n<ul data-sourcepos=\"225:1-227:0\">\n<li data-sourcepos=\"225:1-225:101\">活動レベルや目標を辞書で定義し、対応する係数を返すようにしています</li>\n<li data-sourcepos=\"226:1-227:0\">選択肢の日本語表示と係数を分離して、UIと処理を明確にしています</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"228:1-253:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">get_user_input</span><span class=\"p\">():</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">入力項目</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">number_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">身長（cm）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">300.0</span><span class=\"p\">,</span> <span class=\"mf\">170.0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">number_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">体重（kg）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">300.0</span><span class=\"p\">,</span> <span class=\"mf\">60.0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">number_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">年齢</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">性別</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">男性</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">女性</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">activity_levels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">ほぼ運動しない活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">軽い運動活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.375</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">中程度の運動活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.55</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">激しい運動活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.725</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">非常に激しい活動代謝量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.9</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">activity_label</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">活動レベル</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">activity_levels</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n\n    <span class=\"n\">goal_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">減量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">現状維持</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">増量</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">1.2</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">goal_label</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">体重の目標</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">goal_options</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">activity_levels</span><span class=\"p\">[</span><span class=\"n\">activity_label</span><span class=\"p\">],</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">goal_options</span><span class=\"p\">[</span><span class=\"n\">goal_label</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"256:1-256:37\">\n<span id=\"基礎代謝と目標pfcの計算\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E7%A4%8E%E4%BB%A3%E8%AC%9D%E3%81%A8%E7%9B%AE%E6%A8%99pfc%E3%81%AE%E8%A8%88%E7%AE%97\"><i class=\"fa fa-link\"></i></a>基礎代謝と目標PFCの計算</h3>\n<p data-sourcepos=\"257:1-257:105\">基礎代謝量、活動代謝量、目標摂取カロリー、PFCバランスを計算しています。</p>\n<ul data-sourcepos=\"258:1-259:0\">\n<li data-sourcepos=\"258:1-259:0\">PFCは一般的な比率（20:30:50）で計算していますが、Pを多くするなどカスタマイズしてもいいとおもいます</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"260:1-272:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">calculate_nutrition</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">activity_mult</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">goal_mult</span><span class=\"p\">):</span>\n    <span class=\"n\">bmr</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"mf\">66.47</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">13.75</span> <span class=\"o\">*</span> <span class=\"n\">weight</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">5.0</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mf\">6.76</span> <span class=\"o\">*</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">男性</span><span class=\"sh\">\"</span>\n        <span class=\"k\">else</span> <span class=\"mf\">665.1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">9.56</span> <span class=\"o\">*</span> <span class=\"n\">weight</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">1.85</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mf\">4.68</span> <span class=\"o\">*</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">tdee</span> <span class=\"o\">=</span> <span class=\"n\">bmr</span> <span class=\"o\">*</span> <span class=\"n\">activity_mult</span>\n    <span class=\"n\">target_calories</span> <span class=\"o\">=</span> <span class=\"n\">tdee</span> <span class=\"o\">*</span> <span class=\"n\">goal_mult</span>\n    <span class=\"n\">p_kcal</span><span class=\"p\">,</span> <span class=\"n\">f_kcal</span><span class=\"p\">,</span> <span class=\"n\">c_kcal</span> <span class=\"o\">=</span> <span class=\"n\">target_calories</span> <span class=\"o\">*</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span> <span class=\"o\">*</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span>\n    <span class=\"n\">p_g</span><span class=\"p\">,</span> <span class=\"n\">f_g</span><span class=\"p\">,</span> <span class=\"n\">c_g</span> <span class=\"o\">=</span> <span class=\"n\">p_kcal</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">f_kcal</span> <span class=\"o\">/</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">c_kcal</span> <span class=\"o\">/</span> <span class=\"mi\">4</span>\n    <span class=\"k\">return</span> <span class=\"n\">bmr</span><span class=\"p\">,</span> <span class=\"n\">tdee</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">p_kcal</span><span class=\"p\">,</span> <span class=\"n\">f_kcal</span><span class=\"p\">,</span> <span class=\"n\">c_kcal</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">p_g</span><span class=\"p\">,</span> <span class=\"n\">f_g</span><span class=\"p\">,</span> <span class=\"n\">c_g</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"276:1-276:25\">\n<span id=\"計算結果の表示\" class=\"fragment\"></span><a href=\"#%E8%A8%88%E7%AE%97%E7%B5%90%E6%9E%9C%E3%81%AE%E8%A1%A8%E7%A4%BA\"><i class=\"fa fa-link\"></i></a>計算結果の表示</h3>\n<p data-sourcepos=\"277:1-277:126\">計算された基礎代謝量・目標摂取カロリー・PFCの目標量などをDataFrameとして表示しています。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"279:1-293:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">display_target_info</span><span class=\"p\">(</span><span class=\"n\">bmr</span><span class=\"p\">,</span> <span class=\"n\">tdee</span><span class=\"p\">,</span> <span class=\"n\">target_calories</span><span class=\"p\">,</span> <span class=\"n\">goal_label</span><span class=\"p\">,</span> <span class=\"n\">pfc_kcal</span><span class=\"p\">,</span> <span class=\"n\">pfc_g</span><span class=\"p\">):</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">計算結果</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">項目</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">基礎代謝量（BMR）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">活動代謝量（TDEE）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">目標摂取カロリー（</span><span class=\"si\">{</span><span class=\"n\">goal_label</span><span class=\"si\">}</span><span class=\"s\">）</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">値 (kcal/日)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">bmr</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">tdee</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">target_calories</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PFC目標摂取量</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">栄養素</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">たんぱく質（P）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">脂質　　　（F）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">炭水化物　（C）</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">カロリー (kcal)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_kcal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_kcal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_kcal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">グラム (g)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_g</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_g</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">pfc_g</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"296:1-296:28\">\n<span id=\"画像処理とapi連携\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86%E3%81%A8api%E9%80%A3%E6%90%BA\"><i class=\"fa fa-link\"></i></a>画像処理とAPI連携</h3>\n<p data-sourcepos=\"297:1-297:195\">画像をbase64に変換し、OpenAI APIにリクエストを送り、画像から栄養素（PFC）の数値をJSON形式で抽出。その後、得られたJSONを数値に変換している。</p>\n<ul data-sourcepos=\"298:1-301:0\">\n<li data-sourcepos=\"298:1-298:80\">APIレスポンスが失敗したときの例外処理も含まれています</li>\n<li data-sourcepos=\"299:1-301:0\">マークダウン記号が含まているときもあったため、プロンプトにその内容を入れています</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"302:1-336:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">encode_image</span><span class=\"p\">(</span><span class=\"n\">uploaded_file</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"nf\">b64encode</span><span class=\"p\">(</span><span class=\"n\">uploaded_file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">analyze_image</span><span class=\"p\">(</span><span class=\"n\">base64_image</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">https://api.openai.com/v1/chat/completions</span><span class=\"sh\">\"</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Content-Type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Authorization</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Bearer </span><span class=\"si\">{</span><span class=\"n\">api_key</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">model</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">この画像の栄養成分表示から「たんぱく質、脂質、炭水化物」の各値を抽出し、```jsonなどマークダウンや説明文はなしで、数値のみをjson形式で出力しなさい。例：{</span><span class=\"se\">\\\"</span><span class=\"s\">P</span><span class=\"se\">\\\"</span><span class=\"s\">: 数値, </span><span class=\"se\">\\\"</span><span class=\"s\">F</span><span class=\"se\">\\\"</span><span class=\"s\">: 数値, </span><span class=\"se\">\\\"</span><span class=\"s\">C</span><span class=\"se\">\\\"</span><span class=\"s\">: 数値}</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">image_url</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">image_url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">data:image/jpeg;base64,</span><span class=\"si\">{</span><span class=\"n\">base64_image</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">}}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">max_tokens</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()[</span><span class=\"sh\">'</span><span class=\"s\">choices</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n            <span class=\"nf\">except </span><span class=\"p\">(</span><span class=\"nb\">KeyError</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">JSONDecodeError</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_nutrients</span><span class=\"p\">(</span><span class=\"n\">data_str</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">data_str</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">P</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">F</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">C</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"339:1-339:34\">\n<span id=\"抽出結果の表示と集計\" class=\"fragment\"></span><a href=\"#%E6%8A%BD%E5%87%BA%E7%B5%90%E6%9E%9C%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%A8%E9%9B%86%E8%A8%88\"><i class=\"fa fa-link\"></i></a>抽出結果の表示と集計</h3>\n<p data-sourcepos=\"340:1-340:144\">アップロードされた複数の画像から抽出されたPFCをDataFrameとして表示し、合計して目標と比較しています。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"342:1-378:3\"><div class=\"highlight\"><pre><code><span class=\"k\">if</span> <span class=\"n\">uploaded_files</span> <span class=\"ow\">and</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">栄養成分を抽出する</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">抽出結果</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">columns</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">))</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>  <span class=\"c1\"># P, F, C\n</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">,</span> <span class=\"n\">use_container_width</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">抽出中...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n                <span class=\"n\">base64_img</span> <span class=\"o\">=</span> <span class=\"nf\">encode_image</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nf\">analyze_image</span><span class=\"p\">(</span><span class=\"n\">base64_img</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">)</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"ow\">or</span> <span class=\"sh\">\"</span><span class=\"s\">抽出失敗</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                <span class=\"n\">nutrients</span> <span class=\"o\">=</span> <span class=\"nf\">parse_nutrients</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"ow\">or</span> <span class=\"sh\">\"</span><span class=\"s\">{}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">nutrients</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># 合計と差分\n</span>    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">たんぱく質（P）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">脂質　　　（F）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">炭水化物　（C）</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"n\">kcal_per_g</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n    <span class=\"n\">total_kcal</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">g</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">kcal_per_g</span><span class=\"p\">)]</span>\n    <span class=\"n\">diff_g</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">pfc_g</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">)]</span>\n    <span class=\"n\">diff_kcal</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">pfc_kcal</span><span class=\"p\">,</span> <span class=\"n\">total_kcal</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">合計栄養成分</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">栄養素</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">カロリー (kcal)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">total_kcal</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">グラム (g)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">total</span><span class=\"p\">]</span>\n    <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">目標値までの量</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">dataframe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">栄養素</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">カロリー (kcal)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">diff_kcal</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">グラム (g)</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">diff_g</span><span class=\"p\">]</span>\n    <span class=\"p\">}),</span> <span class=\"n\">hide_index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"381:1-381:31\">\n<span id=\"達成率グラフの表示\" class=\"fragment\"></span><a href=\"#%E9%81%94%E6%88%90%E7%8E%87%E3%82%B0%E3%83%A9%E3%83%95%E3%81%AE%E8%A1%A8%E7%A4%BA\"><i class=\"fa fa-link\"></i></a>達成率グラフの表示</h3>\n<p data-sourcepos=\"382:1-382:78\">PFCそれぞれに対して接種達成率を円グラフで表示します。</p>\n<ul data-sourcepos=\"383:1-384:0\">\n<li data-sourcepos=\"383:1-384:0\">達成率と残りの割合を見やすく色分けしています</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"385:1-406:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">plot_achievement_rates</span><span class=\"p\">(</span><span class=\"n\">actuals</span><span class=\"p\">,</span> <span class=\"n\">targets</span><span class=\"p\">):</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">達成率</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">columns</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">nutrients</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">たんぱく質（P）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">actuals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">#FFA500</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#FFE5B4</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">脂質（F）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">actuals</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">#FFD700</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#FFFACD</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">炭水化物（C）</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">actuals</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"sh\">\"</span><span class=\"s\">#66BB6A</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#C8E6C9</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">color1</span><span class=\"p\">,</span> <span class=\"n\">color2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">nutrients</span><span class=\"p\">):</span>\n        <span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">actual</span> <span class=\"o\">/</span> <span class=\"n\">target</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">target</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">pie</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"mi\">100</span> <span class=\"o\">-</span> <span class=\"n\">rate</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">達成</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">残り</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n            <span class=\"n\">autopct</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">%1.1f%%</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">startangle</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">counterclock</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">color1</span><span class=\"p\">,</span> <span class=\"n\">color2</span><span class=\"p\">],</span> <span class=\"n\">textprops</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">color</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">black</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">fontsize</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">set_title</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"nf\">axis</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">equal</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">col</span><span class=\"p\">.</span><span class=\"nf\">pyplot</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"409:1-409:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<p data-sourcepos=\"410:1-410:191\">画像からPFCを抽出するのに、はじめはOCRで実装しようとしたのですが、全くうまく行きませんでした。生成AIのすごさを改めて感じています。</p>\n<p data-sourcepos=\"412:1-412:220\">また、今回栄養成分表示を用いていますが、ものによっては複数入っていても1個あたりの数値が書いていたりするので、何かいい方法はないかなと考えています。</p>\n",
        "body": "## 最近太ってきました\n昔と比べて瘦せづらくなってきました…\n\nダイエットにおいて、食事管理はかなり重要です。\n今回は、ユーザー情報や、栄養成分表示の画像から食事管理をするアプリを作成しました。\n\nユーザー情報を変更すると、基礎代謝量などの計算結果や1日の目標摂取量が変わります。\n![output_1.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3682615/6cd02fcf-8741-495a-90da-6446379d409c.gif)\n\n画像に対して栄養成分の抽出を行うと目標値までの量やグラフが表示されます。\n![output_3.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3682615/695ef91e-8167-4c0a-ae4f-5a1d55d14e93.gif)\n\n\n## PFCバランス\nPFCバランスとは、P（たんぱく質）、F（脂質）、C（炭水化物）の摂取比率のことです。\n\n:::note info\n1~49歳の理想的なPFCバランス（総カロリーに対して）は、P: 13~20%、C: 20~30%、F: 50~65%と言われています。\n\n※ 参考文献：厚生労働省策定「日本人食事摂取基準（2020年版）」\n:::\n\n\n\nまた、今回PFCの目標摂取量などの計算式は以下のサイトを参考にしています。\n\nhttps://www.luft.co.jp/cgi/pfc.php\n\n## 実装\n処理の流れは以下の通りです。\n\n1. ユーザーの入力情報を取得\n1. PFC目標を計算\n1. 表示\n1. 画像アップロード → 抽出 → 合計 → 差分 → グラフ\n\n<details>\n<summary>コードまとめ</summary>\n\n```python\nimport streamlit as st\nimport base64\nimport requests\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport urllib3\n\n# --- 初期設定 ---\nst.title(\"食事管理アプリ\")\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\nmatplotlib.rcParams['font.family'] = 'MS Gothic'\n\n# --- ユーザー入力 ---\ndef get_user_input():\n    st.sidebar.header(\"入力項目\")\n    height = st.sidebar.number_input(\"身長（cm）\", 0.0, 300.0, 170.0, 0.1)\n    weight = st.sidebar.number_input(\"体重（kg）\", 0.0, 300.0, 60.0, 0.1)\n    age = st.sidebar.number_input(\"年齢\", 0, 120, 30, 1)\n    gender = st.sidebar.selectbox(\"性別\", (\"男性\", \"女性\"))\n\n    activity_levels = {\n        \"ほぼ運動しない活動代謝量\": 1.2,\n        \"軽い運動活動代謝量\": 1.375,\n        \"中程度の運動活動代謝量\": 1.55,\n        \"激しい運動活動代謝量\": 1.725,\n        \"非常に激しい活動代謝量\": 1.9\n    }\n    activity_label = st.sidebar.selectbox(\"活動レベル\", list(activity_levels.keys()))\n\n    goal_options = {\n        \"減量\": 0.8,\n        \"現状維持\": 1.0,\n        \"増量\": 1.2\n    }\n    goal_label = st.sidebar.selectbox(\"体重の目標\", list(goal_options.keys()))\n\n    return height, weight, age, gender, activity_levels[activity_label], goal_label, goal_options[goal_label]\n\n# --- 栄養計算 ---\ndef calculate_nutrition(height, weight, age, gender, activity_mult, goal_label, goal_mult):\n    bmr = (\n        66.47 + (13.75 * weight) + (5.0 * height) - (6.76 * age)\n        if gender == \"男性\"\n        else 665.1 + (9.56 * weight) + (1.85 * height) - (4.68 * age)\n    )\n    tdee = bmr * activity_mult\n    target_calories = tdee * goal_mult\n    p_kcal, f_kcal, c_kcal = target_calories * 0.2, target_calories * 0.3, target_calories * 0.5\n    p_g, f_g, c_g = p_kcal / 4, f_kcal / 9, c_kcal / 4\n    return bmr, tdee, target_calories, (p_kcal, f_kcal, c_kcal), (p_g, f_g, c_g)\n\n# --- 表示 ---\ndef display_target_info(bmr, tdee, target_calories, goal_label, pfc_kcal, pfc_g):\n    st.subheader(\"計算結果\")\n    st.dataframe(pd.DataFrame({\n        \"項目\": [\"基礎代謝量（BMR）\", \"活動代謝量（TDEE）\", f\"目標摂取カロリー（{goal_label}）\"],\n        \"値 (kcal/日)\": [f\"{bmr:.1f}\", f\"{tdee:.1f}\", f\"{target_calories:.1f}\"]\n    }), hide_index=True)\n\n    st.subheader(\"PFC目標摂取量\")\n    st.dataframe(pd.DataFrame({\n        \"栄養素\": [\"たんぱく質（P）\", \"脂質　　　（F）\", \"炭水化物　（C）\"],\n        \"カロリー (kcal)\": [f\"{pfc_kcal[0]:.1f}\", f\"{pfc_kcal[1]:.1f}\", f\"{pfc_kcal[2]:.1f}\"],\n        \"グラム (g)\": [f\"{pfc_g[0]:.1f}\", f\"{pfc_g[1]:.1f}\", f\"{pfc_g[2]:.1f}\"]\n    }), hide_index=True)\n\n# --- API呼び出し ---\ndef encode_image(uploaded_file):\n    return base64.b64encode(uploaded_file.read()).decode(\"utf-8\")\n\ndef analyze_image(base64_image, api_key):\n    url = \"https://api.openai.com/v1/chat/completions\"\n    headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {api_key}\"}\n    payload = json.dumps({\n        \"model\": \"gpt-4o\",\n        \"messages\": [{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"この画像の栄養成分表示から「たんぱく質、脂質、炭水化物」の各値を抽出し、```jsonなどマークダウンや説明文はなしで、数値のみをjson形式で出力しなさい。例：{\\\"P\\\": 数値, \\\"F\\\": 数値, \\\"C\\\": 数値}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}}\n            ]\n        }],\n        \"max_tokens\": 1000,\n    })\n\n    for _ in range(3):\n        response = requests.post(url, headers=headers, data=payload)\n        if response.ok:\n            try:\n                return response.json()['choices'][0]['message']['content']\n            except (KeyError, json.JSONDecodeError):\n                return None\n    return None\n\ndef parse_nutrients(data_str):\n    try:\n        data = json.loads(data_str)\n        return float(data.get(\"P\", 0)), float(data.get(\"F\", 0)), float(data.get(\"C\", 0))\n    except:\n        return 0.0, 0.0, 0.0\n\n# --- グラフ表示 ---\ndef plot_achievement_rates(actuals, targets):\n    st.subheader(\"達成率\")\n    cols = st.columns(3)\n    nutrients = [\n        (\"たんぱく質（P）\", actuals[0], targets[0], \"#FFA500\", \"#FFE5B4\"),\n        (\"脂質（F）\", actuals[1], targets[1], \"#FFD700\", \"#FFFACD\"),\n        (\"炭水化物（C）\", actuals[2], targets[2], \"#66BB6A\", \"#C8E6C9\"),\n    ]\n\n    for col, (name, actual, target, color1, color2) in zip(cols, nutrients):\n        rate = round(actual / target * 100, 1) if target else 0\n        fig, ax = plt.subplots(figsize=(3, 3))\n        ax.pie(\n            [rate, 100 - rate], labels=[\"達成\", \"残り\"],\n            autopct='%1.1f%%', startangle=90, counterclock=False,\n            colors=[color1, color2], textprops={'color': \"black\", 'fontsize': 10}\n        )\n        ax.set_title(name, fontsize=12)\n        ax.axis('equal')\n        col.pyplot(fig)\n\n# --- メイン処理 ---\ndef main():\n    api_key = \"your_openai_api_key\"\n    height, weight, age, gender, activity_mult, goal_label, goal_mult = get_user_input()\n    bmr, tdee, target_calories, pfc_kcal, pfc_g = calculate_nutrition(height, weight, age, gender, activity_mult, goal_label, goal_mult)\n    display_target_info(bmr, tdee, target_calories, goal_label, pfc_kcal, pfc_g)\n\n    st.markdown(\"---\")\n    st.subheader(\"画像のアップロード\")\n    uploaded_files = st.file_uploader(\"画像をアップロードしてください\", type=[\"jpg\", \"jpeg\", \"png\"], accept_multiple_files=True)\n\n    if uploaded_files and st.button(\"栄養成分を抽出する\"):\n        st.subheader(\"抽出結果\")\n        cols = st.columns(len(uploaded_files))\n        total = [0.0, 0.0, 0.0]  # P, F, C\n\n        for i, file in enumerate(uploaded_files):\n            with cols[i]:\n                st.image(file, use_container_width=True)\n                with st.spinner(\"抽出中...\"):\n                    base64_img = encode_image(file)\n                    response = analyze_image(base64_img, api_key)\n                    st.markdown(response or \"抽出失敗\")\n                    nutrients = parse_nutrients(response or \"{}\")\n                    total = [x + y for x, y in zip(total, nutrients)]\n\n        # 合計と差分\n        labels = [\"たんぱく質（P）\", \"脂質　　　（F）\", \"炭水化物　（C）\"]\n        kcal_per_g = [4, 9, 4]\n        total_kcal = [g * k for g, k in zip(total, kcal_per_g)]\n        diff_g = [t - a for t, a in zip(pfc_g, total)]\n        diff_kcal = [t - a for t, a in zip(pfc_kcal, total_kcal)]\n\n        st.subheader(\"合計栄養成分\")\n        st.dataframe(pd.DataFrame({\n            \"栄養素\": labels,\n            \"カロリー (kcal)\": [f\"{x:.1f}\" for x in total_kcal],\n            \"グラム (g)\": [f\"{x:.1f}\" for x in total]\n        }), hide_index=True)\n\n        st.subheader(\"目標値までの量\")\n        st.dataframe(pd.DataFrame({\n            \"栄養素\": labels,\n            \"カロリー (kcal)\": [f\"{x:.1f}\" for x in diff_kcal],\n            \"グラム (g)\": [f\"{x:.1f}\" for x in diff_g]\n        }), hide_index=True)\n\n        plot_achievement_rates(total, pfc_g)\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n</details>\n\n\n### ユーザー入力の取得\nサイドバーにユーザー情報を入力するUIをまとめた関数です。\n* 活動レベルや目標を辞書で定義し、対応する係数を返すようにしています\n* 選択肢の日本語表示と係数を分離して、UIと処理を明確にしています\n\n```python\ndef get_user_input():\n    st.sidebar.header(\"入力項目\")\n    height = st.sidebar.number_input(\"身長（cm）\", 0.0, 300.0, 170.0, 0.1)\n    weight = st.sidebar.number_input(\"体重（kg）\", 0.0, 300.0, 60.0, 0.1)\n    age = st.sidebar.number_input(\"年齢\", 0, 120, 30, 1)\n    gender = st.sidebar.selectbox(\"性別\", (\"男性\", \"女性\"))\n\n    activity_levels = {\n        \"ほぼ運動しない活動代謝量\": 1.2,\n        \"軽い運動活動代謝量\": 1.375,\n        \"中程度の運動活動代謝量\": 1.55,\n        \"激しい運動活動代謝量\": 1.725,\n        \"非常に激しい活動代謝量\": 1.9\n    }\n    activity_label = st.sidebar.selectbox(\"活動レベル\", list(activity_levels.keys()))\n\n    goal_options = {\n        \"減量\": 0.8,\n        \"現状維持\": 1.0,\n        \"増量\": 1.2\n    }\n    goal_label = st.sidebar.selectbox(\"体重の目標\", list(goal_options.keys()))\n\n    return height, weight, age, gender, activity_levels[activity_label], goal_label, goal_options[goal_label]\n```\n\n\n### 基礎代謝と目標PFCの計算\n基礎代謝量、活動代謝量、目標摂取カロリー、PFCバランスを計算しています。\n* PFCは一般的な比率（20:30:50）で計算していますが、Pを多くするなどカスタマイズしてもいいとおもいます\n\n```python\ndef calculate_nutrition(height, weight, age, gender, activity_mult, goal_label, goal_mult):\n    bmr = (\n        66.47 + (13.75 * weight) + (5.0 * height) - (6.76 * age)\n        if gender == \"男性\"\n        else 665.1 + (9.56 * weight) + (1.85 * height) - (4.68 * age)\n    )\n    tdee = bmr * activity_mult\n    target_calories = tdee * goal_mult\n    p_kcal, f_kcal, c_kcal = target_calories * 0.2, target_calories * 0.3, target_calories * 0.5\n    p_g, f_g, c_g = p_kcal / 4, f_kcal / 9, c_kcal / 4\n    return bmr, tdee, target_calories, (p_kcal, f_kcal, c_kcal), (p_g, f_g, c_g)\n```\n\n\n\n### 計算結果の表示\n計算された基礎代謝量・目標摂取カロリー・PFCの目標量などをDataFrameとして表示しています。\n\n```python\ndef display_target_info(bmr, tdee, target_calories, goal_label, pfc_kcal, pfc_g):\n    st.subheader(\"計算結果\")\n    st.dataframe(pd.DataFrame({\n        \"項目\": [\"基礎代謝量（BMR）\", \"活動代謝量（TDEE）\", f\"目標摂取カロリー（{goal_label}）\"],\n        \"値 (kcal/日)\": [f\"{bmr:.1f}\", f\"{tdee:.1f}\", f\"{target_calories:.1f}\"]\n    }), hide_index=True)\n\n    st.subheader(\"PFC目標摂取量\")\n    st.dataframe(pd.DataFrame({\n        \"栄養素\": [\"たんぱく質（P）\", \"脂質　　　（F）\", \"炭水化物　（C）\"],\n        \"カロリー (kcal)\": [f\"{pfc_kcal[0]:.1f}\", f\"{pfc_kcal[1]:.1f}\", f\"{pfc_kcal[2]:.1f}\"],\n        \"グラム (g)\": [f\"{pfc_g[0]:.1f}\", f\"{pfc_g[1]:.1f}\", f\"{pfc_g[2]:.1f}\"]\n    }), hide_index=True)\n```\n\n\n### 画像処理とAPI連携\n画像をbase64に変換し、OpenAI APIにリクエストを送り、画像から栄養素（PFC）の数値をJSON形式で抽出。その後、得られたJSONを数値に変換している。\n* APIレスポンスが失敗したときの例外処理も含まれています\n* マークダウン記号が含まているときもあったため、プロンプトにその内容を入れています\n\n\n```python\ndef encode_image(uploaded_file):\n    return base64.b64encode(uploaded_file.read()).decode(\"utf-8\")\n\ndef analyze_image(base64_image, api_key):\n    url = \"https://api.openai.com/v1/chat/completions\"\n    headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {api_key}\"}\n    payload = json.dumps({\n        \"model\": \"gpt-4o\",\n        \"messages\": [{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"この画像の栄養成分表示から「たんぱく質、脂質、炭水化物」の各値を抽出し、```jsonなどマークダウンや説明文はなしで、数値のみをjson形式で出力しなさい。例：{\\\"P\\\": 数値, \\\"F\\\": 数値, \\\"C\\\": 数値}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}}\n            ]\n        }],\n        \"max_tokens\": 500,\n    })\n\n    for _ in range(3):\n        response = requests.post(url, headers=headers, data=payload)\n        if response.ok:\n            try:\n                return response.json()['choices'][0]['message']['content']\n            except (KeyError, json.JSONDecodeError):\n                return None\n    return None\n\ndef parse_nutrients(data_str):\n    try:\n        data = json.loads(data_str)\n        return float(data.get(\"P\", 0)), float(data.get(\"F\", 0)), float(data.get(\"C\", 0))\n    except:\n        return 0.0, 0.0, 0.0\n```\n\n\n### 抽出結果の表示と集計\nアップロードされた複数の画像から抽出されたPFCをDataFrameとして表示し、合計して目標と比較しています。\n\n```python\nif uploaded_files and st.button(\"栄養成分を抽出する\"):\n    st.subheader(\"抽出結果\")\n    cols = st.columns(len(uploaded_files))\n    total = [0.0, 0.0, 0.0]  # P, F, C\n\n    for i, file in enumerate(uploaded_files):\n        with cols[i]:\n            st.image(file, use_container_width=True)\n            with st.spinner(\"抽出中...\"):\n                base64_img = encode_image(file)\n                response = analyze_image(base64_img, api_key)\n                st.markdown(response or \"抽出失敗\")\n                nutrients = parse_nutrients(response or \"{}\")\n                total = [x + y for x, y in zip(total, nutrients)]\n\n    # 合計と差分\n    labels = [\"たんぱく質（P）\", \"脂質　　　（F）\", \"炭水化物　（C）\"]\n    kcal_per_g = [4, 9, 4]\n    total_kcal = [g * k for g, k in zip(total, kcal_per_g)]\n    diff_g = [t - a for t, a in zip(pfc_g, total)]\n    diff_kcal = [t - a for t, a in zip(pfc_kcal, total_kcal)]\n\n    st.subheader(\"合計栄養成分\")\n    st.dataframe(pd.DataFrame({\n        \"栄養素\": labels,\n        \"カロリー (kcal)\": [f\"{x:.1f}\" for x in total_kcal],\n        \"グラム (g)\": [f\"{x:.1f}\" for x in total]\n    }), hide_index=True)\n\n    st.subheader(\"目標値までの量\")\n    st.dataframe(pd.DataFrame({\n        \"栄養素\": labels,\n        \"カロリー (kcal)\": [f\"{x:.1f}\" for x in diff_kcal],\n        \"グラム (g)\": [f\"{x:.1f}\" for x in diff_g]\n    }), hide_index=True)\n```\n\n\n### 達成率グラフの表示\nPFCそれぞれに対して接種達成率を円グラフで表示します。\n* 達成率と残りの割合を見やすく色分けしています\n\n```python\ndef plot_achievement_rates(actuals, targets):\n    st.subheader(\"達成率\")\n    cols = st.columns(3)\n    nutrients = [\n        (\"たんぱく質（P）\", actuals[0], targets[0], \"#FFA500\", \"#FFE5B4\"),\n        (\"脂質（F）\", actuals[1], targets[1], \"#FFD700\", \"#FFFACD\"),\n        (\"炭水化物（C）\", actuals[2], targets[2], \"#66BB6A\", \"#C8E6C9\"),\n    ]\n\n    for col, (name, actual, target, color1, color2) in zip(cols, nutrients):\n        rate = round(actual / target * 100, 1) if target else 0\n        fig, ax = plt.subplots(figsize=(3, 3))\n        ax.pie(\n            [rate, 100 - rate], labels=[\"達成\", \"残り\"],\n            autopct='%1.1f%%', startangle=90, counterclock=False,\n            colors=[color1, color2], textprops={'color': \"black\", 'fontsize': 10}\n        )\n        ax.set_title(name, fontsize=12)\n        ax.axis('equal')\n        col.pyplot(fig)\n```\n\n\n## まとめ\n画像からPFCを抽出するのに、はじめはOCRで実装しようとしたのですが、全くうまく行きませんでした。生成AIのすごさを改めて感じています。\n\nまた、今回栄養成分表示を用いていますが、ものによっては複数入っていても1個あたりの数値が書いていたりするので、何かいい方法はないかなと考えています。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-05-22T18:10:03+09:00",
        "group": null,
        "id": "86dd04ce533d86205d14",
        "likes_count": 8,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 3,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "API",
            "versions": []
          },
          {
            "name": "ダイエット",
            "versions": []
          },
          {
            "name": "画像認識",
            "versions": []
          },
          {
            "name": "Streamlit",
            "versions": []
          }
        ],
        "title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
        "updated_at": "2025-05-22T18:59:13+09:00",
        "url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
        "user": {
          "description": "解析が好きです。\r\n色々試してみようと思います。",
          "facebook_id": "",
          "followees_count": 2,
          "followers_count": 5,
          "github_login_name": "mamoru-ngy",
          "id": "mamoru-ngy",
          "items_count": 19,
          "linkedin_id": "",
          "location": "",
          "name": "",
          "organization": "",
          "permanent_id": 3682615,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3682615/ab52b45c29bccbd73888948aca1798a3a8f79b6a/large.png?1708326341",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": "tanitaco",
        "slide": false,
        "semantic_similarity": 0.7467344999313354,
        "quality_score": 23,
        "python_code_score": 6,
        "python_code_blocks": 7
      },
      {
        "rendered_body": "<h1 data-sourcepos=\"1:1-1:19\">\n<span id=\"1はじめに\" class=\"fragment\"></span><a href=\"#1%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>1.　はじめに</h1>\n<p data-sourcepos=\"2:1-2:328\">　この記事では、さまざまな制約下にもめげず AI-OCR を自作した過程を記述しています。生成AIで何でも可能なこのご時世にそんなモノ好きはいないでしょうが、もし、仮にAI-OCRを自作される機会がありましたら、参考となりましたら幸いです。</p>\n<h1 data-sourcepos=\"4:1-4:13\">\n<span id=\"2背景\" class=\"fragment\"></span><a href=\"#2%E8%83%8C%E6%99%AF\"><i class=\"fa fa-link\"></i></a>2.　背景</h1>\n<h2 data-sourcepos=\"5:1-5:16\">\n<span id=\"21動機\" class=\"fragment\"></span><a href=\"#21%E5%8B%95%E6%A9%9F\"><i class=\"fa fa-link\"></i></a>2.1.　動機</h2>\n<p data-sourcepos=\"6:1-9:21\">　教育訓練講座（SAMURAI ENGINEER　AIデータサイエンスコース）を半年間受講し、機械学習の基礎を学びました。<br>\n　得た知識を使って、是非実現したいことがありました。それがAI-OCRの作成です。<br>\n　私は現在、とある企業の人事・給与事務の統括をしており、部下の人員削減の一方、業務量の増大に日々頭を抱えています。その私が今、一番恐れているのが、４月に新入社員が入ってくることによる（一過性ですが）業務量の増大です。<br>\n　人を雇うと、</p>\n<ul data-sourcepos=\"10:1-16:0\">\n<li data-sourcepos=\"10:1-10:92\">人事システムに人事基礎データ（氏名、住所、生年月日など）登録</li>\n<li data-sourcepos=\"11:1-11:62\">マイナンバーを収集し、人事システムへ登録</li>\n<li data-sourcepos=\"12:1-12:101\">社員証の発行（外注ではなく、私の部署でカード発行機で発行している）</li>\n<li data-sourcepos=\"13:1-13:29\">雇用保険加入手続き</li>\n<li data-sourcepos=\"14:1-14:29\">厚生年金加入手続き</li>\n<li data-sourcepos=\"15:1-16:0\">健康保険加入手続き</li>\n</ul>\n<p data-sourcepos=\"17:1-17:99\">といった事務を２週間くらいでやり遂げなければならず、結構負担です。</p>\n<p data-sourcepos=\"19:1-19:21\">　それに加え、</p>\n<ul data-sourcepos=\"20:1-23:0\">\n<li data-sourcepos=\"20:1-20:98\">社内システムの統制が厳しく、社外へのネットワークは遮断されている</li>\n<li data-sourcepos=\"21:1-21:74\">業務用パソコンへの新たなソフトウエア導入はご法度</li>\n<li data-sourcepos=\"22:1-23:0\">社内業務アプリ作成・メンテを委託していたグループ会社との業務委託契約が解消され、社内に業務アプリを作成する部署がなくなった</li>\n</ul>\n<p data-sourcepos=\"24:1-25:162\">　そういった事情で、未だにマイナンバーなどの収集は「紙」です。<br>\n　収集した紙を部下を総動員して（もちろん管理職の私も含め）紙からデータ起こしをしてシステムに登録しています。</p>\n<p data-sourcepos=\"27:1-28:64\">　今年は新入300名。多い。疲弊している部下に仕事の上乗せをしたら暴動が起きるかもしれない。怖い。。。<br>\nこりゃ、自前で　AI-OCR作るっきゃないでしょ！</p>\n<h2 data-sourcepos=\"30:1-30:20\">\n<span id=\"22-開発環境\" class=\"fragment\"></span><a href=\"#22-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>2.2. 開発環境</h2>\n<p data-sourcepos=\"31:1-31:30\"><strong>ハード（業務用PC）</strong></p>\n<table data-sourcepos=\"33:1-37:29\">\n<thead>\n<tr data-sourcepos=\"33:1-33:15\">\n<th style=\"text-align: left\" data-sourcepos=\"33:2-33:7\">項目</th>\n<th style=\"text-align: left\" data-sourcepos=\"33:9-33:14\">内容</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"35:1-35:14\">\n<td style=\"text-align: left\" data-sourcepos=\"35:2-35:3\">OS</td>\n<td style=\"text-align: left\" data-sourcepos=\"35:5-35:13\">windows10</td>\n</tr>\n<tr data-sourcepos=\"36:1-36:20\">\n<td style=\"text-align: left\" data-sourcepos=\"36:2-36:4\">CPU</td>\n<td style=\"text-align: left\" data-sourcepos=\"36:6-36:19\">core i5-8365u</td>\n</tr>\n<tr data-sourcepos=\"37:1-37:29\">\n<td style=\"text-align: left\" data-sourcepos=\"37:2-37:4\">GPU</td>\n<td style=\"text-align: left\" data-sourcepos=\"37:6-37:28\">インテルHD Graphics</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"0:0-0:0\"><strong>ソフト</strong></p>\n<table data-sourcepos=\"39:1-42:13\">\n<thead>\n<tr data-sourcepos=\"39:1-39:38\">\n<th style=\"text-align: left\" data-sourcepos=\"39:16-39:21\">名称</th>\n<th style=\"text-align: right\" data-sourcepos=\"39:23-39:37\">バージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"42:1-42:13\">\n<td style=\"text-align: left\" data-sourcepos=\"42:2-42:7\">Python</td>\n<td style=\"text-align: right\" data-sourcepos=\"42:9-42:12\">3.11</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"44:1-44:75\">※Pythonは会社業務用にプレインストールされているもの</p>\n<p data-sourcepos=\"0:0-0:0\"><strong>ライブラリ</strong></p>\n<table data-sourcepos=\"46:1-54:13\">\n<thead>\n<tr data-sourcepos=\"46:1-46:44\">\n<th style=\"text-align: left\" data-sourcepos=\"46:22-46:27\">名称</th>\n<th style=\"text-align: right\" data-sourcepos=\"46:29-46:43\">バージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"49:1-49:14\">\n<td style=\"text-align: left\" data-sourcepos=\"49:2-49:6\">numpy</td>\n<td style=\"text-align: right\" data-sourcepos=\"49:8-49:13\">1.24.3</td>\n</tr>\n<tr data-sourcepos=\"50:1-50:19\">\n<td style=\"text-align: left\" data-sourcepos=\"50:2-50:11\">Tensorflow</td>\n<td style=\"text-align: right\" data-sourcepos=\"50:13-50:18\">2.16.1</td>\n</tr>\n<tr data-sourcepos=\"51:1-51:14\">\n<td style=\"text-align: left\" data-sourcepos=\"51:2-51:7\">pandas</td>\n<td style=\"text-align: right\" data-sourcepos=\"51:9-51:13\">1.5.3</td>\n</tr>\n<tr data-sourcepos=\"52:1-52:18\">\n<td style=\"text-align: left\" data-sourcepos=\"52:2-52:11\">Matplotlib</td>\n<td style=\"text-align: right\" data-sourcepos=\"52:13-52:17\">3.7.1</td>\n</tr>\n<tr data-sourcepos=\"53:1-53:25\">\n<td style=\"text-align: left\" data-sourcepos=\"53:2-53:14\">opencv-python</td>\n<td style=\"text-align: right\" data-sourcepos=\"53:16-53:24\">4.11.0.86</td>\n</tr>\n<tr data-sourcepos=\"54:1-54:13\">\n<td style=\"text-align: left\" data-sourcepos=\"54:2-54:6\">Pilow</td>\n<td style=\"text-align: right\" data-sourcepos=\"54:8-54:12\">9.4.0</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"56:1-56:158\">　尚、ライブラリは pypi からダウンロードしてきたものをローカルのpylibというフォルダに置いておき、pipする際に、</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"57:1-59:3\"><div class=\"highlight\"><pre><code>pip install --no-index --find-links=pylib [導入するライブラリ名]\n</code></pre></div></div>\n<p data-sourcepos=\"60:1-60:15\">とします。</p>\n<h2 data-sourcepos=\"62:1-62:23\">\n<span id=\"23-学習データ\" class=\"fragment\"></span><a href=\"#23-%E5%AD%A6%E7%BF%92%E3%83%87%E3%83%BC%E3%82%BF\"><i class=\"fa fa-link\"></i></a>2.3. 学習データ</h2>\n<p data-sourcepos=\"63:1-65:183\">　MNIST手書き数字データセットを使用します。<br>\n　6万件の学習データと、1万件のテストデータがあり、AIモデルを鍛えるのにはうってつけです。<br>\n　さらに、認識率をあげるために、kerasのImageDatageneratorも使い、6万件の学習データにバリエーションを与えたものを学習させています。</p>\n<div class=\"code-frame\" data-lang=\"Python\" data-sourcepos=\"66:1-107:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># data \n</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"n\">mnist</span><span class=\"p\">.</span><span class=\"nf\">load_data</span><span class=\"p\">()</span>\n<span class=\"c1\"># input_shape : (data.shape[0],image_w, image_h, 1) float32   \n</span><span class=\"n\">X_train</span> <span class=\"o\">=</span> <span class=\"n\">X_train</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">image_w</span><span class=\"p\">,</span> <span class=\"n\">image_h</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">float32</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">X_test</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">image_w</span><span class=\"p\">,</span> <span class=\"n\">image_h</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">float32</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">X_train</span> <span class=\"o\">/=</span> <span class=\"mi\">255</span>\n<span class=\"n\">X_test</span> <span class=\"o\">/=</span> <span class=\"mi\">255</span>\n<span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">to_categorical</span><span class=\"p\">(</span><span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">to_categorical</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add start\n</span><span class=\"n\">datagen</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">preprocessing</span><span class=\"p\">.</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nc\">ImageDataGenerator</span><span class=\"p\">(</span>\n        <span class=\"c1\">#回転\n</span>    <span class=\"n\">rotation_range</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"c1\">#左右反転\n</span>    <span class=\"n\">horizontal_flip</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n    <span class=\"c1\">#上下平行移動\n</span>    <span class=\"n\">height_shift_range</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"c1\">#左右平行移動\n</span>    <span class=\"n\">width_shift_range</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"c1\">#ランダムにズーム\n</span>    <span class=\"n\">zoom_range</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"c1\">#チャンネルシフト\n</span>    <span class=\"n\">channel_shift_range</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"p\">)</span>\n<span class=\"n\">testgen</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">preprocessing</span><span class=\"p\">.</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nc\">ImageDataGenerator</span><span class=\"p\">()</span>\n\n<span class=\"n\">train_generator</span> <span class=\"o\">=</span> <span class=\"n\">datagen</span><span class=\"p\">.</span><span class=\"nf\">flow</span><span class=\"p\">(</span>\n        <span class=\"n\">X_train</span><span class=\"p\">,</span>\n        <span class=\"n\">y_train</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span>\n        <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n        <span class=\"p\">)</span>\n<span class=\"n\">test_generator</span> <span class=\"o\">=</span> <span class=\"n\">testgen</span><span class=\"p\">.</span><span class=\"nf\">flow</span><span class=\"p\">(</span>\n        <span class=\"n\">X_test</span><span class=\"p\">,</span>\n        <span class=\"n\">y_test</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">256</span>\n        <span class=\"p\">)</span>\n\n</code></pre></div></div>\n<h2 data-sourcepos=\"108:1-108:23\">\n<span id=\"24-学習モデル\" class=\"fragment\"></span><a href=\"#24-%E5%AD%A6%E7%BF%92%E3%83%A2%E3%83%87%E3%83%AB\"><i class=\"fa fa-link\"></i></a>2.4. 学習モデル</h2>\n<p data-sourcepos=\"109:1-112:69\">　自分で試行錯誤してモデルを定義してみましたが、学習してもaccuracy（正答率）が0.89どまりのものしか作れませんでした。（本当はここで0.95などを叩き出すものを提示できたらカッコ良かったのですが、実力が足りませんでした。ゴメンなさい。）<br>\n　そこで、先人の知恵をお借りすることとしました。<br>\n　25万件のデータで鍛え上げ、accuracy=099757を叩き出したとのNotebookをkaggleで見つけました。（<a href=\"https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist</a>)<br>\n　恐れながら、そのモデルを真似させて頂きます。</p>\n<div class=\"code-frame\" data-lang=\"Python\" data-sourcepos=\"113:1-138:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">build_model</span><span class=\"p\">():</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"nc\">Sequential</span><span class=\"p\">([</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span> <span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">same</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>\n        <span class=\"c1\">#\n</span>        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">same</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>\n        <span class=\"c1\">#\n</span>        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Flatten</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dense</span><span class=\"p\">(</span><span class=\"n\">nb_classes</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">softmax</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">])</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"139:1-139:13\">\n<span id=\"3準備\" class=\"fragment\"></span><a href=\"#3%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>3.　準備</h1>\n<p data-sourcepos=\"140:1-141:138\">　実際に読ませる帳票は、A4サイズの次の帳票です。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F4ca5a019-b3b8-4f5c-9850-c0f360e04d48.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0b3ecba8e77821c3a5b330a79917226f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F4ca5a019-b3b8-4f5c-9850-c0f360e04d48.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0b3ecba8e77821c3a5b330a79917226f\" alt=\"20250227192457-0005.tif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F4ca5a019-b3b8-4f5c-9850-c0f360e04d48.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3917123ed64697d17f0e7eac8feda2d9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/4ca5a019-b3b8-4f5c-9850-c0f360e04d48.tiff\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"143:1-146:102\">　このままOCRに読ませて、成果物を得ることができたらカッコいいのですが、初心者らしく手堅く進めます。<br>\n　具体的には、この帳票から「社員コード」と「個人番号」を読み取りたいのですが、文字の大きさが「社員コード」と「個人番号」では異なる上に、「個人番号」には格子までついています。いかにも調整が難しそうです。<br>\n　そこで２ファイルに分け、それぞれをモデルに掛けることにします。<br>\n　なお、ここの技法（切り出して、グレースケール保存する）については、</p>\n<p data-sourcepos=\"148:1-148:45\">（１）社員番号を切り出すコード</p>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F63565afe-cbc4-4524-a95c-3be334ed11bd.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d1240d8f85339a44d383afe6a7fff28\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F63565afe-cbc4-4524-a95c-3be334ed11bd.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d1240d8f85339a44d383afe6a7fff28\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F63565afe-cbc4-4524-a95c-3be334ed11bd.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3910befc4875940237081c2cf049a645 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/63565afe-cbc4-4524-a95c-3be334ed11bd.tiff\" loading=\"lazy\"></a>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"155:1-188:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getcwd</span><span class=\"p\">()</span>\n<span class=\"c1\">#オリジナル　スキャンデータの保管場所\n</span><span class=\"n\">in_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">AIocr</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">myno</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">ori</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#加工後のデータの保管場所\n</span><span class=\"n\">out_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">AIocr</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">myno</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">kcd</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#社員コードが写っている部分だけ抽出\n#  (1850, 870    ) (1850+500, 870    )\n#  (1850, 870+150) (1850+500, 870+150)\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">870</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1850</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>\n<span class=\"k\">for</span> <span class=\"n\">curDir</span><span class=\"p\">,</span><span class=\"n\">dirs</span><span class=\"p\">,</span><span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">,</span><span class=\"nb\">file</span><span class=\"p\">))</span>\n        <span class=\"c1\"># グレイスケール変換\n</span>        <span class=\"k\">if</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">mode</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">RGB</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">RGB</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">float32</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 切り出し枠\n</span>        <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"n\">rgb</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span>\n        <span class=\"n\">rgbL</span> <span class=\"o\">=</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">rgb</span><span class=\"o\">/</span><span class=\"mf\">255.0</span><span class=\"p\">,</span><span class=\"mf\">2.2</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rgbL</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">rgbL</span><span class=\"p\">[:,:,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">rgbL</span><span class=\"p\">[:,:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">grayL</span> <span class=\"o\">=</span> <span class=\"mf\">0.299</span> <span class=\"o\">*</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mf\">0.587</span> <span class=\"o\">*</span> <span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"mf\">0.114</span> <span class=\"o\">*</span> <span class=\"n\">b</span> \n        <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">grayL</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">2.2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">255</span>\n        <span class=\"n\">img_gray</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">fromarray</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">.</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">uint8</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n        <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.</span><span class=\"sh\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">img_gray</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">out_path</span><span class=\"p\">,</span><span class=\"n\">file_name</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">.bmp</span><span class=\"sh\">\"</span><span class=\"p\">),</span><span class=\"sh\">\"</span><span class=\"s\">BMP</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"189:1-189:27\">【切り出した画像】</p>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2Fa91b5b39-1d65-4a54-a619-ee07d894f98e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e20093e9cee61408c1bc93be572a2bd4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2Fa91b5b39-1d65-4a54-a619-ee07d894f98e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e20093e9cee61408c1bc93be572a2bd4\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2Fa91b5b39-1d65-4a54-a619-ee07d894f98e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=94223cce65b6886b3460cf2ec4024900 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/a91b5b39-1d65-4a54-a619-ee07d894f98e.png\" loading=\"lazy\"></a>\n<p data-sourcepos=\"195:1-196:121\">※なお、保存形式としては、Bitmapを採用しました。<br>\n　Bitmapにすると、MS-paintで開いて、該当する部分が何pixelか数えることができるからです。</p>\n<p data-sourcepos=\"198:1-198:45\">（２）個人番号を切り出すコード</p>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=067b1c142a82fa96f4b457b5dec17015\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=067b1c142a82fa96f4b457b5dec17015\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0fd8713cd19cef44060729055484e7bc 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff\" loading=\"lazy\"></a>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"205:1-240:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"c1\"># 個人番号届出書のマイナ部分のみ切り出し\n</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getcwd</span><span class=\"p\">()</span>\n<span class=\"c1\"># オリジナルスキャンデータの保存場所\n</span><span class=\"n\">in_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">AIocr</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">myno</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">ori</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># 加工後のデータの保管場所\n</span><span class=\"n\">out_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">AIocr</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">myno</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">mno</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#社員CDが写っている部分だけ抽出\n#  (300, 1375    ) (300+900, 1375    )\n#  (300, 1375+180) (300+900, 1375+180)\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1375</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">180</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>\n<span class=\"k\">for</span> <span class=\"n\">curDir</span><span class=\"p\">,</span><span class=\"n\">dirs</span><span class=\"p\">,</span><span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">,</span><span class=\"nb\">file</span><span class=\"p\">))</span>\n        <span class=\"c1\"># グレイスケール変換\n</span>        <span class=\"k\">if</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">mode</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">RGB</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">RGB</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">float32</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 枠\n</span>        <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"n\">rgb</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span>\n        <span class=\"n\">rgbL</span> <span class=\"o\">=</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">rgb</span><span class=\"o\">/</span><span class=\"mf\">255.0</span><span class=\"p\">,</span><span class=\"mf\">2.2</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">rgbL</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">rgbL</span><span class=\"p\">[:,:,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">rgbL</span><span class=\"p\">[:,:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">grayL</span> <span class=\"o\">=</span> <span class=\"mf\">0.299</span> <span class=\"o\">*</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mf\">0.587</span> <span class=\"o\">*</span> <span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"mf\">0.114</span> <span class=\"o\">*</span> <span class=\"n\">b</span> \n        <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">grayL</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">2.2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">255</span>\n        <span class=\"n\">img_gray</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">fromarray</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">.</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">uint8</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n        <span class=\"c1\">#img_gray = img_gray.resize((img_gray.width // 6, img_gray.height // 6))\n</span>        <span class=\"c1\">#img_gray.save(os.path.join(out_path,file))\n</span>        <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.</span><span class=\"sh\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">img_gray</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">out_path</span><span class=\"p\">,</span><span class=\"n\">file_name</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">.bmp</span><span class=\"sh\">\"</span><span class=\"p\">),</span><span class=\"sh\">\"</span><span class=\"s\">BMP</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"242:1-242:27\">【切り出した画像」</p>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F1e416c8a-4bc5-48ef-922d-e653cd906a47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0c1705b68975e3dc2379ad633b2816a3\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F1e416c8a-4bc5-48ef-922d-e653cd906a47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0c1705b68975e3dc2379ad633b2816a3\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F1e416c8a-4bc5-48ef-922d-e653cd906a47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=76bbc488d9cd830eb08339e57d7fc86c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/1e416c8a-4bc5-48ef-922d-e653cd906a47.png\" loading=\"lazy\"></a>\n<h1 data-sourcepos=\"248:1-248:13\">\n<span id=\"4制作\" class=\"fragment\"></span><a href=\"#4%E5%88%B6%E4%BD%9C\"><i class=\"fa fa-link\"></i></a>4.　制作</h1>\n<h2 data-sourcepos=\"249:1-249:26\">\n<span id=\"41-モデルの学習\" class=\"fragment\"></span><a href=\"#41-%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E5%AD%A6%E7%BF%92\"><i class=\"fa fa-link\"></i></a>4.1. モデルの学習</h2>\n<p data-sourcepos=\"250:1-250:57\">　モデル構築と、学習のコード全体です。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"251:1-355:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">#  python 3.11 および　tensorflow 2.16 対応\n#  注意 tensorflow2.15以前では、kerasの扱いが違うので、以下のコードではエラーになる。\n</span><span class=\"kn\">import</span> <span class=\"n\">tensorflow</span> <span class=\"k\">as</span> <span class=\"n\">tf</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">import</span> <span class=\"n\">japanize_matplotlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">seaborn</span> <span class=\"k\">as</span> <span class=\"n\">sns</span>\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n\n<span class=\"n\">image_w</span> <span class=\"o\">=</span> <span class=\"mi\">28</span>\n<span class=\"n\">image_h</span> <span class=\"o\">=</span> <span class=\"mi\">28</span>\n<span class=\"n\">nb_classes</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># Define CNN model\n</span><span class=\"k\">def</span> <span class=\"nf\">build_model</span><span class=\"p\">():</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"nc\">Sequential</span><span class=\"p\">([</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span><span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span> <span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">same</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>\n        <span class=\"c1\">#\n</span>        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">same</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>\n        <span class=\"c1\">#\n</span>        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">relu</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">BatchNormalization</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Flatten</span><span class=\"p\">(),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>\n        <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"nc\">Dense</span><span class=\"p\">(</span><span class=\"n\">nb_classes</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">softmax</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">compile</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">losses</span><span class=\"p\">.</span><span class=\"nc\">CategoricalCrossentropy</span><span class=\"p\">(</span><span class=\"n\">from_logits</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n                <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">adam</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">accuracy</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">model</span>\n\n<span class=\"c1\"># data \n</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"n\">mnist</span><span class=\"p\">.</span><span class=\"nf\">load_data</span><span class=\"p\">()</span>\n<span class=\"c1\"># input_shape : (data.shape[0],image_w, image_h, 1) float32   \n</span><span class=\"n\">X_train</span> <span class=\"o\">=</span> <span class=\"n\">X_train</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">image_w</span><span class=\"p\">,</span> <span class=\"n\">image_h</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">float32</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">X_test</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">image_w</span><span class=\"p\">,</span> <span class=\"n\">image_h</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">float32</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">X_train</span> <span class=\"o\">/=</span> <span class=\"mi\">255</span>\n<span class=\"n\">X_test</span> <span class=\"o\">/=</span> <span class=\"mi\">255</span>\n<span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">to_categorical</span><span class=\"p\">(</span><span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">to_categorical</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add start\n</span><span class=\"n\">datagen</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">preprocessing</span><span class=\"p\">.</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nc\">ImageDataGenerator</span><span class=\"p\">(</span>\n        <span class=\"c1\">#回転\n</span>    <span class=\"n\">rotation_range</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"c1\">#左右反転\n</span>    <span class=\"n\">horizontal_flip</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n    <span class=\"c1\">#上下平行移動\n</span>    <span class=\"n\">height_shift_range</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"c1\">#左右平行移動\n</span>    <span class=\"n\">width_shift_range</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"c1\">#ランダムにズーム\n</span>    <span class=\"n\">zoom_range</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"c1\">#チャンネルシフト\n</span>    <span class=\"n\">channel_shift_range</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"p\">)</span>\n<span class=\"n\">testgen</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">preprocessing</span><span class=\"p\">.</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nc\">ImageDataGenerator</span><span class=\"p\">()</span>\n\n<span class=\"n\">train_generator</span> <span class=\"o\">=</span> <span class=\"n\">datagen</span><span class=\"p\">.</span><span class=\"nf\">flow</span><span class=\"p\">(</span>\n        <span class=\"n\">X_train</span><span class=\"p\">,</span>\n        <span class=\"n\">y_train</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span>\n        <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n        <span class=\"p\">)</span>\n<span class=\"n\">test_generator</span> <span class=\"o\">=</span> <span class=\"n\">testgen</span><span class=\"p\">.</span><span class=\"nf\">flow</span><span class=\"p\">(</span>\n        <span class=\"n\">X_test</span><span class=\"p\">,</span>\n        <span class=\"n\">y_test</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">256</span>\n        <span class=\"p\">)</span>\n<span class=\"c1\"># add end\n</span>\n<span class=\"c1\"># 学習\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nf\">build_model</span><span class=\"p\">()</span>\n<span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">fit</span><span class=\"p\">(</span>\n    <span class=\"n\">train_generator</span><span class=\"p\">,</span>\n    <span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"n\">test_generator</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># 結果\n</span><span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">evaluate</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">score=</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">)</span>\n<span class=\"c1\"># graph\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">history</span><span class=\"p\">.</span><span class=\"n\">history</span><span class=\"p\">)</span>\n<span class=\"n\">result</span><span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">loss</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">val_loss</span><span class=\"sh\">'</span><span class=\"p\">]].</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">result</span><span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">accuracy</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">val_accuracy</span><span class=\"sh\">'</span><span class=\"p\">]].</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># model save\n</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">mnist1.keras</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n<p data-sourcepos=\"356:1-356:123\">100エポックの訓練後、accuracy=0.9431, val_accuray=0.9916 という、すばらしいモデルになりました。</p>\n<h2 data-sourcepos=\"358:1-358:20\">\n<span id=\"42-本番運用\" class=\"fragment\"></span><a href=\"#42-%E6%9C%AC%E7%95%AA%E9%81%8B%E7%94%A8\"><i class=\"fa fa-link\"></i></a>4.2. 本番運用</h2>\n<h3 data-sourcepos=\"359:1-359:32\">\n<span id=\"421-社員番号の抽出\" class=\"fragment\"></span><a href=\"#421-%E7%A4%BE%E5%93%A1%E7%95%AA%E5%8F%B7%E3%81%AE%E6%8A%BD%E5%87%BA\"><i class=\"fa fa-link\"></i></a>4.2.1. 社員番号の抽出</h3>\n<p data-sourcepos=\"360:1-364:74\">　社員番号を抽出するコードは以下のとおりです。<br>\n　OPEN-CVというライブラリを使用して、画像処理を行います。<br>\n　OPEN-CVの使い方は次のサイトを参考にしました。<br>\n[OpenCVのfindContours関数を使った画像の輪郭検出]<br>\n<a href=\"https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html</a></p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"366:1-455:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># kcdフォルダの画像から、検知結果　kcd_output.txt を作成\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tensorflow</span> <span class=\"k\">as</span> <span class=\"n\">tf</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"c1\">#import japanize_matplotlib\n</span><span class=\"kn\">import</span> <span class=\"n\">seaborn</span> <span class=\"k\">as</span> <span class=\"n\">sns</span> \n<span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getcwd</span><span class=\"p\">()</span>\n<span class=\"n\">mnist</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nf\">load_model</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">mnist1.keras</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n<span class=\"n\">in_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">myno</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">kcd</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">nlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">curDir</span><span class=\"p\">,</span><span class=\"n\">dirs</span><span class=\"p\">,</span><span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Data Input\n</span>        <span class=\"n\">r_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">,</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n        <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">r_file</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">IMREAD_GRAYSCALE</span><span class=\"p\">)</span>    <span class=\"c1\"># im w=841  h=429\n</span>        <span class=\"c1\"># モノクロ変換\n</span>        <span class=\"c1\"># if im.mode != \"RGB\":\n</span>        <span class=\"c1\">#     gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n</span>        <span class=\"c1\"># else:\n</span>        <span class=\"c1\">#     gray = im\n</span>        <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">im</span>\n        <span class=\"c1\"># ガウス分布に基づくブラー（ぼかし）\n</span>        <span class=\"n\">blur</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nc\">GaussianBlur</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ２値化（明るいところを白く、暗いところを黒く\n</span>        <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">adaptiveThreshold</span><span class=\"p\">(</span><span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 輪郭抽出 len(contours)=23\n</span>        <span class=\"n\">contours</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">findContours</span><span class=\"p\">(</span>\n            <span class=\"c1\"># RETR_EXTERNAL は　一番外側だけを検出するパラメータ\n</span>            <span class=\"c1\"># RETR_RETR_TREE 輪郭の階層情報をツリー形式で取得\n</span>            <span class=\"c1\"># RETR_LIST 白、黒の区別なく、すべての輪郭を同じ階層として取得\n</span>            <span class=\"c1\"># RETR_CCOMP 白の輪郭と黒の輪郭の情報だけを取得\n</span>            <span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">RETR_EXTERNAL</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">CHAIN_APPROX_SIMPLE</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"c1\"># CHAIN_APPROX_NONE 輪郭上のすべての座標を取得。\n</span>            <span class=\"c1\"># CHAIN_APPROX_SIMPLE 縦、横、斜め45°方向に完全に直線の部分の輪郭の点を省略。\n</span>            <span class=\"c1\"># CHAIN_APPROX_TC89_L1,CHAIN_APPROX_TC89_KCOS 輪郭の座標を直線で近似できる部分の輪郭の点を省略します\n</span>\n        <span class=\"c1\"># 抽出した座標を左上から右下へ並べ替える\n</span>        <span class=\"n\">rects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">im_w</span> <span class=\"o\">=</span> <span class=\"n\">im</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>          <span class=\"c1\">#im.shape (429, 841, 3) -&gt; im_w = 841\n</span>        <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">contours</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">boundingRect</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span> <span class=\"ow\">or</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"k\">continue</span>   \n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">im_w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">10</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">y2</span> <span class=\"o\">*</span> <span class=\"n\">im_w</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n            <span class=\"n\">rects</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n        <span class=\"n\">rects</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">rects</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        <span class=\"c1\">#このソートが問題点だった。 xの昇準、yの昇順にならべないと、ラベルと齟齬する。\n</span>        <span class=\"c1\"># 抽出した領域の画像データ\n</span>        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># for i, r in enumerate(rects): enumerateだと、index順に出力されてしまうので、使わない\n</span>        <span class=\"c1\">#     index, x, y, w, h = r\n</span>        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">rects</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">gray</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">255</span> <span class=\"o\">-</span> <span class=\"n\">num</span>   <span class=\"c1\"># ネガポジ反転\n</span>            <span class=\"c1\"># 正方形の中に数字を描画\n</span>            <span class=\"n\">ww</span> <span class=\"o\">=</span> <span class=\"nf\">round</span><span class=\"p\">((</span><span class=\"n\">w</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">1.80</span><span class=\"p\">)</span> \n            <span class=\"n\">spc</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">((</span><span class=\"n\">ww</span><span class=\"p\">,</span><span class=\"n\">ww</span><span class=\"p\">))</span>\n            <span class=\"n\">wy</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ww</span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n            <span class=\"n\">wx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ww</span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n            <span class=\"n\">spc</span><span class=\"p\">[</span><span class=\"n\">wy</span><span class=\"p\">:</span><span class=\"n\">wy</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">wx</span><span class=\"p\">:</span><span class=\"n\">wx</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">resize</span><span class=\"p\">(</span><span class=\"n\">spc</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">))</span>  <span class=\"c1\"># MNISTのサイズ 28x28にリサイズ\n</span>            <span class=\"c1\">#cv2.imwrite(str(i)+\"-num.png\", num) # 切り出した様子を保存\n</span>            <span class=\"c1\">#i += 1\n</span>            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"mi\">28</span><span class=\"p\">)</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">float32</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">255</span>\n            <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"n\">nlist</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.</span><span class=\"sh\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">mnist</span><span class=\"p\">.</span><span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">))])</span>\n    \n<span class=\"n\">nlist_sorted</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">nlist</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">o_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">kcd_output.txt</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">o_file</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">o</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">ele</span> <span class=\"ow\">in</span> <span class=\"n\">nlist_sorted</span><span class=\"p\">:</span>\n        <span class=\"n\">st1</span> <span class=\"o\">=</span> <span class=\"n\">ele</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">,</span><span class=\"sh\">\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">ele</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])):</span>\n            <span class=\"n\">st2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">(</span><span class=\"n\">ele</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"n\">st1</span> <span class=\"o\">=</span> <span class=\"n\">st1</span> <span class=\"o\">+</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">st2</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">st1</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">o</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"456:1-456:32\">\n<span id=\"422-個人番号の抽出\" class=\"fragment\"></span><a href=\"#422-%E5%80%8B%E4%BA%BA%E7%95%AA%E5%8F%B7%E3%81%AE%E6%8A%BD%E5%87%BA\"><i class=\"fa fa-link\"></i></a>4.2.2. 個人番号の抽出</h3>\n<p data-sourcepos=\"457:1-457:69\">　個人番号を抽出するコードは以下のとおりです。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"458:1-554:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># mnoフォルダの画像から、検知結果　mno_output.txt を作成\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tensorflow</span> <span class=\"k\">as</span> <span class=\"n\">tf</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"c1\">#import japanize_matplotlib\n</span><span class=\"kn\">import</span> <span class=\"n\">seaborn</span> <span class=\"k\">as</span> <span class=\"n\">sns</span> \n<span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getcwd</span><span class=\"p\">()</span>\n<span class=\"n\">mnist</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">keras</span><span class=\"p\">.</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nf\">load_model</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">mnist1.keras</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n<span class=\"n\">in_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">myno</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">mno</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#print(in_path)\n</span><span class=\"n\">nlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">curDir</span><span class=\"p\">,</span><span class=\"n\">dirs</span><span class=\"p\">,</span><span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Data Input\n</span>        <span class=\"n\">r_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">in_path</span><span class=\"p\">,</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n        <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">r_file</span><span class=\"p\">)</span>    <span class=\"c1\"># im w=841  h=429\n</span>        <span class=\"c1\">#im = cv2.imread(r_file, cv2.IMREAD_GRAYSCALE)    # im w=841  h=429\n</span>        <span class=\"c1\">#print(im)\n</span>        <span class=\"c1\"># モノクロ変換\n</span>        <span class=\"c1\"># if im.mode != \"RGB\":\n</span>        <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n        <span class=\"c1\"># else:\n</span>        <span class=\"c1\">#     gray = im\n</span>        <span class=\"c1\"># gray = im\n</span>        <span class=\"c1\"># ガウス分布に基づくブラー（ぼかし）\n</span>        <span class=\"n\">blur</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nc\">GaussianBlur</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ２値化（明るいところを白く、暗いところを黒く\n</span>        <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">adaptiveThreshold</span><span class=\"p\">(</span><span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 輪郭抽出 len(contours)=23\n</span>        <span class=\"n\">contours</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">findContours</span><span class=\"p\">(</span>\n            <span class=\"c1\">#thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[0]\n</span>            <span class=\"c1\"># RETR_EXTERNAL は　一番外側だけを検出するパラメータ\n</span>            <span class=\"c1\"># RETR_TREE 輪郭の階層情報をツリー形式で取得\n</span>            <span class=\"c1\"># RETR_LIST 白、黒の区別なく、すべての輪郭を同じ階層として取得\n</span>            <span class=\"c1\"># RETR_CCOMP 白の輪郭と黒の輪郭の情報だけを取得\n</span>            <span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">RETR_EXTERNAL</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">CHAIN_APPROX_SIMPLE</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"c1\"># CHAIN_APPROX_NONE 輪郭上のすべての座標を取得。\n</span>            <span class=\"c1\"># CHAIN_APPROX_SIMPLE 縦、横、斜め45°方向に完全に直線の部分の輪郭の点を省略。\n</span>            <span class=\"c1\"># CHAIN_APPROX_TC89_L1,CHAIN_APPROX_TC89_KCOS 輪郭の座標を直線で近似できる部分の輪郭の点を省略します\n</span>\n        <span class=\"c1\"># 抽出した座標を左上から右下へ並べ替える\n</span>        <span class=\"n\">rects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">im_w</span> <span class=\"o\">=</span> <span class=\"n\">im</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>          <span class=\"c1\">#im.shape (429, 841, 3) -&gt; im_w = 841\n</span>        <span class=\"c1\"># for i, cnt in enumerate(contours):\n</span>        <span class=\"c1\">#     x, y, w, h =cv2.boundingRect(cnt)\n</span>        <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">contours</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">boundingRect</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"ow\">or</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"k\">continue</span>   <span class=\"c1\"># 仮に5から変更\n</span>            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">im_w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">&gt;</span> <span class=\"mi\">150</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">10</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">y2</span> <span class=\"o\">*</span> <span class=\"n\">im_w</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n            <span class=\"n\">rects</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n        <span class=\"n\">rects</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">rects</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        <span class=\"c1\">#このソートが問題点だった。 xの昇準、yの昇順にならべないと、ラベルと齟齬する。\n</span>        <span class=\"c1\"># 抽出した領域の画像データ\n</span>        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># for i, r in enumerate(rects): enumerateだと、index順に出力されてしまうので、使わない\n</span>        <span class=\"c1\">#     index, x, y, w, h = r\n</span>        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">rects</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">gray</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">255</span> <span class=\"o\">-</span> <span class=\"n\">num</span>   <span class=\"c1\"># ネガポジ反転\n</span>            <span class=\"c1\"># 正方形の中に数字を描画\n</span>            <span class=\"n\">ww</span> <span class=\"o\">=</span> <span class=\"nf\">round</span><span class=\"p\">((</span><span class=\"n\">w</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">1.80</span><span class=\"p\">)</span> \n            <span class=\"n\">spc</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">((</span><span class=\"n\">ww</span><span class=\"p\">,</span><span class=\"n\">ww</span><span class=\"p\">))</span>\n            <span class=\"n\">wy</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ww</span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n            <span class=\"n\">wx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ww</span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">2</span>\n            <span class=\"n\">spc</span><span class=\"p\">[</span><span class=\"n\">wy</span><span class=\"p\">:</span><span class=\"n\">wy</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">wx</span><span class=\"p\">:</span><span class=\"n\">wx</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">resize</span><span class=\"p\">(</span><span class=\"n\">spc</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">))</span>  <span class=\"c1\"># MNISTのサイズ 28x28にリサイズ\n</span>            <span class=\"c1\">#cv2.imwrite(str(i)+\"-num.png\", num) # 切り出した様子を保存\n</span>            <span class=\"c1\">#i += 1\n</span>            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"mi\">28</span><span class=\"p\">)</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">float32</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">255</span>\n            <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"n\">nlist</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.</span><span class=\"sh\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">mnist</span><span class=\"p\">.</span><span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">))])</span>\n    \n<span class=\"n\">nlist_sorted</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">nlist</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">o_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">mno_output.txt</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">o_file</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">o</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">ele</span> <span class=\"ow\">in</span> <span class=\"n\">nlist_sorted</span><span class=\"p\">:</span>\n        <span class=\"n\">st1</span> <span class=\"o\">=</span> <span class=\"n\">ele</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">,</span><span class=\"sh\">\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">ele</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])):</span>\n            <span class=\"n\">st2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">(</span><span class=\"n\">ele</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"n\">st1</span> <span class=\"o\">=</span> <span class=\"n\">st1</span> <span class=\"o\">+</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">st2</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">st1</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"555:1-555:13\">\n<span id=\"5結果\" class=\"fragment\"></span><a href=\"#5%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>5.　結果</h1>\n<p data-sourcepos=\"556:1-556:41\">　サンプル画像 20250227192457-0001</p>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d4a3758ad222b194cf15cea28f3a56a7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d4a3758ad222b194cf15cea28f3a56a7\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=75926fad6955df13c1a08a04e13c8351 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff\" loading=\"lazy\"></a>\n<p data-sourcepos=\"562:1-562:21\">につきまして、</p>\n<h2 data-sourcepos=\"564:1-564:20\">\n<span id=\"1kcd_outputtxt\" class=\"fragment\"></span><a href=\"#1kcd_outputtxt\"><i class=\"fa fa-link\"></i></a>(1)kcd_output.txt</h2>\n<p data-sourcepos=\"566:1-566:31\"><strong>20250227192457-0001,0408317</strong></p>\n<p data-sourcepos=\"568:1-569:93\">という結果になっていました。<br>\nどういうふうに認識しているかを次のコードで書き出ししてみます。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"571:1-605:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># OPEN-CVを使った、数値画像の認識の調査\n</span><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"c1\">#import japanize_matplotlib\n</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getcwd</span><span class=\"p\">()</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"sh\">\"</span><span class=\"s\">kcd</span><span class=\"sh\">\"</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">20250227192457-0001.bmp</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># モノクロ変換\n</span><span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n<span class=\"c1\"># ガウス分布に基づくブラー（ぼかし）\n</span><span class=\"n\">blur</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nc\">GaussianBlur</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># ２値化（明るいところを白く、暗いところを黒く\n</span><span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">adaptiveThreshold</span><span class=\"p\">(</span><span class=\"n\">blur</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 輪郭抽出\n</span><span class=\"n\">contours</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">findContours</span><span class=\"p\">(</span>\n    <span class=\"c1\">#thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[0]\n</span>    <span class=\"c1\"># RETR_EXTERNAL は　一番外側だけを検出するパラメータ\n</span>    <span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">RETR_EXTERNAL</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">CHAIN_APPROX_SIMPLE</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">im_w</span> <span class=\"o\">=</span> <span class=\"n\">im</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>          \n<span class=\"k\">for</span> <span class=\"n\">cnt</span> <span class=\"ow\">in</span> <span class=\"n\">contours</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">boundingRect</span><span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span> <span class=\"ow\">or</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"k\">continue</span>   \n    <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">im_w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n    <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">rectangle</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imwrite</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">numbers-cnt.png</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a1f1de5a905e06e256e8bcc08cc77962\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a1f1de5a905e06e256e8bcc08cc77962\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2f758bd94013e884624be90009c8476c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png\" loading=\"lazy\"></a>\n<p data-sourcepos=\"611:1-611:152\">３文字目の「6」を「0」と誤認識するのは仕方がないけど、最後の「7」を「1」「7」とご認識しているのは痛い。</p>\n<p data-sourcepos=\"613:1-614:72\">ここはロジックの次の部分が甘いことによります。<br>\nここは認識しても無視するサイズを指定しています。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"615:1-618:3\"><div class=\"highlight\"><pre><code>    <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span> <span class=\"ow\">or</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"k\">continue</span>   \n    <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">im_w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n</code></pre></div></div>\n<p data-sourcepos=\"619:1-619:152\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F7aa704eb-7306-44b8-8fa1-94e511e43847.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8f5e2d81f8a77485e346c7e32925fd59\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F7aa704eb-7306-44b8-8fa1-94e511e43847.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8f5e2d81f8a77485e346c7e32925fd59\" alt=\"Screenshot from 2025-03-02 22-03-45.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F7aa704eb-7306-44b8-8fa1-94e511e43847.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=616e39791e8fa2f049eaa21c7857ef1a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/7aa704eb-7306-44b8-8fa1-94e511e43847.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"621:1-621:54\">７の一画目の幅は８ピクセルあります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"622:1-625:3\"><div class=\"highlight\"><pre><code>    <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span> <span class=\"ow\">or</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"k\">continue</span>   \n    <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">im_w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n</code></pre></div></div>\n<p data-sourcepos=\"626:1-626:48\">ロジックをこのように変更すると、</p>\n\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F745de871-febc-4b3d-b3e2-7fb6fc1a934b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a2332b29c9ed62aa00dc8bee41172e4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F745de871-febc-4b3d-b3e2-7fb6fc1a934b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0a2332b29c9ed62aa00dc8bee41172e4\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F745de871-febc-4b3d-b3e2-7fb6fc1a934b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=beaa004dc8e840eb98c3be23ba755d97 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/745de871-febc-4b3d-b3e2-7fb6fc1a934b.png\" loading=\"lazy\"></a>\n<p data-sourcepos=\"632:1-633:78\">というふうに、7の一角目を無視してくれます。<br>\nこの修正を加えてもう一度　kcd_output.txt を再作成すると、</p>\n<p data-sourcepos=\"635:1-635:30\"><strong>20250227192457-0001,040837</strong></p>\n<p data-sourcepos=\"637:1-637:27\">と修正されました。</p>\n<h2 data-sourcepos=\"639:1-639:20\">\n<span id=\"2mno_outputtxt\" class=\"fragment\"></span><a href=\"#2mno_outputtxt\"><i class=\"fa fa-link\"></i></a>(2)mno_output.txt</h2>\n<p data-sourcepos=\"640:1-641:120\">(1)と同様に、認識しないサイズを調整することで、次の水準にはできました。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F9825e196-5a0f-4a44-b0f1-b2416ff1abee.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c0b34298df6d00149afdd6166208d5f4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F9825e196-5a0f-4a44-b0f1-b2416ff1abee.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c0b34298df6d00149afdd6166208d5f4\" alt=\"myn.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3937616%2F9825e196-5a0f-4a44-b0f1-b2416ff1abee.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=80eadb9343db47d078ee402ec4ab2120 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/9825e196-5a0f-4a44-b0f1-b2416ff1abee.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"643:1-643:103\">２文字目の「8」を認識できていません！！大きさは十分あるのに何故？？？</p>\n<p data-sourcepos=\"645:1-645:142\">答えは、「8」の書き終わりが、枠線に接触してしまいとても大きなオブジェクトと認識されたからです。</p>\n<h2 data-sourcepos=\"647:1-647:24\">\n<span id=\"3わかったこと\" class=\"fragment\"></span><a href=\"#3%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>(3)わかったこと</h2>\n<p data-sourcepos=\"649:1-649:66\">とりあえず試作機を作成することはできました。</p>\n<ul data-sourcepos=\"650:1-653:0\">\n<li data-sourcepos=\"650:1-650:89\">数字を高確率で判別することができるCNNを自作することができる</li>\n<li data-sourcepos=\"651:1-651:89\">認識するサイズが重要で、職人芸でサイズ調整を行う必要がある</li>\n<li data-sourcepos=\"652:1-653:0\">枠内に文字を書くケースでの認識は至難の技</li>\n</ul>\n<p data-sourcepos=\"654:1-655:69\">尚、今回は数字がターゲットでしたが、漢字認識は桁違いに難解なようです。<br>\n（なぜなら学習データの確保が難しいからです。）</p>\n<h1 data-sourcepos=\"657:1-657:29\">\n<span id=\"６参考にした情報\" class=\"fragment\"></span><a href=\"#%EF%BC%96%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>６．参考にした情報</h1>\n<p data-sourcepos=\"658:1-660:54\">本当に世の中にはすごい方がおられまして、その方々が公開していただいている情報は宝の山です。<br>\n今回もそれを参考にさせていただいております。<br>\n最大の謝辞を述べさせていただきます。</p>\n<p data-sourcepos=\"662:1-665:34\"><strong>[CNNで画像OCRを作成する]</strong><br>\n「増補改訂Pythonによるスクレイピング＆機械学習　開発テクニック」<br>\n　クジラ飛行机　著<br>\n　ソシム株式会社　発行</p>\n<p data-sourcepos=\"668:1-669:68\"><strong>[CNNモデル]</strong><br>\n<a href=\"https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist</a></p>\n<p data-sourcepos=\"671:1-672:74\"><strong>[OpenCVのfindContours関数を使った画像の輪郭検出]</strong><br>\n<a href=\"https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html</a></p>\n",
        "body": "# 1.　はじめに\n　この記事では、さまざまな制約下にもめげず AI-OCR を自作した過程を記述しています。生成AIで何でも可能なこのご時世にそんなモノ好きはいないでしょうが、もし、仮にAI-OCRを自作される機会がありましたら、参考となりましたら幸いです。\n\n# 2.　背景\n## 2.1.　動機\n　教育訓練講座（SAMURAI ENGINEER　AIデータサイエンスコース）を半年間受講し、機械学習の基礎を学びました。\n　得た知識を使って、是非実現したいことがありました。それがAI-OCRの作成です。\n　私は現在、とある企業の人事・給与事務の統括をしており、部下の人員削減の一方、業務量の増大に日々頭を抱えています。その私が今、一番恐れているのが、４月に新入社員が入ってくることによる（一過性ですが）業務量の増大です。\n　人を雇うと、\n* 人事システムに人事基礎データ（氏名、住所、生年月日など）登録\n* マイナンバーを収集し、人事システムへ登録\n* 社員証の発行（外注ではなく、私の部署でカード発行機で発行している）\n* 雇用保険加入手続き\n* 厚生年金加入手続き\n* 健康保険加入手続き\n\nといった事務を２週間くらいでやり遂げなければならず、結構負担です。\n\n　それに加え、\n* 社内システムの統制が厳しく、社外へのネットワークは遮断されている\n* 業務用パソコンへの新たなソフトウエア導入はご法度\n* 社内業務アプリ作成・メンテを委託していたグループ会社との業務委託契約が解消され、社内に業務アプリを作成する部署がなくなった\n\n　そういった事情で、未だにマイナンバーなどの収集は「紙」です。\n　収集した紙を部下を総動員して（もちろん管理職の私も含め）紙からデータ起こしをしてシステムに登録しています。\n\n　今年は新入300名。多い。疲弊している部下に仕事の上乗せをしたら暴動が起きるかもしれない。怖い。。。\n こりゃ、自前で　AI-OCR作るっきゃないでしょ！\n\n## 2.2. 開発環境\n**ハード（業務用PC）**\n\n|項目|内容|\n|:--|:-|\n|OS|windows10|\n|CPU|core i5-8365u |\n|GPU|インテルHD Graphics|\n\n**ソフト**\n|名称|バージョン|\n|:--|--:|\n|Python|3.11|\n\n※Pythonは会社業務用にプレインストールされているもの\n\n**ライブラリ**\n|名称|バージョン|\n|:--|--:|\n|numpy|1.24.3|\n|Tensorflow|2.16.1|\n|pandas|1.5.3|\n|Matplotlib|3.7.1|\n|opencv-python|4.11.0.86|\n|Pilow|9.4.0|\n\n　尚、ライブラリは pypi からダウンロードしてきたものをローカルのpylibというフォルダに置いておき、pipする際に、\n```\npip install --no-index --find-links=pylib [導入するライブラリ名]\n```\nとします。\n\n## 2.3. 学習データ\n　MNIST手書き数字データセットを使用します。\n　6万件の学習データと、1万件のテストデータがあり、AIモデルを鍛えるのにはうってつけです。\n　さらに、認識率をあげるために、kerasのImageDatageneratorも使い、6万件の学習データにバリエーションを与えたものを学習させています。\n``` Python\n# data \n(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()\n# input_shape : (data.shape[0],image_w, image_h, 1) float32   \nX_train = X_train.reshape(X_train.shape[0], image_w, image_h, 1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], image_w, image_h, 1).astype('float32')\n\nX_train /= 255\nX_test /= 255\ny_train = tf.keras.utils.to_categorical(y_train, 10)\ny_test = tf.keras.utils.to_categorical(y_test, 10)\n\n# add start\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(\n        #回転\n    rotation_range = 5,\n    #左右反転\n    horizontal_flip = False,\n    #上下平行移動\n    height_shift_range = 0.4,\n    #左右平行移動\n    width_shift_range = 0.4,\n    #ランダムにズーム\n    zoom_range = 0.4,\n    #チャンネルシフト\n    channel_shift_range = 0\n    )\ntestgen = tf.keras.preprocessing.image.ImageDataGenerator()\n\ntrain_generator = datagen.flow(\n        X_train,\n        y_train,\n        batch_size=256,\n        seed=0\n        )\ntest_generator = testgen.flow(\n        X_test,\n        y_test,\n        batch_size=256\n        )\n\n```\n## 2.4. 学習モデル\n　自分で試行錯誤してモデルを定義してみましたが、学習してもaccuracy（正答率）が0.89どまりのものしか作れませんでした。（本当はここで0.95などを叩き出すものを提示できたらカッコ良かったのですが、実力が足りませんでした。ゴメンなさい。）\n　そこで、先人の知恵をお借りすることとしました。\n　25万件のデータで鍛え上げ、accuracy=099757を叩き出したとのNotebookをkaggleで見つけました。（https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist)\n　恐れながら、そのモデルを真似させて頂きます。\n``` Python\ndef build_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(28, 28 , 1)),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(32, (5, 5), strides=2, padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.4),\n        #\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(64, (5, 5), strides=2, padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.4),\n        #\n        tf.keras.layers.Conv2D(128, (4, 4), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dropout(0.4),\n        tf.keras.layers.Dense(nb_classes, activation='softmax')\n    ])\n```\n# 3.　準備\n　実際に読ませる帳票は、A4サイズの次の帳票です。\n ![20250227192457-0005.tif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/4ca5a019-b3b8-4f5c-9850-c0f360e04d48.tiff)\n\n　このままOCRに読ませて、成果物を得ることができたらカッコいいのですが、初心者らしく手堅く進めます。\n　具体的には、この帳票から「社員コード」と「個人番号」を読み取りたいのですが、文字の大きさが「社員コード」と「個人番号」では異なる上に、「個人番号」には格子までついています。いかにも調整が難しそうです。\n　そこで２ファイルに分け、それぞれをモデルに掛けることにします。\n　なお、ここの技法（切り出して、グレースケール保存する）については、\n \n（１）社員番号を切り出すコード\n<!--\n![社員コード切り出し.tif](https://qiita-image-store.s3.ap-northeast- 1.amazonaws.com/0/3937616/63565afe-cbc4-4524-a95c-3be334ed11bd.tiff)\n-->\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/63565afe-cbc4-4524-a95c-3be334ed11bd.tiff\" width=50%>\n\n``` python\nimport numpy as np\nimport os\nfrom PIL import Image\n\npath = os.getcwd()\n#オリジナル　スキャンデータの保管場所\nin_path = os.path.join(path,\"AIocr\",\"myno\",\"ori\")\n#加工後のデータの保管場所\nout_path = os.path.join(path,\"AIocr\",\"myno\",\"kcd\")\n#社員コードが写っている部分だけ抽出\n#  (1850, 870    ) (1850+500, 870    )\n#  (1850, 870+150) (1850+500, 870+150)\ny = 870\nh = 150\nx = 1850\nw = 500\nfor curDir,dirs,files in os.walk(in_path):\n    for file in files:\n        img = Image.open(os.path.join(in_path,file))\n        # グレイスケール変換\n        if img.mode != \"RGB\":\n            img = img.convert(\"RGB\")\n        rgb = np.array(img,dtype=\"float32\")\n        # 切り出し枠\n        rgb = rgb[y:y+h,x:x+w]\n        rgbL = pow(rgb/255.0,2.2)\n        r,g,b = rgbL[:,:,0],rgbL[:,:,1],rgbL[:,:,2]\n        grayL = 0.299 * r + 0.587 * g + 0.114 * b \n        gray = pow(grayL,1.0/2.2)*255\n        img_gray = Image.fromarray(gray.astype(\"uint8\"))\n        file_name = file.split(\".\")[0]\n        img_gray.save(os.path.join(out_path,file_name + \".bmp\"),\"BMP\",quality=100)\n```\n【切り出した画像】\n<!-- \n![sample1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/a91b5b39-1d65-4a54-a619-ee07d894f98e.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/a91b5b39-1d65-4a54-a619-ee07d894f98e.png\" width=50%>\n\n※なお、保存形式としては、Bitmapを採用しました。\n　Bitmapにすると、MS-paintで開いて、該当する部分が何pixelか数えることができるからです。\n \n（２）個人番号を切り出すコード\n<!--\n![mno切り出し.tif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff\" width=50%>\n\n\n```python\nimport numpy as np\nimport os\nfrom PIL import Image\n# 個人番号届出書のマイナ部分のみ切り出し\npath = os.getcwd()\n# オリジナルスキャンデータの保存場所\nin_path = os.path.join(path,\"AIocr\",\"myno\",\"ori\")\n# 加工後のデータの保管場所\nout_path = os.path.join(path,\"AIocr\",\"myno\",\"mno\")\n#社員CDが写っている部分だけ抽出\n#  (300, 1375    ) (300+900, 1375    )\n#  (300, 1375+180) (300+900, 1375+180)\ny = 1375\nh = 180\nx = 300\nw = 900\nfor curDir,dirs,files in os.walk(in_path):\n    for file in files:\n        img = Image.open(os.path.join(in_path,file))\n        # グレイスケール変換\n        if img.mode != \"RGB\":\n            img = img.convert(\"RGB\")\n        rgb = np.array(img,dtype=\"float32\")\n        # 枠\n        rgb = rgb[y:y+h,x:x+w]\n        rgbL = pow(rgb/255.0,2.2)\n        r,g,b = rgbL[:,:,0],rgbL[:,:,1],rgbL[:,:,2]\n        grayL = 0.299 * r + 0.587 * g + 0.114 * b \n        gray = pow(grayL,1.0/2.2)*255\n        img_gray = Image.fromarray(gray.astype(\"uint8\"))\n        #img_gray = img_gray.resize((img_gray.width // 6, img_gray.height // 6))\n        #img_gray.save(os.path.join(out_path,file))\n        file_name = file.split(\".\")[0]\n        img_gray.save(os.path.join(out_path,file_name + \".bmp\"),\"BMP\",quality=100)\n```\n\n【切り出した画像」\n<!--\n![sample1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/1e416c8a-4bc5-48ef-922d-e653cd906a47.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/1e416c8a-4bc5-48ef-922d-e653cd906a47.png\" width=50%>\n\n# 4.　制作\n## 4.1. モデルの学習\n　モデル構築と、学習のコード全体です。\n``` python \n#  python 3.11 および　tensorflow 2.16 対応\n#  注意 tensorflow2.15以前では、kerasの扱いが違うので、以下のコードではエラーになる。\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport japanize_matplotlib\nimport seaborn as sns\n%matplotlib inline\n\nimage_w = 28\nimage_h = 28\nnb_classes = 10\n\n# Define CNN model\ndef build_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(28, 28 , 1)),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(32, (5, 5), strides=2, padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.4),\n        #\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Conv2D(64, (5, 5), strides=2, padding='same', activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.4),\n        #\n        tf.keras.layers.Conv2D(128, (4, 4), activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dropout(0.4),\n        tf.keras.layers.Dense(nb_classes, activation='softmax')\n    ])\n\n    model.compile(loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n                optimizer='adam',\n                metrics=['accuracy'])\n    return model\n\n# data \n(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()\n# input_shape : (data.shape[0],image_w, image_h, 1) float32   \nX_train = X_train.reshape(X_train.shape[0], image_w, image_h, 1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], image_w, image_h, 1).astype('float32')\n\nX_train /= 255\nX_test /= 255\ny_train = tf.keras.utils.to_categorical(y_train, 10)\ny_test = tf.keras.utils.to_categorical(y_test, 10)\n\n# add start\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(\n        #回転\n    rotation_range = 5,\n    #左右反転\n    horizontal_flip = False,\n    #上下平行移動\n    height_shift_range = 0.4,\n    #左右平行移動\n    width_shift_range = 0.4,\n    #ランダムにズーム\n    zoom_range = 0.4,\n    #チャンネルシフト\n    channel_shift_range = 0\n    )\ntestgen = tf.keras.preprocessing.image.ImageDataGenerator()\n\ntrain_generator = datagen.flow(\n        X_train,\n        y_train,\n        batch_size=256,\n        seed=0\n        )\ntest_generator = testgen.flow(\n        X_test,\n        y_test,\n        batch_size=256\n        )\n# add end\n\n# 学習\nmodel = build_model()\nhistory = model.fit(\n    train_generator,\n    validation_data=test_generator,\n    epochs=100\n)\n# 結果\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('score=', score)\n# graph\nresult = pd.DataFrame(history.history)\nresult[['loss','val_loss']].plot(ylim=[0, 2])\nresult[['accuracy', 'val_accuracy']].plot(ylim=[0, 1])\n# model save\nmodel.save('mnist1.keras')\n\n```\n100エポックの訓練後、accuracy=0.9431, val_accuray=0.9916 という、すばらしいモデルになりました。\n\n## 4.2. 本番運用\n### 4.2.1. 社員番号の抽出\n　社員番号を抽出するコードは以下のとおりです。\n　OPEN-CVというライブラリを使用して、画像処理を行います。\n　OPEN-CVの使い方は次のサイトを参考にしました。\n [OpenCVのfindContours関数を使った画像の輪郭検出]\n https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html\n \n``` python\n# kcdフォルダの画像から、検知結果　kcd_output.txt を作成\nimport os\nimport sys\nimport math\n\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#import japanize_matplotlib\nimport seaborn as sns \nimport cv2\n\npath = os.getcwd()\nmnist = tf.keras.models.load_model(os.path.join(path,\"mnist1.keras\"))\nin_path = os.path.join(path,\"myno\",\"kcd\")\n\nnlist = []\nfor curDir,dirs,files in os.walk(in_path):\n    for file in files:\n        # Data Input\n        r_file = os.path.join(in_path,file)\n        im = cv2.imread(r_file, cv2.IMREAD_GRAYSCALE)    # im w=841  h=429\n        # モノクロ変換\n        # if im.mode != \"RGB\":\n        #     gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n        # else:\n        #     gray = im\n        gray = im\n        # ガウス分布に基づくブラー（ぼかし）\n        blur = cv2.GaussianBlur(gray, (5, 5), 0)\n        # ２値化（明るいところを白く、暗いところを黒く\n        thresh = cv2.adaptiveThreshold(blur, 255, 1, 1, 11, 2)\n        # 輪郭抽出 len(contours)=23\n        contours = cv2.findContours(\n            # RETR_EXTERNAL は　一番外側だけを検出するパラメータ\n            # RETR_RETR_TREE 輪郭の階層情報をツリー形式で取得\n            # RETR_LIST 白、黒の区別なく、すべての輪郭を同じ階層として取得\n            # RETR_CCOMP 白の輪郭と黒の輪郭の情報だけを取得\n            thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]\n            # CHAIN_APPROX_NONE 輪郭上のすべての座標を取得。\n            # CHAIN_APPROX_SIMPLE 縦、横、斜め45°方向に完全に直線の部分の輪郭の点を省略。\n            # CHAIN_APPROX_TC89_L1,CHAIN_APPROX_TC89_KCOS 輪郭の座標を直線で近似できる部分の輪郭の点を省略します\n\n        # 抽出した座標を左上から右下へ並べ替える\n        rects = []\n        im_w = im.shape[1]          #im.shape (429, 841, 3) -> im_w = 841\n        for c in contours:\n            x, y, w, h = cv2.boundingRect(c)\n            if w < 7 or h < 10: continue   \n            if w > im_w / 2: continue\n            y2 = round(y/10)*10\n            index = y2 * im_w + x\n            rects.append((x, y, w, h))\n        rects = sorted(rects, key=lambda x:(x[0],x[1]))\n        #このソートが問題点だった。 xの昇準、yの昇順にならべないと、ラベルと齟齬する。\n        # 抽出した領域の画像データ\n        X = []\n        # for i, r in enumerate(rects): enumerateだと、index順に出力されてしまうので、使わない\n        #     index, x, y, w, h = r\n        i = 1\n        for r in rects:\n            x, y, w, h = r[0],r[1],r[2],r[3]\n            num = gray[y:y+h, x:x+w]\n            num = 255 - num   # ネガポジ反転\n            # 正方形の中に数字を描画\n            ww = round((w if w > h else h) * 1.80) \n            spc = np.zeros((ww,ww))\n            wy = (ww-h)//2\n            wx = (ww-w)//2\n            spc[wy:wy+h, wx:wx+w] = num\n            num = cv2.resize(spc, (28, 28))  # MNISTのサイズ 28x28にリサイズ\n            #cv2.imwrite(str(i)+\"-num.png\", num) # 切り出した様子を保存\n            #i += 1\n            num = num.reshape(28,28)\n            num = num.astype(\"float32\") / 255\n            X.append(num)\n        nlist.append([file.split(\".\")[0], mnist.predict(np.array(X))])\n    \nnlist_sorted = sorted(nlist,key=lambda x:x[0])\no_file = os.path.join(path,\"kcd_output.txt\")\nwith open(o_file, 'w') as o:\n    for ele in nlist_sorted:\n        st1 = ele[0] + \",\"\n        for i in range(len(ele[1])):\n            st2 = np.argmax(ele[1][i])\n            st1 = st1 + str(st2)\n        print(st1, end=\"\\n\", file=o)\n```\n### 4.2.2. 個人番号の抽出\n　個人番号を抽出するコードは以下のとおりです。\n``` python\n# mnoフォルダの画像から、検知結果　mno_output.txt を作成\nimport os\nimport sys\nimport math\n\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#import japanize_matplotlib\nimport seaborn as sns \nimport cv2\n\npath = os.getcwd()\nmnist = tf.keras.models.load_model(os.path.join(path,\"mnist1.keras\"))\nin_path = os.path.join(path,\"myno\",\"mno\")\n#print(in_path)\nnlist = []\nfor curDir,dirs,files in os.walk(in_path):\n    for file in files:\n        # Data Input\n        r_file = os.path.join(in_path,file)\n        im = cv2.imread(r_file)    # im w=841  h=429\n        #im = cv2.imread(r_file, cv2.IMREAD_GRAYSCALE)    # im w=841  h=429\n        #print(im)\n        # モノクロ変換\n        # if im.mode != \"RGB\":\n        gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n        # else:\n        #     gray = im\n        # gray = im\n        # ガウス分布に基づくブラー（ぼかし）\n        blur = cv2.GaussianBlur(gray, (5, 5), 0)\n        # ２値化（明るいところを白く、暗いところを黒く\n        thresh = cv2.adaptiveThreshold(blur, 255, 1, 1, 11, 2)\n        # 輪郭抽出 len(contours)=23\n        contours = cv2.findContours(\n            #thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[0]\n            # RETR_EXTERNAL は　一番外側だけを検出するパラメータ\n            # RETR_TREE 輪郭の階層情報をツリー形式で取得\n            # RETR_LIST 白、黒の区別なく、すべての輪郭を同じ階層として取得\n            # RETR_CCOMP 白の輪郭と黒の輪郭の情報だけを取得\n            thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]\n            # CHAIN_APPROX_NONE 輪郭上のすべての座標を取得。\n            # CHAIN_APPROX_SIMPLE 縦、横、斜め45°方向に完全に直線の部分の輪郭の点を省略。\n            # CHAIN_APPROX_TC89_L1,CHAIN_APPROX_TC89_KCOS 輪郭の座標を直線で近似できる部分の輪郭の点を省略します\n\n        # 抽出した座標を左上から右下へ並べ替える\n        rects = []\n        im_w = im.shape[1]          #im.shape (429, 841, 3) -> im_w = 841\n        # for i, cnt in enumerate(contours):\n        #     x, y, w, h =cv2.boundingRect(cnt)\n        for c in contours:\n            x, y, w, h = cv2.boundingRect(c)\n            if w < 5 or h < 10: continue   # 仮に5から変更\n            if w > im_w / 2: continue\n            if h > 150: continue\n            y2 = round(y/10)*10\n            index = y2 * im_w + x\n            rects.append((x, y, w, h))\n        rects = sorted(rects, key=lambda x:(x[0],x[1]))\n        #このソートが問題点だった。 xの昇準、yの昇順にならべないと、ラベルと齟齬する。\n        # 抽出した領域の画像データ\n        X = []\n        # for i, r in enumerate(rects): enumerateだと、index順に出力されてしまうので、使わない\n        #     index, x, y, w, h = r\n        i = 1\n        for r in rects:\n            x, y, w, h = r[0],r[1],r[2],r[3]\n            num = gray[y:y+h, x:x+w]\n            num = 255 - num   # ネガポジ反転\n            # 正方形の中に数字を描画\n            ww = round((w if w > h else h) * 1.80) \n            spc = np.zeros((ww,ww))\n            wy = (ww-h)//2\n            wx = (ww-w)//2\n            spc[wy:wy+h, wx:wx+w] = num\n            num = cv2.resize(spc, (28, 28))  # MNISTのサイズ 28x28にリサイズ\n            #cv2.imwrite(str(i)+\"-num.png\", num) # 切り出した様子を保存\n            #i += 1\n            num = num.reshape(28,28)\n            num = num.astype(\"float32\") / 255\n            X.append(num)\n        nlist.append([file.split(\".\")[0], mnist.predict(np.array(X))])\n    \nnlist_sorted = sorted(nlist,key=lambda x:x[0])\no_file = os.path.join(path,\"mno_output.txt\")\nwith open(o_file, 'w') as o:\n    for ele in nlist_sorted:\n        st1 = ele[0] + \",\"\n        for i in range(len(ele[1])):\n            st2 = np.argmax(ele[1][i])\n            st1 = st1 + str(st2)\n        print(st1, end=\"\\n\", file=o)\n\n```\n# 5.　結果\n　サンプル画像 20250227192457-0001\n<!--\n ![まとめ.tif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff\" width=50%>\n\nにつきまして、\n\n## (1)kcd_output.txt\n\n**20250227192457-0001,0408317**\n\nという結果になっていました。\nどういうふうに認識しているかを次のコードで書き出ししてみます。\n\n``` python\n# OPEN-CVを使った、数値画像の認識の調査\nimport sys\nimport os\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n#import japanize_matplotlib\n\npath = os.getcwd()\nim = cv2.imread(os.path.join(path,\"kcd\",'20250227192457-0001.bmp'))\n# モノクロ変換\ngray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n# ガウス分布に基づくブラー（ぼかし）\nblur = cv2.GaussianBlur(gray, (5, 5), 0)\n# ２値化（明るいところを白く、暗いところを黒く\nthresh = cv2.adaptiveThreshold(blur, 255, 1, 1, 11, 2)\n\n# 輪郭抽出\ncontours = cv2.findContours(\n    #thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[0]\n    # RETR_EXTERNAL は　一番外側だけを検出するパラメータ\n    thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]\n\nim_w = im.shape[1]          \nfor cnt in contours:\n    x, y, w, h = cv2.boundingRect(cnt)\n    if w < 7 or h < 10: continue   \n    if w > im_w / 2: continue\n    red = (0, 0, 255)\n    cv2.rectangle(im, (x,y), (x+w, y+h), red, 2)\n\ncv2.imwrite('numbers-cnt.png', im)\n\n```\n<!--\n![numbers-cnt.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png\" width=50%>\n\n３文字目の「6」を「0」と誤認識するのは仕方がないけど、最後の「7」を「1」「7」とご認識しているのは痛い。\n\nここはロジックの次の部分が甘いことによります。\nここは認識しても無視するサイズを指定しています。\n``` python\n    if w < 7 or h < 10: continue   \n    if w > im_w / 2: continue\n```\n![Screenshot from 2025-03-02 22-03-45.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/7aa704eb-7306-44b8-8fa1-94e511e43847.png)\n\n７の一画目の幅は８ピクセルあります。\n``` python\n    if w < 10 or h < 10: continue   \n    if w > im_w / 2: continue\n```\nロジックをこのように変更すると、\n<!--\n![numbers-cnt.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/745de871-febc-4b3d-b3e2-7fb6fc1a934b.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/745de871-febc-4b3d-b3e2-7fb6fc1a934b.png\" width=50%>\n\nというふうに、7の一角目を無視してくれます。\nこの修正を加えてもう一度　kcd_output.txt を再作成すると、\n\n**20250227192457-0001,040837**\n\nと修正されました。\n\n## (2)mno_output.txt\n(1)と同様に、認識しないサイズを調整することで、次の水準にはできました。\n![myn.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/9825e196-5a0f-4a44-b0f1-b2416ff1abee.png)\n\n２文字目の「8」を認識できていません！！大きさは十分あるのに何故？？？\n\n答えは、「8」の書き終わりが、枠線に接触してしまいとても大きなオブジェクトと認識されたからです。\n\n## (3)わかったこと\n\nとりあえず試作機を作成することはできました。\n* 数字を高確率で判別することができるCNNを自作することができる\n* 認識するサイズが重要で、職人芸でサイズ調整を行う必要がある\n* 枠内に文字を書くケースでの認識は至難の技\n\n尚、今回は数字がターゲットでしたが、漢字認識は桁違いに難解なようです。\n（なぜなら学習データの確保が難しいからです。）\n\n# ６．参考にした情報\n本当に世の中にはすごい方がおられまして、その方々が公開していただいている情報は宝の山です。\n今回もそれを参考にさせていただいております。\n最大の謝辞を述べさせていただきます。\n\n**[CNNで画像OCRを作成する]**\n 「増補改訂Pythonによるスクレイピング＆機械学習　開発テクニック」\n 　クジラ飛行机　著\n 　ソシム株式会社　発行\n\n\n**[CNNモデル]**\n https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist\n\n**[OpenCVのfindContours関数を使った画像の輪郭検出]**\n https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-03-04T22:32:27+09:00",
        "group": null,
        "id": "d7b3e2a70c8624c43c45",
        "likes_count": 13,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 12,
        "tags": [
          {
            "name": "AI",
            "versions": []
          },
          {
            "name": "OCR",
            "versions": []
          },
          {
            "name": "CNN",
            "versions": []
          }
        ],
        "title": "AI-OCRを自作しました(2025.2)",
        "updated_at": "2025-03-08T23:56:06+09:00",
        "url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
        "user": {
          "description": "　20年ほど前、社内SEやってました。その後、会社の人事総務部門で管理職をしてきましたが、役職定年（55歳）を間近に控え、一念発起しました。もう一度、SEに戻りたい！\r\n　教育訓練講座（SAMURAI ENGINEER　AIデータサイエンスコース）を半年間受講し、機械学習の基礎を学びました。やりたいことが次々に浮かび、昼は本業が手につかず、夜は眠れません。",
          "facebook_id": "",
          "followees_count": 1,
          "followers_count": 1,
          "github_login_name": "jupiter-san",
          "id": "jupiter-san",
          "items_count": 3,
          "linkedin_id": "",
          "location": "",
          "name": "J Im",
          "organization": "",
          "permanent_id": 3937616,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3937616/a06f4153558cebca7096b04d4e269ca35c5d3ff1/x_large.png?1735129454",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7867734432220459,
        "quality_score": 21,
        "python_code_score": 8,
        "python_code_blocks": 1
      },
      {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:58\">\n<span id=\"markitdownは便利だけどたまに使いづらい\" class=\"fragment\"></span><a href=\"#markitdown%E3%81%AF%E4%BE%BF%E5%88%A9%E3%81%A0%E3%81%91%E3%81%A9%E3%81%9F%E3%81%BE%E3%81%AB%E4%BD%BF%E3%81%84%E3%81%A5%E3%82%89%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markitdownは便利だけどたまに使いづらい。</h2>\n<p data-sourcepos=\"3:1-3:483\">LLMライクに資料を前処理するときにMarkitdownは結構使いやすい。しかし、MarkItDown 単体で PDF から Markdown を生成すると、PDF の内容によってはテキスト抽出が不完全になることがある。特に、テキスト層が存在しない画像 PDF やレイアウトが複雑な表形式、段組み構造では文字の順序が乱れる、空白が消える、文字化けが起こるなど、実用に耐えない出力となる。</p>\n<h2 data-sourcepos=\"5:1-5:45\">\n<span id=\"なぜそんなことが起きるのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E3%81%9D%E3%82%93%E3%81%AA%E3%81%93%E3%81%A8%E3%81%8C%E8%B5%B7%E3%81%8D%E3%82%8B%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜそんなことが起きるのか？</h2>\n<p data-sourcepos=\"7:1-7:448\">MarkItDown は PDF のテキスト抽出を内部的には既存の PDF パーサー（PyPDF など）に依存しているが、これらは画像 PDF に含まれる文字を認識する力がない。また、段組や表組の構造を論理的に復元する機能が弱いため、テキストの流れを正確に再現できない。OCR 機能は別途必要だが、MarkItDown 自体には高精度な OCR 処理は含まれていない。</p>\n<h2 data-sourcepos=\"9:1-9:15\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h2>\n<ol data-sourcepos=\"11:1-15:0\">\n<li data-sourcepos=\"11:1-11:197\">\n<strong>OCR の多段処理</strong>： <code>pdf2image</code> + <code>pytesseract</code> を使い、画像 PDF をページごとに画像化 → OCR でテキスト抽出 → 必要に応じて手動でレイアウト補正。</li>\n<li data-sourcepos=\"12:1-12:129\">\n<strong>外部依存の設定</strong>： Poppler や Tesseract のパスを明示的に指定して、環境依存エラーを減らす。</li>\n<li data-sourcepos=\"13:1-13:125\">\n<strong>スキップロジック</strong>： 対応外フォーマットを処理対象から除外し、エラーを未然に防ぐ。</li>\n<li data-sourcepos=\"14:1-15:0\">\n<strong>抽出後のフロー分岐</strong>： OCR 結果テキストは MarkItDown に通さず直接 .md に保存する。</li>\n</ol>\n<h2 data-sourcepos=\"16:1-16:30\">\n<span id=\"実際にやってみた\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>実際にやってみた。</h2>\n<h3 data-sourcepos=\"17:1-17:16\">\n<span id=\"動作環境\" class=\"fragment\"></span><a href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>動作環境</h3>\n<ul data-sourcepos=\"18:1-21:0\">\n<li data-sourcepos=\"18:1-18:12\">windows 11</li>\n<li data-sourcepos=\"19:1-21:0\">Python 3.9 以上推奨</li>\n</ul>\n<table data-sourcepos=\"22:1-29:103\">\n<thead>\n<tr data-sourcepos=\"22:1-22:103\">\n<th data-sourcepos=\"22:2-22:27\">パッケージ名</th>\n<th data-sourcepos=\"22:29-22:48\">バージョン例</th>\n<th data-sourcepos=\"22:50-22:102\">必要な理由</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"24:1-24:55\">\n<td data-sourcepos=\"24:2-24:15\">numpy</td>\n<td data-sourcepos=\"24:17-24:24\">1.26.x</td>\n<td data-sourcepos=\"24:26-24:54\">互換性の合致のため</td>\n</tr>\n<tr data-sourcepos=\"25:1-25:89\">\n<td data-sourcepos=\"25:2-25:15\">pandas</td>\n<td data-sourcepos=\"25:17-25:34\">最新安定版</td>\n<td data-sourcepos=\"25:36-25:88\">Excel/CSV処理に必須</td>\n</tr>\n<tr data-sourcepos=\"26:1-26:95\">\n<td data-sourcepos=\"26:2-26:15\">pdfminer.six</td>\n<td data-sourcepos=\"26:17-26:34\">最新安定版</td>\n<td data-sourcepos=\"26:36-26:94\">PDF のテキスト層抽出</td>\n</tr>\n<tr data-sourcepos=\"27:1-27:105\">\n<td data-sourcepos=\"27:2-27:15\">pdf2image</td>\n<td data-sourcepos=\"27:17-27:34\">最新安定版</td>\n<td data-sourcepos=\"27:36-27:104\">PDF をページごとに画像化（OCR用）</td>\n</tr>\n<tr data-sourcepos=\"28:1-28:121\">\n<td data-sourcepos=\"28:2-28:15\">pytesseract</td>\n<td data-sourcepos=\"28:17-28:34\">最新安定版</td>\n<td data-sourcepos=\"28:36-28:120\">画像から文字列を抽出する OCR エンジンのラッパー</td>\n</tr>\n<tr data-sourcepos=\"29:1-29:103\">\n<td data-sourcepos=\"29:2-29:15\">markitdown</td>\n<td data-sourcepos=\"29:17-29:34\">最新安定版</td>\n<td data-sourcepos=\"29:36-29:102\">各種ファイルを Markdown に一括変換</td>\n</tr>\n</tbody>\n</table>\n<table data-sourcepos=\"31:1-34:173\">\n<thead>\n<tr data-sourcepos=\"31:1-31:145\">\n<th data-sourcepos=\"31:2-31:24\">ツール名</th>\n<th data-sourcepos=\"31:26-31:46\">バージョン例</th>\n<th data-sourcepos=\"31:48-31:144\">備考</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"33:1-33:153\">\n<td data-sourcepos=\"33:2-33:16\">Poppler</td>\n<td data-sourcepos=\"33:18-33:30\">23.x 以降</td>\n<td data-sourcepos=\"33:32-33:152\">\n<code>pdf2image</code> が内部で <code>pdftoppm.exe</code> を呼ぶため。<br>PATH か <code>poppler_path</code> で指定</td>\n</tr>\n<tr data-sourcepos=\"34:1-34:173\">\n<td data-sourcepos=\"34:2-34:16\">Tesseract OCR</td>\n<td data-sourcepos=\"34:18-34:28\">5.x 系</td>\n<td data-sourcepos=\"34:30-34:172\">\n<code>pytesseract</code> が内部で <code>tesseract.exe</code> を呼ぶ。<br>日本語対応には <code>jpn.traineddata</code> を <code>tessdata</code> に配置する必要あり</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"37:1-37:19\">\n<span id=\"全体コード\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>全体コード</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"39:1-145:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">os</span>                                            <span class=\"c1\"># OS操作用\n</span><span class=\"kn\">from</span> <span class=\"n\">markitdown</span> <span class=\"kn\">import</span> <span class=\"n\">MarkItDown</span>                   <span class=\"c1\"># 任意テキスト→Markdown\n</span><span class=\"kn\">from</span> <span class=\"n\">pdfminer.high_level</span> <span class=\"kn\">import</span> <span class=\"n\">extract_text</span>        <span class=\"c1\"># PDFテキスト抽出\n</span><span class=\"kn\">from</span> <span class=\"n\">pdf2image</span> <span class=\"kn\">import</span> <span class=\"n\">convert_from_path</span>             <span class=\"c1\"># PDF→画像\n</span><span class=\"kn\">import</span> <span class=\"n\">pytesseract</span>                                  <span class=\"c1\"># OCR\n</span><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>                                 <span class=\"c1\"># Excel処理\n</span><span class=\"kn\">from</span> <span class=\"n\">docx</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span>                           <span class=\"c1\"># Word処理\n</span><span class=\"n\">pytesseract</span><span class=\"p\">.</span><span class=\"n\">pytesseract</span><span class=\"p\">.</span><span class=\"n\">tesseract_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">&lt;TESSERACT_PATH&gt;</span><span class=\"sh\">\"</span> <span class=\"c1\"># tesseract.exeをインストール・格納したパスを指定する。\n</span>\n<span class=\"n\">md_engine</span> <span class=\"o\">=</span> <span class=\"nc\">MarkItDown</span><span class=\"p\">()</span>                            <span class=\"c1\"># Markdown変換エンジン共有\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">save_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>                         <span class=\"c1\"># Markdown保存関数\n</span>    <span class=\"n\">md_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">.md</span><span class=\"sh\">\"</span>     <span class=\"c1\"># 出力パス生成\n</span>    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">md_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"c1\"># UTF-8で書込\n</span>        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>                            <span class=\"c1\"># Markdown書込\n</span>    <span class=\"k\">return</span> <span class=\"n\">md_path</span>                                  <span class=\"c1\"># 保存先返却\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">pdf_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"nf\">extract_text</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">():</span>\n        <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"nf\">convert_from_path</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n            <span class=\"n\">poppler_path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">&lt;POPPLER_PATH&gt;</span><span class=\"sh\">\"</span> <span class=\"c1\"># popplerをダウンロードしたパス（xxx\\Release-24.08.0-0\\poppler-24.08.0\\Library\\bin）を指定する。\n</span>        <span class=\"p\">)</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">pytesseract</span><span class=\"p\">.</span><span class=\"nf\">image_to_string</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">jpn+eng</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pages</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># OCR結果はすでにMarkdown的な構造なのでそのまま保存するのがベター\n</span>    <span class=\"k\">return</span> <span class=\"n\">text</span>  <span class=\"c1\"># ← MarkItDown は通さずにテキストを返すだけ\n</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">docx_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>                               <span class=\"c1\"># Word→Markdown\n</span>    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"nc\">Document</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>                            <span class=\"c1\"># 読込\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">paragraphs</span><span class=\"p\">)</span> <span class=\"c1\"># 段落結合\n</span>    <span class=\"k\">return</span> <span class=\"n\">md_engine</span><span class=\"p\">.</span><span class=\"nf\">convert_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>             <span class=\"c1\"># Markdown生成\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">excel_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>                              <span class=\"c1\"># Excel→Markdown\n</span>    <span class=\"n\">dfs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>                                        <span class=\"c1\"># シート保持\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># openpyxlバージョン問題を回避するため、xlrdエンジンも試行\n</span>        <span class=\"k\">with</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">ExcelFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">openpyxl</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">xls</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"n\">sheet_names</span><span class=\"p\">:</span>            <span class=\"c1\"># 各シート巡回\n</span>                <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>                <span class=\"c1\"># DataFrame取得\n</span>                <span class=\"n\">dfs</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">### </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>          <span class=\"c1\"># 見出し\n</span>                            <span class=\"o\">+</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_markdown</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># openpyxlで失敗した場合はxlrdを試行（.xlsファイル用）\n</span>        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">ExcelFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">xlrd</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">xls</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"n\">sheet_names</span><span class=\"p\">:</span>\n                    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">dfs</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">### </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n                                <span class=\"o\">+</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_markdown</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e2</span><span class=\"p\">:</span>\n            <span class=\"c1\"># 両方失敗した場合は基本的なCSV風変換\n</span>            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Excel読み込みエラー: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s\">, </span><span class=\"si\">{</span><span class=\"n\">e2</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\"># Excel変換エラー</span><span class=\"se\">\\n\\n</span><span class=\"s\">ファイル: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s\">エラー: openpyxlバージョン要件未満</span><span class=\"sh\">\"</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"p\">)</span>                         <span class=\"c1\"># 全シート結合\n</span>\n\n\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_file_to_markdown</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>                 <span class=\"c1\"># 拡張子分岐変換\n</span>    <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">lower</span><span class=\"p\">()</span>         <span class=\"c1\"># 拡張子取得\n</span>    \n    <span class=\"c1\"># 対応しない形式をスキップ\n</span>    <span class=\"n\">skip_extensions</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">.csv</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.md</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.pyc</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.tmp</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.ipynb</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.json</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">ext</span> <span class=\"ow\">in</span> <span class=\"n\">skip_extensions</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">スキップ: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s\"> (未対応形式)</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">ext</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">.pdf</span><span class=\"sh\">\"</span><span class=\"p\">:</span>                               <span class=\"c1\"># PDF\n</span>        <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nf\">pdf_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>                        <span class=\"c1\"># 専用処理\n</span>    <span class=\"k\">elif</span> <span class=\"n\">ext</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">.docx</span><span class=\"sh\">\"</span><span class=\"p\">}:</span>                          <span class=\"c1\"># Word系\n</span>        <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nf\">docx_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>                       <span class=\"c1\"># Word処理\n</span>    <span class=\"k\">elif</span> <span class=\"n\">ext</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">.xlsx</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.xls</span><span class=\"sh\">\"</span><span class=\"p\">}:</span>                  <span class=\"c1\"># Excel系\n</span>        <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nf\">excel_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>                      <span class=\"c1\"># Excel処理\n</span>    <span class=\"k\">else</span><span class=\"p\">:</span>                                           <span class=\"c1\"># 上記以外\n</span>        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"n\">md_engine</span><span class=\"p\">.</span><span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">).</span><span class=\"n\">text_content</span>   <span class=\"c1\"># MarkItDown汎用\n</span>        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">変換失敗: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">return</span> <span class=\"nf\">save_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">md</span><span class=\"p\">)</span>                        <span class=\"c1\"># 保存しパス返却\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">convert_directory_to_markdown</span><span class=\"p\">(</span><span class=\"n\">dir_path</span><span class=\"p\">):</span>        <span class=\"c1\"># 再帰的一括変換\n</span>    <span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"n\">dir_path</span><span class=\"p\">):</span>        <span class=\"c1\"># ディレクトリ探索\n</span>        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>                             <span class=\"c1\"># 各ファイル\n</span>            <span class=\"k\">try</span><span class=\"p\">:</span>                                    <span class=\"c1\"># 例外捕捉\n</span>                <span class=\"n\">full_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>   <span class=\"c1\"># フルパス生成\n</span>                <span class=\"n\">result_path</span> <span class=\"o\">=</span> <span class=\"nf\">convert_file_to_markdown</span><span class=\"p\">(</span><span class=\"n\">full_path</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">result_path</span><span class=\"p\">:</span>  <span class=\"c1\"># Noneでない場合のみ成功ログ\n</span>                    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">成功: </span><span class=\"si\">{</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"n\">result_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>                  <span class=\"c1\"># エラー時\n</span>                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">失敗: </span><span class=\"si\">{</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>            <span class=\"c1\"># ログ出力\n</span>\n<span class=\"c1\">## 出力ブロック（フォルダ内一括変換）\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">chdir</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">&lt;./mdファイルへと変換したいファイルのある場所&gt;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">current_directory</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getcwd</span><span class=\"p\">()</span>  <span class=\"c1\"># 現在の作業ディレクトリを取得\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">現在の作業ディレクトリ: </span><span class=\"si\">{</span><span class=\"n\">current_directory</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">convert_directory_to_markdown</span><span class=\"p\">(</span><span class=\"n\">current_directory</span><span class=\"p\">)</span>    \n\n</code></pre></div></div>\n<p data-sourcepos=\"146:1-146:100\">※tesseractやPOPPLERは事前にダウンロード、インストールしておく必要あり。</p>\n<h2 data-sourcepos=\"149:1-149:30\">\n<span id=\"各コードごとの解説\" class=\"fragment\"></span><a href=\"#%E5%90%84%E3%82%B3%E3%83%BC%E3%83%89%E3%81%94%E3%81%A8%E3%81%AE%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>各コードごとの解説</h2>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"150:1-162:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">markitdown</span> <span class=\"kn\">import</span> <span class=\"n\">MarkItDown</span>\n<span class=\"kn\">from</span> <span class=\"n\">pdfminer.high_level</span> <span class=\"kn\">import</span> <span class=\"n\">extract_text</span>\n<span class=\"kn\">from</span> <span class=\"n\">pdf2image</span> <span class=\"kn\">import</span> <span class=\"n\">convert_from_path</span>\n<span class=\"kn\">import</span> <span class=\"n\">pytesseract</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">from</span> <span class=\"n\">docx</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span>\n\n<span class=\"n\">pytesseract</span><span class=\"p\">.</span><span class=\"n\">pytesseract</span><span class=\"p\">.</span><span class=\"n\">tesseract_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">&lt;TESSERACT_PATH&gt;</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">md_engine</span> <span class=\"o\">=</span> <span class=\"nc\">MarkItDown</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p data-sourcepos=\"164:1-164:362\">冒頭では標準ライブラリと外部依存を読み込み、Tesseract OCR の実行ファイル位置をハードコードで指定し、MarkItDown のインスタンスを共有リソースとして生成する。ここで <code>&lt;TESSERACT_PATH&gt;</code> は筆者の場合、Windows環境だったのでシステムの環境変数にこちらのpathを追加した。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"166:1-172:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">save_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"n\">md_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">.md</span><span class=\"sh\">\"</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">md_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">md_path</span>\n</code></pre></div></div>\n<p data-sourcepos=\"174:1-174:299\"><code>save_md</code> は変換済み Markdown を元ファイル名に拡張子 <code>.md</code> を付与した形で保存し、そのパスを返すユーティリティである。エンコーディングを UTF-8 に固定することで、LLM など後続システムとの互換性を担保する設計である。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"176:1-189:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">pdf_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"nf\">extract_text</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">():</span>\n        <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"nf\">convert_from_path</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n            <span class=\"n\">poppler_path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"sh\">\"</span><span class=\"s\">&lt;POPPLER_PATH&gt;</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">pytesseract</span><span class=\"p\">.</span><span class=\"nf\">image_to_string</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">jpn+eng</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pages</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span>\n</code></pre></div></div>\n<p data-sourcepos=\"191:1-191:430\"><code>pdf_to_md</code> は PDFMiner で抽出したテキストが空だった場合にのみ、Poppler を用いてページを画像へ変換し、日本語と英語の二言語 OCR を行う。画像化 PDF やスキャン PDF を包括的に取り扱えるようにするため、OCR 結果は Markdown への追加整形を行わずそのまま返している。<code>&lt;POPPLER_PATH&gt;</code> もtesseractのパスと同様、環境変数に追加。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"193:1-198:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">docx_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"nc\">Document</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">paragraphs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">md_engine</span><span class=\"p\">.</span><span class=\"nf\">convert_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"200:1-200:239\">Word 文書は python-docx で段落ごとに抽出し、MarkItDown のシンプルなテキスト変換 API へ渡す。段落境界を改行で表現することで、元文書の構造を壊さずに Markdown へ落とし込む方針。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"202:1-223:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">excel_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"n\">dfs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">ExcelFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">openpyxl</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">xls</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"n\">sheet_names</span><span class=\"p\">:</span>\n                <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">dfs</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">### </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_markdown</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">ExcelFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">xlrd</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">xls</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"n\">sheet_names</span><span class=\"p\">:</span>\n                    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">xls</span><span class=\"p\">.</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">dfs</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">### </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_markdown</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e2</span><span class=\"p\">:</span>\n            <span class=\"nf\">return </span><span class=\"p\">(</span>\n                <span class=\"sh\">\"</span><span class=\"s\"># Excel変換エラー</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span>\n                <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">ファイル: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n                <span class=\"sh\">\"</span><span class=\"s\">エラー: openpyxlバージョン要件未満</span><span class=\"sh\">\"</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"225:1-225:344\">Excel 変換では <code>openpyxl</code> と <code>xlrd</code> の二段構えで読み取りを試行し、各シートを Markdown テーブルへ変換して連結する。バージョン不整合や旧式 <code>.xls</code> を暗黙的に救済し、完全に失敗した場合は簡潔なエラーメッセージを返すことで、バッチ実行中の停止を防ぐ。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"227:1-248:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">convert_file_to_markdown</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n    <span class=\"n\">skip_extensions</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">.csv</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.md</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.pyc</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.log</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.tmp</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.ipynb</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.json</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">ext</span> <span class=\"ow\">in</span> <span class=\"n\">skip_extensions</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">スキップ: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s\"> (未対応形式)</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ext</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">.pdf</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nf\">pdf_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">ext</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">.docx</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nf\">docx_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">ext</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">.xlsx</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.xls</span><span class=\"sh\">\"</span><span class=\"p\">}:</span>\n        <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nf\">excel_to_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"n\">md_engine</span><span class=\"p\">.</span><span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">).</span><span class=\"n\">text_content</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">変換失敗: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">return</span> <span class=\"nf\">save_md</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">md</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"250:1-250:368\"><code>convert_file_to_markdown</code> は拡張子に基づき処理関数を選択し、スキップ対象を事前に排除する。汎用処理に失敗した際も例外を握りつぶしてログだけ残し、パイプライン全体の連続性を保つ実装となっている。最終的に <code>save_md</code> へ渡し、生成ファイルのパスを返す仕組みである。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"252:1-263:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">convert_directory_to_markdown</span><span class=\"p\">(</span><span class=\"n\">dir_path</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"n\">dir_path</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">full_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"n\">result_path</span> <span class=\"o\">=</span> <span class=\"nf\">convert_file_to_markdown</span><span class=\"p\">(</span><span class=\"n\">full_path</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">result_path</span><span class=\"p\">:</span>\n                    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">成功: </span><span class=\"si\">{</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"n\">result_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">失敗: </span><span class=\"si\">{</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"265:1-265:363\">ディレクトリ変換関数は OS 依存の再帰探索で全ファイルを網羅し、個別変換の成否を逐次標準出力へ報告する。実運用ではこの関数を一度呼び出すだけで、ディレクトリツリー下に存在する PDF・Office・その他対応ファイルがすべて Markdown 化され、同階層に保存される。</p>\n<h2 data-sourcepos=\"267:1-267:9\">\n<span id=\"結果\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>結果</h2>\n<p data-sourcepos=\"269:1-270:65\">OCR を含めた前処理をスクリプトで組み込むことで、画像 PDF からもテキストを正確に抽出し、レイアウトの崩れを最小化できた。MarkItDown は Markdown 生成に専念させる形で安定した運用が可能になった。<br>\nexcelでも試したが、特に問題なく出力ができた。</p>\n<p data-sourcepos=\"272:1-272:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3535433%2F15f6f2f1-0bd4-479e-b742-af4c1368decb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb1e6f3765f7307200fb1858331724dc\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3535433%2F15f6f2f1-0bd4-479e-b742-af4c1368decb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb1e6f3765f7307200fb1858331724dc\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3535433%2F15f6f2f1-0bd4-479e-b742-af4c1368decb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=face75684c7e99a2f0a91a738bccb3aa 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3535433/15f6f2f1-0bd4-479e-b742-af4c1368decb.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"275:1-275:9\">\n<span id=\"考察\" class=\"fragment\"></span><a href=\"#%E8%80%83%E5%AF%9F\"><i class=\"fa fa-link\"></i></a>考察</h2>\n<p data-sourcepos=\"277:1-277:336\">MarkItDown は多形式変換のハブとしては有用だが、PDF など複雑な構造を含むファイルでは前処理の有無で出力品質が大きく変わる。自動化と正確性のバランスを取るためには、前処理を多段化し、外部ツールとの連携を前提にするのが現実解と言える。</p>\n<h2 data-sourcepos=\"279:1-279:12\">\n<span id=\"残課題\" class=\"fragment\"></span><a href=\"#%E6%AE%8B%E8%AA%B2%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>残課題</h2>\n<ul data-sourcepos=\"281:1-283:0\">\n<li data-sourcepos=\"281:1-281:117\">Poppler や Tesseract など外部バイナリのバージョン違いによるトラブルはゼロではない。</li>\n<li data-sourcepos=\"282:1-283:0\">大量ファイルを一括処理する場合の並列化やエラー監視など、運用の自動化度を上げる余地がある。（多すぎると処理しきれない恐れがあるから非同期バッチ処理が有効かもしれない。）</li>\n</ul>\n<h2 data-sourcepos=\"284:1-284:18\">\n<span id=\"関連リンク\" class=\"fragment\"></span><a href=\"#%E9%96%A2%E9%80%A3%E3%83%AA%E3%83%B3%E3%82%AF\"><i class=\"fa fa-link\"></i></a>関連リンク</h2>\n<p data-sourcepos=\"285:1-290:69\">Tesseract：<a href=\"https://github.com/UB-Mannheim/tesseract/wiki\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/UB-Mannheim/tesseract/wiki</a><br>\nTesseract 日本語：<a href=\"https://github.com/tesseract-ocr/tessdata\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/tesseract-ocr/tessdata</a><br>\n※日本語の場合は jpn.traineddata<br>\n※日本語のPDFを読み取りたい場合はダウンロードした jpn.traineddata を<br>\nTesseract の tessdata フォルダに置くだけ。<br>\nPoppler：<a href=\"https://github.com/oschwartz10612/poppler-windows/releases/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/oschwartz10612/poppler-windows/releases/</a></p>\n<h2 data-sourcepos=\"292:1-292:24\">\n<span id=\"参考にした記事\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>参考にした記事</h2>\n<p data-sourcepos=\"293:1-293:53\"><iframe id=\"qiita-embed-content__ad7416db4525be195836cb3ee074e2a7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ad7416db4525be195836cb3ee074e2a7\" data-content=\"https%3A%2F%2Fzenn.dev%2Ftorachi0401%2Farticles%2Fpoppler_install\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n",
        "body": "## Markitdownは便利だけどたまに使いづらい。\n\nLLMライクに資料を前処理するときにMarkitdownは結構使いやすい。しかし、MarkItDown 単体で PDF から Markdown を生成すると、PDF の内容によってはテキスト抽出が不完全になることがある。特に、テキスト層が存在しない画像 PDF やレイアウトが複雑な表形式、段組み構造では文字の順序が乱れる、空白が消える、文字化けが起こるなど、実用に耐えない出力となる。\n\n## なぜそんなことが起きるのか？\n\nMarkItDown は PDF のテキスト抽出を内部的には既存の PDF パーサー（PyPDF など）に依存しているが、これらは画像 PDF に含まれる文字を認識する力がない。また、段組や表組の構造を論理的に復元する機能が弱いため、テキストの流れを正確に再現できない。OCR 機能は別途必要だが、MarkItDown 自体には高精度な OCR 処理は含まれていない。\n\n## 解決方法\n\n1. **OCR の多段処理**： `pdf2image` + `pytesseract` を使い、画像 PDF をページごとに画像化 → OCR でテキスト抽出 → 必要に応じて手動でレイアウト補正。\n2. **外部依存の設定**： Poppler や Tesseract のパスを明示的に指定して、環境依存エラーを減らす。\n3. **スキップロジック**： 対応外フォーマットを処理対象から除外し、エラーを未然に防ぐ。\n4. **抽出後のフロー分岐**： OCR 結果テキストは MarkItDown に通さず直接 .md に保存する。\n\n## 実際にやってみた。\n### 動作環境\n* windows 11\n* Python 3.9 以上推奨\n\n\n| パッケージ名       | バージョン例 | 必要な理由                                     |\n| ------------ | ------ | ----------------------------------------- |\n| numpy        | 1.26.x | 互換性の合致のため |\n| pandas       | 最新安定版  | Excel/CSV処理に必須                            |\n| pdfminer.six | 最新安定版  | PDF のテキスト層抽出                              |\n| pdf2image    | 最新安定版  | PDF をページごとに画像化（OCR用）                      |\n| pytesseract  | 最新安定版  | 画像から文字列を抽出する OCR エンジンのラッパー                |\n| markitdown   | 最新安定版  | 各種ファイルを Markdown に一括変換                    |\n\n| ツール名          | バージョン例  | 備考                                                                                          |\n| ------------- | ------- | ------------------------------------------------------------------------------------------- |\n| Poppler       | 23.x 以降 | `pdf2image` が内部で `pdftoppm.exe` を呼ぶため。<br>PATH か `poppler_path` で指定                         |\n| Tesseract OCR | 5.x 系   | `pytesseract` が内部で `tesseract.exe` を呼ぶ。<br>日本語対応には `jpn.traineddata` を `tessdata` に配置する必要あり |\n\n\n### 全体コード\n\n```python\nimport os                                            # OS操作用\nfrom markitdown import MarkItDown                   # 任意テキスト→Markdown\nfrom pdfminer.high_level import extract_text        # PDFテキスト抽出\nfrom pdf2image import convert_from_path             # PDF→画像\nimport pytesseract                                  # OCR\nimport pandas as pd                                 # Excel処理\nfrom docx import Document                           # Word処理\npytesseract.pytesseract.tesseract_cmd = r\"<TESSERACT_PATH>\" # tesseract.exeをインストール・格納したパスを指定する。\n\nmd_engine = MarkItDown()                            # Markdown変換エンジン共有\n\ndef save_md(path, content):                         # Markdown保存関数\n    md_path = os.path.splitext(path)[0] + \".md\"     # 出力パス生成\n    with open(md_path, \"w\", encoding=\"utf-8\") as f: # UTF-8で書込\n        f.write(content)                            # Markdown書込\n    return md_path                                  # 保存先返却\n\ndef pdf_to_md(path):\n    text = extract_text(path)\n    if not text.strip():\n        pages = convert_from_path(\n            path,\n            dpi=300,\n            poppler_path=r\"<POPPLER_PATH>\" # popplerをダウンロードしたパス（xxx\\Release-24.08.0-0\\poppler-24.08.0\\Library\\bin）を指定する。\n        )\n        text = \"\\n\\n\".join(\n            pytesseract.image_to_string(p, lang=\"jpn+eng\") for p in pages\n        )\n\n    # OCR結果はすでにMarkdown的な構造なのでそのまま保存するのがベター\n    return text  # ← MarkItDown は通さずにテキストを返すだけ\n\n\n\ndef docx_to_md(path):                               # Word→Markdown\n    doc = Document(path)                            # 読込\n    text = \"\\n\".join(p.text for p in doc.paragraphs) # 段落結合\n    return md_engine.convert_text(text)             # Markdown生成\n\ndef excel_to_md(path):                              # Excel→Markdown\n    dfs = []                                        # シート保持\n    try:\n        # openpyxlバージョン問題を回避するため、xlrdエンジンも試行\n        with pd.ExcelFile(path, engine='openpyxl') as xls:\n            for name in xls.sheet_names:            # 各シート巡回\n                df = xls.parse(name)                # DataFrame取得\n                dfs.append(f\"### {name}\\n\"          # 見出し\n                            + df.to_markdown(index=False))\n    except Exception as e:\n        # openpyxlで失敗した場合はxlrdを試行（.xlsファイル用）\n        try:\n            with pd.ExcelFile(path, engine='xlrd') as xls:\n                for name in xls.sheet_names:\n                    df = xls.parse(name)\n                    dfs.append(f\"### {name}\\n\"\n                                + df.to_markdown(index=False))\n        except Exception as e2:\n            # 両方失敗した場合は基本的なCSV風変換\n            print(f\"Excel読み込みエラー: {e}, {e2}\")\n            return f\"# Excel変換エラー\\n\\nファイル: {path}\\nエラー: openpyxlバージョン要件未満\"\n    return \"\\n\\n\".join(dfs)                         # 全シート結合\n\n\n\n\ndef convert_file_to_markdown(path):                 # 拡張子分岐変換\n    ext = os.path.splitext(path)[1].lower()         # 拡張子取得\n    \n    # 対応しない形式をスキップ\n    skip_extensions = {\".csv\", \".md\", \".pyc\", \".log\", \".tmp\", \".ipynb\", \".json\"}\n    if ext in skip_extensions:\n        print(f\"スキップ: {path} (未対応形式)\")\n        return None\n    \n    if ext == \".pdf\":                               # PDF\n        md = pdf_to_md(path)                        # 専用処理\n    elif ext in {\".docx\"}:                          # Word系\n        md = docx_to_md(path)                       # Word処理\n    elif ext in {\".xlsx\", \".xls\"}:                  # Excel系\n        md = excel_to_md(path)                      # Excel処理\n    else:                                           # 上記以外\n        try:\n            md = md_engine.convert(path).text_content   # MarkItDown汎用\n        except Exception as e:\n            print(f\"変換失敗: {path} → {e}\")\n            return None\n    return save_md(path, md)                        # 保存しパス返却\n\ndef convert_directory_to_markdown(dir_path):        # 再帰的一括変換\n    for root, _, files in os.walk(dir_path):        # ディレクトリ探索\n        for f in files:                             # 各ファイル\n            try:                                    # 例外捕捉\n                full_path = os.path.join(root, f)   # フルパス生成\n                result_path = convert_file_to_markdown(full_path)\n                if result_path:  # Noneでない場合のみ成功ログ\n                    print(f\"成功: {f} → {result_path}\")\n            except Exception as e:                  # エラー時\n                print(f\"失敗: {f} → {e}\")            # ログ出力\n\n## 出力ブロック（フォルダ内一括変換）\nos.chdir(\"<./mdファイルへと変換したいファイルのある場所>\")\ncurrent_directory = os.getcwd()  # 現在の作業ディレクトリを取得\nprint(f\"現在の作業ディレクトリ: {current_directory}\")\nconvert_directory_to_markdown(current_directory)    \n\n```\n※tesseractやPOPPLERは事前にダウンロード、インストールしておく必要あり。\n\n\n## 各コードごとの解説\n```python\nimport os\nfrom markitdown import MarkItDown\nfrom pdfminer.high_level import extract_text\nfrom pdf2image import convert_from_path\nimport pytesseract\nimport pandas as pd\nfrom docx import Document\n\npytesseract.pytesseract.tesseract_cmd = r\"<TESSERACT_PATH>\"\n\nmd_engine = MarkItDown()\n```\n\n冒頭では標準ライブラリと外部依存を読み込み、Tesseract OCR の実行ファイル位置をハードコードで指定し、MarkItDown のインスタンスを共有リソースとして生成する。ここで `<TESSERACT_PATH>` は筆者の場合、Windows環境だったのでシステムの環境変数にこちらのpathを追加した。\n\n```python\ndef save_md(path, content):\n    md_path = os.path.splitext(path)[0] + \".md\"\n    with open(md_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(content)\n    return md_path\n```\n\n`save_md` は変換済み Markdown を元ファイル名に拡張子 `.md` を付与した形で保存し、そのパスを返すユーティリティである。エンコーディングを UTF-8 に固定することで、LLM など後続システムとの互換性を担保する設計である。\n\n```python\ndef pdf_to_md(path):\n    text = extract_text(path)\n    if not text.strip():\n        pages = convert_from_path(\n            path,\n            dpi=300,\n            poppler_path=r\"<POPPLER_PATH>\"\n        )\n        text = \"\\n\\n\".join(\n            pytesseract.image_to_string(p, lang=\"jpn+eng\") for p in pages\n        )\n    return text\n```\n\n`pdf_to_md` は PDFMiner で抽出したテキストが空だった場合にのみ、Poppler を用いてページを画像へ変換し、日本語と英語の二言語 OCR を行う。画像化 PDF やスキャン PDF を包括的に取り扱えるようにするため、OCR 結果は Markdown への追加整形を行わずそのまま返している。`<POPPLER_PATH>` もtesseractのパスと同様、環境変数に追加。\n\n```python\ndef docx_to_md(path):\n    doc = Document(path)\n    text = \"\\n\".join(p.text for p in doc.paragraphs)\n    return md_engine.convert_text(text)\n```\n\nWord 文書は python-docx で段落ごとに抽出し、MarkItDown のシンプルなテキスト変換 API へ渡す。段落境界を改行で表現することで、元文書の構造を壊さずに Markdown へ落とし込む方針。\n\n```python\ndef excel_to_md(path):\n    dfs = []\n    try:\n        with pd.ExcelFile(path, engine=\"openpyxl\") as xls:\n            for name in xls.sheet_names:\n                df = xls.parse(name)\n                dfs.append(f\"### {name}\\n\" + df.to_markdown(index=False))\n    except Exception as e:\n        try:\n            with pd.ExcelFile(path, engine=\"xlrd\") as xls:\n                for name in xls.sheet_names:\n                    df = xls.parse(name)\n                    dfs.append(f\"### {name}\\n\" + df.to_markdown(index=False))\n        except Exception as e2:\n            return (\n                \"# Excel変換エラー\\n\\n\"\n                f\"ファイル: {path}\\n\"\n                \"エラー: openpyxlバージョン要件未満\"\n            )\n    return \"\\n\\n\".join(dfs)\n```\n\nExcel 変換では `openpyxl` と `xlrd` の二段構えで読み取りを試行し、各シートを Markdown テーブルへ変換して連結する。バージョン不整合や旧式 `.xls` を暗黙的に救済し、完全に失敗した場合は簡潔なエラーメッセージを返すことで、バッチ実行中の停止を防ぐ。\n\n```python\ndef convert_file_to_markdown(path):\n    ext = os.path.splitext(path)[1].lower()\n    skip_extensions = {\".csv\", \".md\", \".pyc\", \".log\", \".tmp\", \".ipynb\", \".json\"}\n    if ext in skip_extensions:\n        print(f\"スキップ: {path} (未対応形式)\")\n        return None\n\n    if ext == \".pdf\":\n        md = pdf_to_md(path)\n    elif ext == \".docx\":\n        md = docx_to_md(path)\n    elif ext in {\".xlsx\", \".xls\"}:\n        md = excel_to_md(path)\n    else:\n        try:\n            md = md_engine.convert(path).text_content\n        except Exception as e:\n            print(f\"変換失敗: {path} → {e}\")\n            return None\n    return save_md(path, md)\n```\n\n`convert_file_to_markdown` は拡張子に基づき処理関数を選択し、スキップ対象を事前に排除する。汎用処理に失敗した際も例外を握りつぶしてログだけ残し、パイプライン全体の連続性を保つ実装となっている。最終的に `save_md` へ渡し、生成ファイルのパスを返す仕組みである。\n\n```python\ndef convert_directory_to_markdown(dir_path):\n    for root, _, files in os.walk(dir_path):\n        for f in files:\n            try:\n                full_path = os.path.join(root, f)\n                result_path = convert_file_to_markdown(full_path)\n                if result_path:\n                    print(f\"成功: {f} → {result_path}\")\n            except Exception as e:\n                print(f\"失敗: {f} → {e}\")\n```\n\nディレクトリ変換関数は OS 依存の再帰探索で全ファイルを網羅し、個別変換の成否を逐次標準出力へ報告する。実運用ではこの関数を一度呼び出すだけで、ディレクトリツリー下に存在する PDF・Office・その他対応ファイルがすべて Markdown 化され、同階層に保存される。\n\n## 結果\n\nOCR を含めた前処理をスクリプトで組み込むことで、画像 PDF からもテキストを正確に抽出し、レイアウトの崩れを最小化できた。MarkItDown は Markdown 生成に専念させる形で安定した運用が可能になった。\nexcelでも試したが、特に問題なく出力ができた。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3535433/15f6f2f1-0bd4-479e-b742-af4c1368decb.png)\n\n\n## 考察\n\nMarkItDown は多形式変換のハブとしては有用だが、PDF など複雑な構造を含むファイルでは前処理の有無で出力品質が大きく変わる。自動化と正確性のバランスを取るためには、前処理を多段化し、外部ツールとの連携を前提にするのが現実解と言える。\n\n## 残課題\n\n* Poppler や Tesseract など外部バイナリのバージョン違いによるトラブルはゼロではない。\n* 大量ファイルを一括処理する場合の並列化やエラー監視など、運用の自動化度を上げる余地がある。（多すぎると処理しきれない恐れがあるから非同期バッチ処理が有効かもしれない。）\n\n## 関連リンク\nTesseract：https://github.com/UB-Mannheim/tesseract/wiki\nTesseract 日本語：https://github.com/tesseract-ocr/tessdata\n※日本語の場合は jpn.traineddata\n※日本語のPDFを読み取りたい場合はダウンロードした jpn.traineddata を\nTesseract の tessdata フォルダに置くだけ。\nPoppler：https://github.com/oschwartz10612/poppler-windows/releases/\n\n## 参考にした記事\nhttps://zenn.dev/torachi0401/articles/poppler_install\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-06-29T20:22:34+09:00",
        "group": null,
        "id": "96c36c3fc09b30761bff",
        "likes_count": 2,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 2,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "tesseract-ocr",
            "versions": []
          },
          {
            "name": "MarkItDown",
            "versions": []
          }
        ],
        "title": "Markitdownで取れないテキストをOCR機能を抽出しよう！！",
        "updated_at": "2025-06-29T20:22:34+09:00",
        "url": "https://qiita.com/makotodaxi5/items/96c36c3fc09b30761bff",
        "user": {
          "description": "",
          "facebook_id": "",
          "followees_count": 1,
          "followers_count": 0,
          "github_login_name": null,
          "id": "makotodaxi5",
          "items_count": 2,
          "linkedin_id": "",
          "location": "",
          "name": "獅堂 開",
          "organization": "",
          "permanent_id": 3535433,
          "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3535433/profile-images/1692457744",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7843538522720337,
        "quality_score": 21,
        "python_code_score": 5,
        "python_code_blocks": 8
      },
      {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:15\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n<p data-sourcepos=\"2:1-4:100\">今回初めてQiitaに投稿します。<br>\n理由はタイトルにも書きましたが、RAGを学んでコンペに参加しましたのでその備忘録と、<br>\n最後ゴールドは取れましたが11位と入賞（10位まで）に入れませんでした。</p>\n<p data-sourcepos=\"6:1-6:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4010716%2F881167b4-cda6-4737-b731-b245ebfc98a3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=896c0a24fc472d976ee6b111e158a261\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4010716%2F881167b4-cda6-4737-b731-b245ebfc98a3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=896c0a24fc472d976ee6b111e158a261\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4010716%2F881167b4-cda6-4737-b731-b245ebfc98a3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7443cccb0ea8333bd30d666114dcd762 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4010716/881167b4-cda6-4737-b731-b245ebfc98a3.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"8:1-8:138\">悔しかったので、何とか企業賞に滑り込めないだろうかとコンペ延長戦的な気持ちで書いております。</p>\n<p data-sourcepos=\"10:1-11:105\">※2025/2/15執筆時点では順位やメダルは暫定です。変更あり次第修正します。<br>\nまたタイトルがわかりやすいほうがいいとのことで大げさに書いております。</p>\n<p data-sourcepos=\"13:1-13:221\">そのため急遽Qiitaの登録を済ませ書いておりますので見にくい部分や、技術的な面よりブログ的な感想が多くなってしまっているかもしれませんがご了承ください。</p>\n<p data-sourcepos=\"15:1-18:32\">事前情報<br>\n・非エンジニア<br>\n・証券関連の仕事<br>\n・SIGNATEのコンペは3回目</p>\n<h2 data-sourcepos=\"21:1-21:24\">\n<span id=\"参加したコンペ\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F%E3%82%B3%E3%83%B3%E3%83%9A\"><i class=\"fa fa-link\"></i></a>参加したコンペ</h2>\n<p data-sourcepos=\"22:1-22:36\"><iframe id=\"qiita-embed-content__02ae4d8f61544e8bdd863be74bd8c158\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__02ae4d8f61544e8bdd863be74bd8c158\" data-content=\"https%3A%2F%2Fsignate.jp%2Fcompetitions%2F1515\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"24:1-24:11\">\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h1>\n<ol data-sourcepos=\"25:1-32:0\">\n<li data-sourcepos=\"25:1-25:28\"><strong>Retrieverについて</strong></li>\n<li data-sourcepos=\"26:1-26:25\"><strong>クエリの処理</strong></li>\n<li data-sourcepos=\"27:1-27:31\"><strong>PDFの処理について</strong></li>\n<li data-sourcepos=\"28:1-32:0\"><strong>プロンプトについて</strong></li>\n</ol>\n<h2 data-sourcepos=\"33:1-33:72\">\n<span id=\"ragコンペで学んだことretrieverとtextsplitterの重要性\" class=\"fragment\"></span><a href=\"#rag%E3%82%B3%E3%83%B3%E3%83%9A%E3%81%A7%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8retriever%E3%81%A8textsplitter%E3%81%AE%E9%87%8D%E8%A6%81%E6%80%A7\"><i class=\"fa fa-link\"></i></a>RAGコンペで学んだこと：RetrieverとTextSplitterの重要性</h2>\n<p data-sourcepos=\"34:1-34:569\">今年に入るまでRAGのことを知らず、このコンペで初めて触れました。過去2回のコンペ参加で表データやPandas、XGBoostなどの知識はそれなりに身につけたつもりでしたが、LLMなどはChatGPTやNLPとしてなんとなく理解している程度で詳しくはなく、コンペなどを見ていると生成AI関連やNLPなどが増えてきているのでどこかで取り組みたいなと思っていたので良い機会だと思い、このコンペが始まる直前くらいから調べ始めました。</p>\n<h3 data-sourcepos=\"36:1-36:34\">\n<span id=\"ragで重要なのはretriever\" class=\"fragment\"></span><a href=\"#rag%E3%81%A7%E9%87%8D%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%AFretriever\"><i class=\"fa fa-link\"></i></a>RAGで重要なのはRetriever</h3>\n<p data-sourcepos=\"37:1-37:159\">調べ始めた中でRAGで重要なのがRetrieverというのが出てきたのでいくつか調べ、今回のコンペでは以下を使用しました。</p>\n<p data-sourcepos=\"39:1-45:261\">ParentDocumentRetriever｜チャンクを親チャンク、子チャンクで二つ使用する<br>\nBM25Retriever｜単語の関連性？からの検索、ただ日本語対応してないので要処理<br>\nTFIDFRetriever｜単語の”レア度”からの検索、こちらもMeCabでの処理が必要<br>\nEnsembleRetriever｜それぞれのRetrieverをアンサンブルするもの<br>\nContextualCompressionRetriever｜ReRANKするための<br>\nConversationalRetrievalChain｜retrieverではないですが参考に<br>\n基本的にはハイブリッド検索として「セマンティック検索（ベクトル検索）」と「キーワード検索」の組み合わせが良いとのことでそれをベースにしました。結論を先に書くと今回は最終的には</p>\n<p data-sourcepos=\"47:1-51:257\">ParentDocumentRetriever k=10 ：0.4<br>\nBM25Retriever_2048チャンク k=10 ：0.2<br>\nBM25Retriever_512チャンク k=10 ：0.2<br>\nTFIDFRetriever k=10 ：0.2<br>\nでアンサンブル（k=20くらいで幅広く抽出）したあとContextualCompressionRetriever k=10 でReRANKしたものを最終的なRetrieverにしました。ConversationalRetrievalChainは考え方は採用し、直接は使用してません。</p>\n<h4 data-sourcepos=\"55:1-55:32\">\n<span id=\"セマンティック検索\" class=\"fragment\"></span><a href=\"#%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E6%A4%9C%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>セマンティック検索</h4>\n<p data-sourcepos=\"56:1-57:586\">まずベクトル検索用のRetrieverですが、基本的なretrieverだけだとチャンク数など悩みが出てくるので1の「ParentDocumentRetriever」を採用しました。こちらは親チャンク（例2048）と子チャンク（例512）など二つのチャンクを用意して、子チャンクで文章のベクトルの近さを探しながらヒットした子チャンクの親チャンクを返すというものらしいです。Retrieverのポイントとしていかに該当する文章を検索してその文章の必要な部分をもれなく拾ってくるかが重要なのでそれが工夫されているのだと思います。<br>\n後述しますが、その点はすごい重要なのでコンペ自体では別の工夫を入れるようにしてます。また2000文字（トークン）、500文字（トークン）でもいいのですが、何かの論文か記事で512などの2の倍数のほうがベクトル化でよい成績が出たと見かけたのでお守り程度に2048、1024、512などで試しました。この辺りも英語直接でしたら影響しそうですが、日本語だし、トークン判定されるときにずれそうだからどこまで効果あるかは不明です。</p>\n<h4 data-sourcepos=\"60:1-60:26\">\n<span id=\"キーワード検索\" class=\"fragment\"></span><a href=\"#%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E6%A4%9C%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>キーワード検索</h4>\n<p data-sourcepos=\"61:1-61:799\">BM25Retrieverが日本語に対応していないとのことではじめかなり苦労しました。いくつかの記事を調べ、MeCabで形態素解析して単語を分解してやる必要があります。TFIDFRetrieverも同様でこちらもMeCabを使用しました。私のやり方が悪いのか、BM25はいろいろ組み合わせですがTFIDFはすっきりしたコードでできました。またBM25はチャンクサイズがかかわるようなのでParentDocumentRetrieverに合わせて2048と512別々で作成しました。TFIDはレア度を測定するためなのかチャンク数が関係ないようなのか1つだけの作成です。今回質問から適切なチャンクを拾ってこれるかをそれぞれ調べていた際に正解率としては、</p>\n<p data-sourcepos=\"63:1-66:285\">ParentDocumentRetriever ＞ 7割<br>\nBM25Retriever ＞ 6割<br>\nTFIDFRetriever ＞ 6割<br>\nという感じでした。BM25はチャンク数で得な問題、不得意な問題があり、2つ組み合わせたほうがいいと感じました。総合的には512、2048も同じくらいだったと思うのでどちらかに絞るより組み合わせだと思います。</p>\n<h4 data-sourcepos=\"70:1-70:17\">\n<span id=\"textsplitter\" class=\"fragment\"></span><a href=\"#textsplitter\"><i class=\"fa fa-link\"></i></a>TextSplitter</h4>\n<p data-sourcepos=\"71:1-71:336\">Retrieverと同じくらい重要（Retrieverとセット？）なのが「TextSplitter」とのことです。Retriever自体が分割した文章をもとに検索を行うのでそのように分割されているかは重要というのは感覚的にもわかります。TextSplitterで代表的なのが以下とのことです。</p>\n<p data-sourcepos=\"73:1-78:747\">CharacterTextSplitter｜単純に〇〇文字で分割｜<br>\nMarkdownTextSplitter｜マークダウンに従って分割｜<br>\nNLTKTextSplitter｜Pythonで英語による自然言語処理をする上で役に立つNLTKで分割｜<br>\nSpacyTextSplitter｜SpaCyは、PythonでNLPを行うための強力なライブラリ｜<br>\nRecursiveCharacterTextSplitter｜再帰的チャンキング｜<br>\n出来れば単純に〇〇文字と一律的に分割するのではなく、段落や章など意味のあるところで切ったほうが検索の際も役立ちます。今回はRetrieverが拾ってきたものを別処理するようにしてますので、RecursiveCharacterTextSplitterをベースに活用してます。でもほんとはマークダウンとか意味のあるとこで分割したほうがいいと思います。ただ今回はコンペで他にやらないといけないことが多かったのと、後処理の工夫でそこまでTextSplitterで差が出ないかなと思いほかに時間かけることにしました。（PDF処理のほうが大変で手が回らなかったというのが感想です。）</p>\n<p data-sourcepos=\"80:1-81:55\">参考にしたサイト<br>\n<a href=\"https://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f</a></p>\n<h2 data-sourcepos=\"85:1-85:21\">\n<span id=\"クエリの処理\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>クエリの処理</h2>\n<p data-sourcepos=\"87:1-87:219\">上記でRetrieverができましたが、そのままクエリ（質問）で検索してもそれぞれ６～７割の正解率（答えを導き出せるチャンクを返してくれる）という感じでした。</p>\n<p data-sourcepos=\"89:1-90:123\">そのため、クエリを処理する必要があります。<br>\nクエリを別の言葉に言い換えるなどです。今回クエリの処理には以下の方法を試しました。</p>\n<p data-sourcepos=\"92:1-97:57\">１．クエリの言いかえ（内容・答えが変わらないように）を３つ作成<br>\n２．クエリを無理やり３つの文章に分割（言い換えるのではなく因数分解のように分ける）<br>\n３．クエリを回答するにあたり必要な手順をLLMに考えさせる。<br>\n４．必要な参照部分を一旦、答えさせる。<br>\n５．クエリ回答のプロンプトをLLMに作成させる。<br>\n６．クエリに工夫なしでLLMに答えさせる。</p>\n<p data-sourcepos=\"100:1-100:96\">１については以下のようなプロンプトでLLMに言い換えを指示しました。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"101:1-135:3\"><div class=\"highlight\"><pre><code>query_prompt = f\"\"\"\nあなたは高度な自然言語処理と情報検索の専門家です。企業のESGレポートや統合報告書に関連する質問を、文書検索システムでの検索効率と回答精度を高めるように「答え」が変わらないように質問を変えてください。\n\n## 元の質問\n{question}\n\n## 質問の内容\n1.日本の企業に関する質問です。\n2.各企業が出している資料を参照に答えます。\n3.参照する資料は以下のものです。\n- 統合報告書\n- 統合レポート\n- ステナビリティデータブック\n- \n## 指示\n絶対にハルシネーションを避けてください。\n文章を変えた質問を３つ作成してください。\n元の質問と答えが変わってしまう質問を作成するとペナルティです。\n出力形式以外の質問を作成するとペナルティです。\n\n## ヒント\n四捨五入の指示がある場合は間違えないように気を付ける。\n海外・国内の違いによく注意する。\n社内・社外の違いにはよく注意する。\n常勤・非常勤の違いにはよく注意する\n数字を扱う場合単位には気を付けてください。\n\n## 出力形式\n質問１：\n質問２：\n質問３：\n\n\"\"\"\n</code></pre></div></div>\n<p data-sourcepos=\"137:1-138:219\">言い換えた質問を組み合わせてRetrieverに検索させることで検索の精度を高めることができるようです。<br>\nただLLMが結構違う意味の質問に変えてしまっている場合もあり、あくまで検索用ですが、多用すると無駄なチャンクを拾ってきてしまう可能性があると思います。</p>\n<p data-sourcepos=\"140:1-141:178\">「２．クエリを無理やり３つの文章に分割（言い換えるのではなく因数分解のように分ける）」も同じような感じで文章を作成させます。<br>\nただ１では、３つのそれぞれ同じ意味を持つクエリができますが、2番目は３つ（複数）合わせて元のクエリと同じ意味を成します。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"142:1-161:3\"><div class=\"highlight\"><pre><code>あなたは高度な自然言語処理と情報検索の専門家です。与えられた質問を正しく理解するため説明してください。\n\n## 最終指示\n絶対にハルシネーションを避けてください。\n対象の質問を理解するためいくつかの要素に分けてください。\n分けた要素を分かりやすく説明してください。\n分けた要素から対象の質問の理解が深まるようにしてください。\n順番を問う質問は対象の範囲を確認する。\n比較を問う質問は比べる対象を確認する。\n\n## 出力形式\n回答の仕方は以下です。\n要素１：\n要素１の説明：\n要素２：\n要素２の説明：\n要素３：\n要素３の説明：\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"163:1-183:3\"><div class=\"highlight\"><pre><code>あなたは高度な自然言語処理と情報検索の専門家です。与えられた質問を正しく理解し回答を導き出す手順を教えてください\n\n## 対象の質問\n{query}\n\n## 質問の内容\n1.質問に答える必要がります。\n2.質問を理解するために補足説明があります。\n3.質問に回答するため参照する資料は以下のものです。\n- 統合報告書\n- 統合レポート\n- ステナビリティデータブック\n\n## 指示\n補足質問の内容を理解し、どのような手順を踏めばいいかわかりやすく説明してください。\n計算問題が含まれる場合は計算方法を教えてください。\n質問に答えるために複数の情報が必要な場合はどのような情報を取得する必要があるか明確にしてください。\n手順だけを考え、外部の情報を参照するとペナルティです。\n手順だけを考え、答えまで出すとペナルティです。\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"186:1-206:3\"><div class=\"highlight\"><pre><code>あなたのタスクは企業のESGレポートや統合報告書に関連する質問に対して、参照する文章を見つけ出すことです。\n\n## 指示\n- 質問に答えるために必要な文章を探してください。\n- 質問に答えるための方法は回答手順を参考にしてください。\n- 参照する文章は変更せずそのままに抜き出してください。\n- 複数の文章を参照とした場合は複数の文章を提示してください。\n\n## 質問\n{question}\n## 回答手順\n{direction}\n## コンテキスト\n{context}\n\n## 出力形式\n参照となる文章：\n\n\"\"\"\n</code></pre></div></div>\n<p data-sourcepos=\"207:1-208:54\">シンプルに答えをまず出してもらう。<br>\n分からない場合、アドバイスをもらう。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"210:1-224:3\"><div class=\"highlight\"><pre><code>あなたのタスクは企業のESGレポートや統合報告書に関連する質問に対して、文書検索システムで得たコンテキストを参考に自然言語で40トークン以内で正確に回答することです。\n\n## 制約\n- コンテキスト以外からは回答しないでください。\n- コンテキストに回答が含まれない場合、「分かりません」と答えたうえでどんなことを探したらいいかアドバイスをください。\n- アドバイスする場合は検索しやすい単語などを指摘してください。\n\n\n## 質問\n{question}\n\n## コンテキスト\n{context}\n</code></pre></div></div>\n<h3 data-sourcepos=\"227:1-227:64\">\n<span id=\"クエリの処理retrieverの評価rerank\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E5%87%A6%E7%90%86retriever%E3%81%AE%E8%A9%95%E4%BE%A1rerank\"><i class=\"fa fa-link\"></i></a>クエリの処理　＆　Retrieverの評価　＆　ReRANK</h3>\n<p data-sourcepos=\"229:1-229:263\">いくつかパターンを変えながら１つのクエリに対して、10くらいのsub queryを作成してpandasのデータフレームに格納して複数のRetrieverでどれくらい元のクエリに比べ精度が上がったか検証しました。</p>\n<p data-sourcepos=\"231:1-231:164\"><strong>結果的には最後の「元クエリ」＋「シンプル回答 or わからない場合アドバイス」で検索するのが精度が良かったです。</strong></p>\n<p data-sourcepos=\"233:1-233:260\">大体正しいコンテキストを95%くらいで拾ってくるイメージでした。（問95の難問や複数のページを拾ってこないと答えれない問題もありましたので制度的にはほぼ目標達成している感じです。）</p>\n<h3 data-sourcepos=\"236:1-236:13\">\n<span id=\"失敗談\" class=\"fragment\"></span><a href=\"#%E5%A4%B1%E6%95%97%E8%AB%87\"><i class=\"fa fa-link\"></i></a>失敗談</h3>\n<p data-sourcepos=\"238:1-238:351\">最終的には上記の方法で行いましたが、途中の試行錯誤としては、10個くらいに複製させたクエリをそれぞれのRetriever（PD、BA25, TFIDF）で検索し、上位に挙がってきた順でポイントを振り、最終的にポイントで並べなおすというのもしました。（ReRANKの自己処理）</p>\n<p data-sourcepos=\"240:1-240:387\">ただRetrieverごとに違う要素がありうまくはまって正しいコンテキストが上位に並びなおされる場合もあれば、言い換え時点で全く違う質問になったうえで関係ないコンテキストを拾ってきて、逆に精度を落としてしまっている質問もあったりとReRANKするにも一筋縄ではいかなかったです。</p>\n<p data-sourcepos=\"242:1-242:135\">そのため最終的にはReEANKについてはこちらを使ったほうが手間がなくそこそこいい結果が出ました。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"244:1-258:3\"><div class=\"highlight\"><pre><code>from langchain.retrievers import EnsembleRetriever\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.retrievers import ContextualCompressionRetriever\nfrom langchain.retrievers.document_compressors import LLMChainExtractor\nfrom langchain.retrievers.document_compressors import LLMListwiseRerank\nfrom langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)\n\nensemble_retriever = EnsembleRetriever( retrievers=[pd_retriever, retriever_bm_parent, retriever_bm_child, tfidf_retriever], weights=[0.4, 0.2, 0.2, 0.2],  k=20)\ncompressor = LLMListwiseRerank.from_llm(llm, top_n=10)\ncompression_retriever = ContextualCompressionRetriever(base_compressor=compressor, base_retriever=ensemble_retriever)\n\n</code></pre></div></div>\n<h2 data-sourcepos=\"259:1-259:30\">\n<span id=\"retrieverの大幅修正\" class=\"fragment\"></span><a href=\"#retriever%E3%81%AE%E5%A4%A7%E5%B9%85%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>Retriever　の大幅修正</h2>\n<p data-sourcepos=\"261:1-262:159\">実はRetrieverに関して最終的には大きな変更を加えています。<br>\n変更といってもベースの仕組みは上記に記載の通りなのですが、変えたのが読み込ませるコンテキストを変えました。</p>\n<p data-sourcepos=\"264:1-274:189\">初めは課題となっているレポートPDFを全て読み込ませてRetrieverを作成していたのですが、どうしても間違いコンテキストが含まれて精度が上がらなかったです。<br>\n<br><br>\nそこで出来るだけ不純物のないRetrieverを作成したいと考え、結論的には19のPDFをそれぞれのRetrieverを作成し、問題にそって正しいRetrieverを選択するモデルにしました。<br>\n（最終的には19×５個のRetrieverを作成）<br>\n<br><br>\nそのほうが精度も上がってLLMの間違いも減りました。<br>\nただこの方法は今回の質問が複数企業（複数PDF）にまたぐものがなかったからできたのだと思います。<br>\n例えば「ハウス食品と日産の従業員はどちらが多いか？」<br>\nなどの質問があれば今回の方法は取れなかった、もしくは複数のRetrieverを選定して両方からコンテキストを引っ張ってくるなどの必要があったかもしれません。<br>\nただ今回は質問ごとに明確に参考にするPDFが違ったことなど、質問で明確にRetrieverを指定できるなら出来るだけ分割して正しいRetrieverを検索できるようにしたほうがいいかと思います。<br>\nなにかに「ごみを入れてもゴミが出てくるだけ」とありましたが、Retrieverに不要な情報が多くなるのも精度を下げる原因になると思います。</p>\n<p data-sourcepos=\"276:1-278:288\">※あくまで個人的感想です。<br>\n<br><br>\n特に企業毎のデータを調べるのであれば、証券コードなど明確に指定できるので有用かもしれません。社内情報で人事や庶務いろいろな書類を参照しないといけないなどの場合はまた別の工夫が必要かと思います。</p>\n<h2 data-sourcepos=\"285:1-285:24\">\n<span id=\"pdf処理について\" class=\"fragment\"></span><a href=\"#pdf%E5%87%A6%E7%90%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>PDF処理について</h2>\n<p data-sourcepos=\"287:1-289:108\">今回のコンペのキモはこのPDFの処理をいかに正確にできるかだったと思います。<br>\n実際この処理にコンペ期間中　6割くらいの時間を費やしました。<br>\n普段テーブルデータしか触ったことない身としては、ここに悪戦苦闘しました。</p>\n<p data-sourcepos=\"291:1-293:4\">その意味でも失敗したことも含めて、取り組んだ順に紹介していこうと思います。<br>\nここまで長々と書いてしまい見にくいページが出来上がりますが、初投稿ということでとりあえずこのままチャレンジしてみようと思います。<br>\n<br></p>\n<h3 data-sourcepos=\"295:1-295:15\">\n<span id=\"pdf-難所\" class=\"fragment\"></span><a href=\"#pdf-%E9%9B%A3%E6%89%80\"><i class=\"fa fa-link\"></i></a>PDF 難所</h3>\n<p data-sourcepos=\"296:1-296:105\">いまだPDFをNLP的に処理しやすいツールがない。（なくはないが簡単じゃない）</p>\n<p data-sourcepos=\"298:1-299:105\">これだけAI OCRや技術が進化しているのに人間がぱっと認識できるレベルでPDFをテキスト化してくれるツールが全然見当たらなかったです。<br>\n特にAPI接続なしのライブラリで完璧なものは見当たらず、工夫が必要でした。</p>\n<h3 data-sourcepos=\"302:1-302:37\">\n<span id=\"pdfリーダーローダー\" class=\"fragment\"></span><a href=\"#pdf%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%80%E3%83%BC\"><i class=\"fa fa-link\"></i></a>PDFリーダー（ローダー）</h3>\n<p data-sourcepos=\"304:1-308:100\">まずPDFをLLMが認識できるようにするには処理が必要です。<br>\nそのためのライブラリ・方法は多くありますが考えるうえで大きな選択肢が２つです。<br>\n<br><br>\n<strong>１．費用なしのライブラリを使う</strong><br>\n<strong>２．コストがかかるがAPI接続等でLLMモデルやAI OCRの高性能なものを使う</strong></p>\n<br>\nこれは大きな違いで誰でも無駄な費用はかけたくないですから、通常であれば１の選択肢になると思います。\nただ結果、今回も最終的には２の方法をとりましたので無駄な手間をかけたくない、企業でお金がある等であれば初めから２の方法をとったほうがいいと思います。\n<br>\n<p data-sourcepos=\"316:1-318:180\">先に２のツールを費用感を書いておくと、<br>\nツールは今回「Azure AI Document Intelligence」を使用しました。<br>\n費用はたぶん初めの失敗やテストなど含め30～40個のPDF（ページで3000ページくらい）を読み込ませましたが請求金額は4000円程度です。</p>\n<br>\nただこちら初めての登録の場合200ドル（約3万円）の無料クレジットがつくので実質費用は掛かってません。\n無料クレジットがなかったら使ったか微妙ですが性能は１のライブラリに比べて段違いです。最終的にはAzureで取得したデータしか使ってないです。\n<p data-sourcepos=\"325:1-325:111\">手っ取り早く試してみたいなら１、正確さを求めるなら２という感じでしょうか。</p>\n<h2 data-sourcepos=\"328:1-328:33\">\n<span id=\"pdfライブラリについて\" class=\"fragment\"></span><a href=\"#pdf%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>PDFライブラリについて</h2>\n<p data-sourcepos=\"330:1-331:108\">初めはできるだけコスト掛けないようにPDFを読み込めるライブラリから始めました。<br>\n調べていくとPDFライブラリだけでかなりあり、それぞれ精度や特徴があります。</p>\n<p data-sourcepos=\"333:1-333:24\">調べたライブラリ</p>\n<p data-sourcepos=\"335:1-347:12\">・pymupdf4llm<br>\n・pdfplumber<br>\n・PDFPlumberLoader<br>\n・PyPDFium2Loader<br>\n・pdfminer<br>\n・PyMuPDF<br>\n・pypdf<br>\n・PDFMinerPDFasHTMLLoader<br>\n・PyPDFDirectoryLoader<br>\n・UnstructuredFileLoader<br>\n・MathpixPDFLoader<br>\n・easyocr<br>\n・pdf spire</p>\n<p data-sourcepos=\"349:1-350:90\">だいたいが　langchain_community.document_loaders　に入っているのでそちらから検索して用途や特徴を調べたほうがいいと思います。なんでこんなに調べたかというと一発でうまくPDFの文章を抽出してくれなかったからです。<br>\nとくに日本語というのがハードルが上がっているのだと思います。</p>\n<h3 data-sourcepos=\"352:1-352:15\">\n<span id=\"pymupdf4llm\" class=\"fragment\"></span><a href=\"#pymupdf4llm\"><i class=\"fa fa-link\"></i></a>pymupdf4llm</h3>\n<p data-sourcepos=\"353:1-354:274\">こちらはLLMでの処理を前提としているのかマークダウンでの抜き出しなどLLM,RAGに対応するように改良がされたものらしくてかなり精度はよく表なども正確に抜き出すことが多かったです。<br>\nただ後ほど触れますが見開き問題として横ページで段落が横に２つ、３つ並んでいると一番左の段落の１行目の次のテキストが真ん中の段落の1行目につながるなど段落が横並びの際に誤抽出があります。</p>\n<p data-sourcepos=\"356:1-357:186\">ただ難点は処理速度が遅いということです。大体、１PDFを処理するのに1～2分かかります。他のが１秒～数十秒くらいなのに比べて１０倍くらいのイメージです。<br>\n今回大きな演算処理がないので基本CPUで処理していましたのでGPUで行えば気にならないかもしれませんが他に比べてかなり遅い印象です。</p>\n<h3 data-sourcepos=\"359:1-359:11\">\n<span id=\"pymupdf\" class=\"fragment\"></span><a href=\"#pymupdf\"><i class=\"fa fa-link\"></i></a>PyMuPDF</h3>\n<p data-sourcepos=\"360:1-363:147\">こちらは一番ベースのライブラリというイメージです。処理も早いですし、精度もそこそこいいです。<br>\nオプションで変えれる設定も多く段落の判定も文字の何倍に指定するかなど返れました。<br>\nその辺をうまく調整すれば同じレイアウトの文章には強力になるかもしれません。<br>\n処理的にもまずこちらを試してみてうまく抽出できていなければ上にするというのがいいかもしれないです。</p>\n<h3 data-sourcepos=\"365:1-365:9\">\n<span id=\"spire\" class=\"fragment\"></span><a href=\"#spire\"><i class=\"fa fa-link\"></i></a>spire</h3>\n<p data-sourcepos=\"366:1-368:150\">基本は上の２つの使い分けでいい気がしますが、特徴があるのでこちらも触れておきます。<br>\nこちらは抽出するときにそのままのレイアウトで抽出してくれます。<br>\nそのままというのはあえて段落のつながりなど判断せず文章がない部分はそのまま空白で置き換えてくれます。</p>\n<p data-sourcepos=\"370:1-372:195\">その分、文章のつながりはおかしくなりますがprintで表示したときは原本の見た目に忠実に表現できます。<br>\nその意味でもこのライブラリを使って基本文字データだけにして、それをもう一度PDF化してほかのライブラリに読ませるのはどうかと考えていました。<br>\n１ページごと再度PDFにしてほかに読ませるという手間で断念しましたがもしかしたら文章だけであればうまくいったのではないかと思ってます。</p>\n<p data-sourcepos=\"374:1-374:186\">ほかも試しましたがそもそも日本語対応してなさそうなものなどもあり、基本は上の組み合わせで行こうというのがベースになりました。</p>\n<h3 data-sourcepos=\"377:1-377:54\">\n<span id=\"見開き問題-pdf分割でragの精度向上\" class=\"fragment\"></span><a href=\"#%E8%A6%8B%E9%96%8B%E3%81%8D%E5%95%8F%E9%A1%8C-pdf%E5%88%86%E5%89%B2%E3%81%A7rag%E3%81%AE%E7%B2%BE%E5%BA%A6%E5%90%91%E4%B8%8A\"><i class=\"fa fa-link\"></i></a>見開き問題 :PDF分割でRAGの精度向上！</h3>\n<p data-sourcepos=\"378:1-379:209\">同じページに段落が横並びであると、隣り合う段落が繋がってしまう現象、ありますよね。<br>\n特に見開きのページでよく起こるのですが、今回扱ったPDFの半分くらいが1ページ目は表紙でA4縦、2ページ目以降がA3横（A4縦の横並び）という構成でした。</p>\n<p data-sourcepos=\"381:1-381:340\">このように縦横が混在していると、たまに見開きでも1ページに丸ごと表や絵などが載っている部分もあり、一律的な処理が難しく、テキスト抽出にも誤りが生じていることが確認できました。（コンテキストと原本を照らし合わせる根気のいる作業…）</p>\n<p data-sourcepos=\"383:1-386:141\">どうしようか悩んだ結果、思い切ってPDFを分割するようにしました。<br>\n特にA4縦は分割してしまうとおかしくなることがあるので横ページ（縦のインチより横のインチが大きい）場合のみPDFのページを分割するようにしました。<br>\n結果コンテキストの抽出で精度が上がるページが増えました。<br>\n中には見開きで左、真ん中、右と３段落構成にしているレイアウトもあったので３分割も作成しました。</p>\n<p data-sourcepos=\"389:1-395:36\">流れは<br>\n１．PDFをそれぞれ1ページごと読み取り<br>\n２．メタデータを格納<br>\n３．横ページであればPDFを2分割<br>\n４．横分割したページを読み取り<br>\n５．で保存したメタデータを紐づけ かつ分割した要素をメタデータに追加<br>\n６．3～5を3分割で繰り返し</p>\n<h4 data-sourcepos=\"397:1-397:47\">\n<span id=\"分割によるデータ増大と後処理\" class=\"fragment\"></span><a href=\"#%E5%88%86%E5%89%B2%E3%81%AB%E3%82%88%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E5%A2%97%E5%A4%A7%E3%81%A8%E5%BE%8C%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>分割によるデータ増大と後処理</h4>\n<p data-sourcepos=\"398:1-398:331\">こうすることで少なくとも原本、2分割、3分割のどこかで正しい段落でのテキスト抽出ができるようになりました。ただ、これだとデータが約3倍に膨れますし、集計問題などは3倍の数をカウントしてしまうようになりますので後処理が必要です。</p>\n<p data-sourcepos=\"401:1-401:370\">PDFリーダーについても、Retrieverには全モデル入れて、引っかかってくるページを選定して最終的には1つのライブラリのコンテキストだけにソートし直すというのを考えていました。ただ、上記でいったようにAPIを使うように変更したのでこの辺の処理は未実行となりました。</p>\n<h4 data-sourcepos=\"403:1-403:35\">\n<span id=\"コンテキストの再構築\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AE%E5%86%8D%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>コンテキストの再構築</h4>\n<p data-sourcepos=\"404:1-404:451\">これはAzureでも行っているのですが、コンテキストには正しく読み取れていないものもあるので、いくつかの方法でコンテキスト化して、上位に引っかかったページから再度コンテキストを作成するようにしています。コンテキストにIDが振られてその前後のコンテキストをLLMに与えるというのがあったのですが、それを拡大しました。</p>\n<p data-sourcepos=\"406:1-406:429\">LLMの性能が上がり入力コンテキストが100万トークンなどもできる中でコンテキストを過度に少なくする必要はないかと思ってます。ただ、10万トークンとか入れたら小説1冊分とかになるのでどうしても情報が薄まって適切な答えが出ないです。（もしかしたらもう少し性能が上がれば解決することかもしれませんが。）</p>\n<p data-sourcepos=\"408:1-408:45\">今回でいえばレポートの性質上、</p>\n<p data-sourcepos=\"410:1-413:189\">・1ページごとに内容が完結している<br>\n・ページごとで順序だって内容が関連している<br>\n・ページごとのコンテキストを順番通り渡したほうが正しく判断できる<br>\nと思ってまず該当ページに当たりをつけてそのページ（一部オーバーラップで前後のページも含め）の情報をすべてLLMに渡すとしています。</p>\n<p data-sourcepos=\"415:1-415:308\">Retrieverのコンテキストだけで渡すと関連性の高い順で並んでいるので、該当箇所のコンテキスト、1つ前のコンテキスト、2つ後ろのコンテキストなどの順番で渡すこともあり人間でも文脈判断しづらくLLMが混乱するかと思います。</p>\n<h4 data-sourcepos=\"417:1-417:35\">\n<span id=\"メタデータとpdfの分析\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%82%BF%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8pdf%E3%81%AE%E5%88%86%E6%9E%90\"><i class=\"fa fa-link\"></i></a>メタデータとPDFの分析</h4>\n<p data-sourcepos=\"418:1-418:201\">いくつかのライブラリは自動的にメタデータを付けてくれます。ただそれだけでは不足するデータもありますので個別にメタデータを追加しました。</p>\n<p data-sourcepos=\"420:1-420:282\">メタデータを追加するにあたり、企業名、レポート名、レポートの概要を入れてRetrieverでヒットしやすくしようと考えました。（最終的に企業別にしたのでレポート名とレポートの概要はいらなかったです。）</p>\n<p data-sourcepos=\"422:1-422:714\">手動でのタグ付けは禁止されてましたのでLLMにさせました。19個のPDFを読み取ったデータの10ページくらい（節約のため）をコンテキストとして企業名とレポート名、要約を答えさせるようにしました。PDFの冒頭10ページには何度も企業名がありますからさすがにこのレベルを間違えるほどではなかったです。もちろん上場の3000社とかになれば似た名前の会社などありますから工夫が必要だったかもしれないです。またこのメタ情報を参考に質問ごとの該当の企業名を答えさせると、参照すべきPDFは問95以外は100％の回答率でした。</p>\n<p data-sourcepos=\"424:1-424:207\">追加の仕方は辞書と同じなので簡単ですが、英語的には作成者がauthor レポート名がtitleとするようです。PDFリーダーのライブラリ名も追加しておきます。</p>\n<p data-sourcepos=\"426:1-426:255\">メタデータに入れておくことで最後コンテキストを再検索するときに簡単にできます。ソート検索ができますのでPDF名、PDFリーダー名、ページで該当コンテキストを再帰的に取得できます。</p>\n<h2 data-sourcepos=\"430:1-430:52\">\n<span id=\"azure-ai-document-intelligence-でrag精度向上\" class=\"fragment\"></span><a href=\"#azure-ai-document-intelligence-%E3%81%A7rag%E7%B2%BE%E5%BA%A6%E5%90%91%E4%B8%8A\"><i class=\"fa fa-link\"></i></a>Azure AI Document Intelligence でRAG精度向上</h2>\n<p data-sourcepos=\"431:1-431:86\">このままでは限界を感じて、Azureを使ってみることにしました。</p>\n<p data-sourcepos=\"434:1-434:173\">Azureは情報量が段違いに多く、レイアウトからしっかり分析して位置情報なども出してくれるので、後々の処理に役立ちました。</p>\n<h4 data-sourcepos=\"437:1-437:44\">\n<span id=\"自動マークダウン変換と課題\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%8B%95%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%80%E3%82%A6%E3%83%B3%E5%A4%89%E6%8F%9B%E3%81%A8%E8%AA%B2%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>自動マークダウン変換と課題</h4>\n<p data-sourcepos=\"438:1-438:501\">自動的にマークダウン方式にしてくれるのでチャンク化も簡単です。初めはこちらのデータを用いていましたが、簡単にマークダウン化してくれるものの、たまに段落の読み取りが間違えていたり、表データやグラフデータの読み取りができていないところがあります。イメージとしては、全体で90～95％正しいという感じです。グラフや表に限ると6～7割のイメージです。</p>\n<h4 data-sourcepos=\"440:1-440:34\">\n<span id=\"azureの追加情報と活用\" class=\"fragment\"></span><a href=\"#azure%E3%81%AE%E8%BF%BD%E5%8A%A0%E6%83%85%E5%A0%B1%E3%81%A8%E6%B4%BB%E7%94%A8\"><i class=\"fa fa-link\"></i></a>Azureの追加情報と活用</h4>\n<p data-sourcepos=\"441:1-441:278\">グラフや表に限界を感じてAzureにしたので、このマークダウン化そのままではそこまで精度は上がりませんでした。特にマークダウン化だとそれぞれのページのメタデータがありません。それも問題でした。</p>\n<p data-sourcepos=\"443:1-443:80\">ただ、Azureは別途、以下の項目のデータを返してくれます。</p>\n<p data-sourcepos=\"445:1-449:28\">sections：パラグラフをまとめかたまり<br>\nparagraphs：構成的に一番小さい（下層）の情報<br>\npage：ページごとの含まれるパラグラフなど<br>\ntables：表（テーブル）データを格納<br>\nfigures：図や絵を格納</p>\n<h4 data-sourcepos=\"452:1-452:38\">\n<span id=\"パラグラフドキュメント\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%83%A9%E3%82%B0%E3%83%A9%E3%83%95%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>パラグラフドキュメント</h4>\n<p data-sourcepos=\"453:1-453:117\">パラグラフをすべて抽出し、ページのメタデータを持つパラグラフドキュメントの作成</p>\n<h4 data-sourcepos=\"454:1-454:35\">\n<span id=\"テーブルドキュメント\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>テーブルドキュメント</h4>\n<p data-sourcepos=\"455:1-455:328\">テーブルデータを抽出し、pandas DFに格納し、表のタイトル（coution）がある場合は紐づけ、ない場合は一つ上のパラグラフをタイトルが代わりにする。パラグラフドキュメントからテーブルデータの部分を置き換えしテーブルドキュメントの作成</p>\n<h4 data-sourcepos=\"456:1-456:38\">\n<span id=\"フィギュアドキュメント\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A3%E3%82%AE%E3%83%A5%E3%82%A2%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>フィギュアドキュメント</h4>\n<p data-sourcepos=\"457:1-459:273\">フィギュアデータを抽出し、ポリゴンデータ（ページの位置情報）pandas DFに格納。<br>\nAzureのデータの構成を読み取るのとそれを使いやすいように処理するのが結構手間でした。ただ、処理したデータはかなり精度が上がって基本的には正しくLLMに渡せば正しく答えてくれるようになりました。<br>\n<strong>特にAzureのフィギュアのデータだけだとタイトルがついていない場合があり、何のグラフかわからないことが多いので一度その領域を切り出し、タイトルと注釈を加えた画像を作り、別保存しました。</strong></p>\n<p data-sourcepos=\"463:1-464:53\">参考にした記事<br>\n<a href=\"https://qiita.com/nohanaga/items/1263f4a6bc909b6524c8\" class=\"autolink\" id=\"reference-67bb58c64e51afb51563\">https://qiita.com/nohanaga/items/1263f4a6bc909b6524c8</a></p>\n<p data-sourcepos=\"466:1-467:51\">テーブルなどは上記のサイトを参考で崇徳出来ると思うので図の取得のコード載せておきます。<br>\nフィギュアのデータをデータベース化</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"468:1-551:3\"><div class=\"highlight\"><pre><code>AzureAIDI_documents_path = \"Azure AI Document Intelligenceで読み取ったデータを１９個保存\"\npdf_num ='PDFファイルを１～１９でナンバリング'\n\nfigures_df = pd.DataFrame(columns=['pdf_num', 'idx', 'pageNumber', 'polygon', 'paragraphs', 'caption',  'caption_polygon', 'caption_paragraphs', 'footnotes', 'footnotes_polygon', 'footnotes_paragraphs'])\nfor pdf_num, path in tqdm(enumerate(AzureAIDI_documents_path)):\n    f = open(path,\"rb\")\n    docs=pickle.load(f)\n\n\n    if docs[0].metadata['figures']:\n        for idx, figure in enumerate(docs[0].metadata['figures']):\n            pageNumber = ''\n            polygon = ''\n            paragraphs = []\n            caption = ''\n            caption_polygon = ''\n            caption_paragraphs = []\n            footnotes = ''\n            footnotes_polygon = ''\n            footnotes_paragraphs = []\n\n            # print(f\"--------Analysis of Figures #{idx + 1}--------\")\n\n            if 'caption' in figure and figure['caption']:\n                title = figure['caption'].get(\"content\")\n                if title:\n                    # print(f\"Caption: {title}\")\n                    caption = title\n\n                elements = figure['caption'].get(\"elements\")\n                if elements:\n                    # print(\"...caption elements involved:\")\n                    caption_paragraphs.extend(elements)\n                    # for item in elements:\n                    #   print(f\"......Item #{item}\")\n\n                captionBR = []\n                caption_boundingRegions = figure['caption'].get(\"boundingRegions\")\n                if caption_boundingRegions:\n                    # print(\"...caption bounding regions involved:\")\n                    for item in caption_boundingRegions:\n                        #print(f\"...Item #{item}\")\n                        # print(f\"......Item pageNumber: {item.get('pageNumber')}\")\n                        # print(f\"......Item polygon: {item.get('polygon')}\")\n                        captionBR = item.get('polygon')\n                        caption_polygon = item.get('polygon')\n\n            if 'footnotes' in figure and figure['footnotes']:\n                f_title = figure['footnotes'][0].get(\"content\")\n                if f_title:\n                    footnotes = f_title\n                f_elements = figure['footnotes'][0].get(\"elements\")\n                if f_elements:\n                    footnotes_paragraphs.extend(f_elements)\n\n                footnotes_BR = []\n                footnotes_boundingRegions = figure['footnotes'][0].get(\"boundingRegions\")\n                if footnotes_boundingRegions:\n                    for item in footnotes_boundingRegions:\n                        footnotes_BR = item.get('polygon')\n                        footnotes_polygon = item.get('polygon')\n\n            if 'elements' in figure and figure['elements']:\n                # print(\"Elements involved:\")\n                paragraphs.extend(figure['elements'])\n                # for item in figure['elements']:\n                    # print(f\"...Item #{item}\")\n\n            boundingRegions = figure.get(\"boundingRegions\")\n            if boundingRegions:\n                # print(\"Bounding regions involved:\")\n                for item in boundingRegions:\n                    #print(f\"...Item #{item}\")\n                    if captionBR != item.get('polygon'): #caption の polygon を除外したい\n                        # print(f\"......Item pageNumber: {item.get('pageNumber')}\")\n                        # print(f\"......Item polygon: {item.get('polygon')}\")\n                        pageNumber = item.get('pageNumber')\n                        polygon = item.get('polygon')\n\n            # figures_df.loc[idx] = [pdf_num, idx, pageNumber, polygon, paragraphs, caption, caption_polygon, caption_paragraphs]\n            figures_df.loc[len(figures_df)] = [pdf_num, idx, pageNumber, str(polygon), str(paragraphs), caption, str(caption_polygon), str(caption_paragraphs), footnotes, str(footnotes_polygon), str(footnotes_paragraphs)]\n\n</code></pre></div></div>\n<p data-sourcepos=\"554:1-554:48\">基本のPDFからの領域の切り出し保存</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"555:1-623:3\"><div class=\"highlight\"><pre><code>from PIL import Image\nimport fitz  # PyMuPDF\nimport mimetypes\nfrom mimetypes import guess_type\nfrom IPython.display import display_jpeg\n\ndef crop_image_from_image(image_path, page_number, bounding_box):\n    \"\"\"\n    Crops an image based on a bounding box.\n\n    :param image_path: Path to the image file.\n    :param page_number: The page number of the image to crop (for TIFF format).\n    :param bounding_box: A tuple of (left, upper, right, lower) coordinates for the bounding box.\n    :return: A cropped image.\n    :rtype: PIL.Image.Image\n    \"\"\"\n    with Image.open(image_path) as img:\n        if img.format == \"TIFF\":\n            # Open the TIFF image\n            img.seek(page_number)\n            img = img.copy()\n\n        # The bounding box is expected to be in the format (left, upper, right, lower).\n        cropped_image = img.crop(bounding_box)\n        return cropped_image\n\n\ndef crop_image_from_pdf_page(pdf_path, page_number, bounding_box):\n    \"\"\"\n    Crops a region from a given page in a PDF and returns it as an image.\n\n    :param pdf_path: Path to the PDF file.\n    :param page_number: The page number to crop from (0-indexed).\n    :param bounding_box: A tuple of (x0, y0, x1, y1) coordinates for the bounding box.\n    :return: A PIL Image of the cropped area.\n    \"\"\"\n    doc = fitz.open(pdf_path)\n    page = doc.load_page(page_number)\n\n    # Cropping the page. The rect requires the coordinates in the format (x0, y0, x1, y1).\n    # The coordinates are in points (1/72 inch).\n    bbx = [x * 72 for x in bounding_box]\n    rect = fitz.Rect(bbx)\n    pix = page.get_pixmap(matrix=fitz.Matrix(300/72, 300/72), clip=rect)\n    img = Image.frombytes(\"RGB\", [pix.width, pix.height], pix.samples)\n    doc.close()\n\n    return img\n\ndef crop_image_from_file(file_path, page_number, bounding_box):\n    \"\"\"\n    Crop an image from a file.\n\n    Args:\n        file_path (str): The path to the file.\n        page_number (int): The page number (for PDF and TIFF files, 0-indexed).\n        bounding_box (tuple): The bounding box coordinates in the format (x0, y0, x1, y1).\n\n    Returns:\n        A PIL Image of the cropped area.\n    \"\"\"\n    mime_type = mimetypes.guess_type(file_path)[0]\n\n    if mime_type == \"application/pdf\":\n        return crop_image_from_pdf_page(file_path, page_number, bounding_box)\n    else:\n        return crop_image_from_image(file_path, page_number, bounding_box)\n</code></pre></div></div>\n<p data-sourcepos=\"625:1-625:60\">切り出したPDFの領域にタイトルと注釈を追加</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"626:1-683:3\"><div class=\"highlight\"><pre><code>import ast\nimport matplotlib.pyplot as plt\n\nfigures_df = '上記で作成'\n\ndef save_figures(pred_company, pred_pages):\n\n    save_files = []\n    company_num = comp_num[pred_company]\n\n    for page_num in pred_pages:\n        sort_df = figures_df[(figures_df.pdf_num == company_num)&amp;(figures_df.pageNumber == page_num)].reset_index(drop=True)\n        polygons = []\n        titles = []\n        footnotes = []\n\n        for i in range(len(sort_df)):\n            polygon = sort_df.loc[i, 'polygon']\n            title_ = sort_df.loc[i, 'caption']\n            titles.append(title_)\n            footnote_ = sort_df.loc[i, 'footnotes']\n            footnotes.append(footnote_)\n            polygon_list = ast.literal_eval(polygon)\n            polygons.append(polygon_list)\n\n        # print('figures num : ' + str(len(polygons)))\n        for i in range(len(polygons)):\n            save_name = 'pdf_' + str(company_num) + '_page_' + str(page_num) + '_' + str(i) + '.png'\n\n            if os.path.exists(save_name):\n                save_files.append(save_name)\n            else:\n                polygon = polygons[i]\n                bounding_box = (polygon[0], polygon[1], polygon[4], polygon[5])\n                image = crop_image_from_pdf_page(pdfs[company_num], page_num-1,  bounding_box)\n                graph_title = titles[i]\n                graph_footnote = footnotes[i]\n\n                plt.imshow(image,)\n                plt.axis('off') # 縦軸と横軸のメモリを無くす\n                if type(graph_title) == float:\n                    pass\n                else:\n                    plt.title(graph_title)\n                if type(graph_footnote) == float:\n                    pass\n                else:\n                    plt.figtext(0.2, 0.05, graph_footnote)\n\n\n                plt.savefig(save_name, bbox_inches=\"tight\") # プロットされた図を保存\n                save_files.append(save_name)\n                # plt.show()\n                plt.close()\n\n    return save_files\n</code></pre></div></div>\n<h2 data-sourcepos=\"687:1-687:18\">\n<span id=\"プロンプト\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>プロンプト</h2>\n<h4 data-sourcepos=\"689:1-689:140\">\n<span id=\"今回はそのデータをllmに効果的に渡し一番良いの回答を得るための具体的な流れを解説します\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%9B%9E%E3%81%AF%E3%81%9D%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92llm%E3%81%AB%E5%8A%B9%E6%9E%9C%E7%9A%84%E3%81%AB%E6%B8%A1%E3%81%97%E4%B8%80%E7%95%AA%E8%89%AF%E3%81%84%E3%81%AE%E5%9B%9E%E7%AD%94%E3%82%92%E5%BE%97%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E6%B5%81%E3%82%8C%E3%82%92%E8%A7%A3%E8%AA%AC%E3%81%97%E3%81%BE%E3%81%99\"><i class=\"fa fa-link\"></i></a>今回は、そのデータをLLMに効果的に渡し、一番良いの回答を得るための具体的な流れを解説します。</h4>\n<p data-sourcepos=\"691:1-691:42\">全体の流れはこんな感じです。</p>\n<ol data-sourcepos=\"693:1-703:0\">\n<li data-sourcepos=\"693:1-693:98\">Retriever作成：各ライブラリとAzureのドキュメントを参考にRetrieverを作成</li>\n<li data-sourcepos=\"694:1-694:96\">コンテキスト検索：「クエリとシンプル答え」でコンテキストを検索</li>\n<li data-sourcepos=\"695:1-695:123\">ヒットページ特定：検索でヒットしたページを確定（場合によって前後のページを追加）</li>\n<li data-sourcepos=\"696:1-696:212\">テーブルデータ付きコンテキスト作成：Azureで作成したテーブルデータ込みのコンテキストを該当ページ丸ごとコンテキストとして渡す（コンテキスト①）</li>\n<li data-sourcepos=\"697:1-697:173\">画像データ抽出＆保存：Azureで作成したフィギュアデータから該当ページの絵・グラフをPDFから抜き出し個別の画像として保存</li>\n<li data-sourcepos=\"698:1-698:228\">画像部分のパラグラフ抽出：パラグラフドキュメントから絵・グラフの部分（パラグラフ番号で照合）を抜き出し（重複してしまうので省く）、コンテキスト②を作成</li>\n<li data-sourcepos=\"699:1-699:108\">LLMへテーブルデータ送信：LLMにコンテキスト①（テーブル）を渡し回答させる</li>\n<li data-sourcepos=\"700:1-700:132\">LLMへ画像データ送信：LLMにコンテキスト②と画像データ（複数の場合は複数）を渡し回答させる</li>\n<li data-sourcepos=\"701:1-703:0\">最終回答：LLMに7と8の回答を渡し、総合的な答えを判断させる</li>\n</ol>\n<p data-sourcepos=\"704:1-705:215\">ポイントはハイブリッド回答<br>\nAzureで作成した個別のパラグラフから表データを置き換えたものと絵・グラフを抜き出して画像として渡していくハイブリッドでの回答をさせる形にしました。</p>\n<h4 data-sourcepos=\"708:1-708:44\">\n<span id=\"pdf処理完了とプロンプト工夫\" class=\"fragment\"></span><a href=\"#pdf%E5%87%A6%E7%90%86%E5%AE%8C%E4%BA%86%E3%81%A8%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E5%B7%A5%E5%A4%AB\"><i class=\"fa fa-link\"></i></a>PDF処理完了とプロンプト工夫</h4>\n<p data-sourcepos=\"709:1-709:232\">PDF処理が完了し、いよいよプロンプトの工夫に取り掛かることができました。しかし、最終日1週間前という状況だったので、かなり時間を使ってしまったという印象です。</p>\n<h4 data-sourcepos=\"711:1-711:41\">\n<span id=\"プロンプト試行錯誤の日々\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E8%A9%A6%E8%A1%8C%E9%8C%AF%E8%AA%A4%E3%81%AE%E6%97%A5%E3%80%85\"><i class=\"fa fa-link\"></i></a>プロンプト試行錯誤の日々</h4>\n<p data-sourcepos=\"712:1-712:505\">プロンプトというか、LLMにどう答えさせるかの部分について書いていきます。一通りプロンプトの工夫の方法を学び、それらを組み合わせて作成したのですが、質問ごとに良い結果と悪い結果に分かれました。特に答えさせるごとに回答が変わるので、何度も試行錯誤を繰り返しました。LLMにもSeedの指定ができるようで、それをしていればもっと検証が楽だったと思います。</p>\n<h4 data-sourcepos=\"714:1-714:41\">\n<span id=\"プロンプトの基本パターン\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%AE%E5%9F%BA%E6%9C%AC%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\"><i class=\"fa fa-link\"></i></a>プロンプトの基本パターン</h4>\n<p data-sourcepos=\"715:1-721:14\">・Few-shot<br>\n・Chain-of-Thought（CoT)<br>\n・自己整合性　Self-Consistency<br>\n・Tree-of-Thought（ToT)<br>\n・MAGIシステム<br>\n・仮想スクリプトエンジン<br>\n・Mock Prompt</p>\n<p data-sourcepos=\"723:1-723:63\">このあたりの基本の作法を学び組わせました。</p>\n<h4 data-sourcepos=\"725:1-725:56\">\n<span id=\"量より質プロンプトは絞り込むべし\" class=\"fragment\"></span><a href=\"#%E9%87%8F%E3%82%88%E3%82%8A%E8%B3%AA%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%AF%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%82%80%E3%81%B9%E3%81%97\"><i class=\"fa fa-link\"></i></a>量より質！プロンプトは絞り込むべし</h4>\n<p data-sourcepos=\"726:1-726:330\">まず工夫を知って、とりあえずたくさん書き出しました。しかし、各質問ごとに前に書いてうまくいっていたものができなくなったり、指示についても多くなると一つ一つが薄まる感じで、量を書けばいいんじゃないということが分かりました。</p>\n<h4 data-sourcepos=\"728:1-728:36\">\n<span id=\"magiシステムで役割分担\" class=\"fragment\"></span><a href=\"#magi%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%A7%E5%BD%B9%E5%89%B2%E5%88%86%E6%8B%85\"><i class=\"fa fa-link\"></i></a>MAGIシステムで役割分担</h4>\n<p data-sourcepos=\"729:1-734:225\">特にMAGIシステムはうまくいったと思います。役割を変えることで変化をつけれるので、もう少し時間があれば深堀できたと思います。<br>\n例えば、<br>\n•\tレイヤー1：①財務担当、②経理担当、③広報担当<br>\n•\tレイヤー2：①経営者、②アナリスト、③エコノミスト<br>\n•\tレイヤー2-2：①経済学者、②数学者、③国家機関<br>\nなどとすると、国家機関の役割が勝手に質問の答えとは関係ない会社の施策の良し悪しを評価しだしたり、今回の精度には無駄ですが、LLMの奥が深いなと感じました。</p>\n<h4 data-sourcepos=\"737:1-737:38\">\n<span id=\"最終的なプロンプト構成\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E7%B5%82%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>最終的なプロンプト構成</h4>\n<p data-sourcepos=\"738:1-738:33\">最終的な構成としては、</p>\n<h5 data-sourcepos=\"739:1-739:19\">\n<span id=\"レイヤー1\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC1\"><i class=\"fa fa-link\"></i></a>レイヤー1</h5>\n<p data-sourcepos=\"740:1-742:60\">①　シンプルなプロンプトで答えさせる（openAI）<br>\n②　シンプルなプロンプトで答えさせる（gemini）<br>\n分からない場合はわからないと答えさせる。</p>\n<p data-sourcepos=\"744:1-745:132\">レイヤーを分けた理由でもあるのですが、半分くらいはシンプルなプロンプトで正解を答えてくれます。逆にシンプルなプロンプトだと正解なのに難しい問題と同様に複雑な指示をするとかえって間違うことがありました。またAPIの料金の問題も含め、簡単に正解する場合をふるいにかけ掛けてしまいたかったからです。<br>\nただシンプルだけで判断すると両方間違えることがあるのでレイヤー２には基本的には進みます。</p>\n<h5 data-sourcepos=\"747:1-747:36\">\n<span id=\"レイヤー2-generate-answer1\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC2-generate-answer1\"><i class=\"fa fa-link\"></i></a>レイヤー2 Generate Answer1</h5>\n<p data-sourcepos=\"748:1-750:144\">③　①②の答えとMAGIシステムで役割を与えた4人に「テーブルデータコンテキスト」で推論させて答えを出させる<br>\n④　①②の答えとMAGIシステムで役割を与えた4人に「画像データ＆コンテキスト」でと③での会話を新たなクエリとしてretrieverに検索し、コンテキストの範囲を拡大させてから推論させて答えを出させる<br>\n⑤　③と④を会話として渡して総合プロンプト（役割なし）で「画像データ＆コンテキスト」で答えさせる</p>\n<p data-sourcepos=\"753:1-753:204\"><strong>途中の処理として③での会話の文章と④の会話の文章はChat_histryとして格納してそれぞれコンテキストの検索やLLMが回答を考える参考に渡してます。</strong></p>\n<h5 data-sourcepos=\"756:1-756:106\">\n<span id=\"レイヤー3-generate-answer2-レイヤー２の画像テーブルの順番入れ替え\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC3-generate-answer2-%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%EF%BC%92%E3%81%AE%E7%94%BB%E5%83%8F%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AE%E9%A0%86%E7%95%AA%E5%85%A5%E3%82%8C%E6%9B%BF%E3%81%88\"><i class=\"fa fa-link\"></i></a>レイヤー3 Generate Answer2 　（レイヤー２の画像・テーブルの順番入れ替え）</h5>\n<p data-sourcepos=\"757:1-759:144\">⑥　①②の答えとMAGIシステムで役割を与えた4人（③とは別の役割）に「画像データ＆コンテキスト」で推論させて答えを出させる<br>\n⑦　①②の答えとMAGIシステムで役割を与えた4人（④とは別の役割）に「テーブルデータコンテキスト」でと⑥での会話を新たなクエリとしてretrieverに検索し、コンテキストの範囲を拡大させてから推論させて答えを出させる<br>\n⑧　③と④を会話として渡して総合プロンプト（役割なし）で「画像データ＆コンテキスト」で答えさせる</p>\n<h5 data-sourcepos=\"760:1-760:33\">\n<span id=\"レイヤー4-check-answer1\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC4-check-answer1\"><i class=\"fa fa-link\"></i></a>レイヤー4 Check Answer1</h5>\n<p data-sourcepos=\"761:1-762:88\">⑨　⑤と⑧の答えを見比べさせて同じであれば答え確定。同じでない場合を抽出<br>\n⑩　レイヤー2を繰り返して答えを出させる（多少内容を変えて）</p>\n<h5 data-sourcepos=\"763:1-763:33\">\n<span id=\"レイヤー5-check-answer2\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC5-check-answer2\"><i class=\"fa fa-link\"></i></a>レイヤー5 Check Answer2</h5>\n<p data-sourcepos=\"764:1-765:88\">⑨　⑧と⑩の答えを見比べさせて同じであれば答え確定。同じでない場合を抽出<br>\n⑩　レイヤー3を繰り返して答えを出させる（多少内容を変えて）</p>\n<h5 data-sourcepos=\"766:1-766:22\">\n<span id=\"レイヤーlast\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BClast\"><i class=\"fa fa-link\"></i></a>レイヤーLAST</h5>\n<p data-sourcepos=\"767:1-768:345\">⑪　チェックを2回行ったので最後の答えをFinalとして提出<br>\nこちらでモデル作成しました。最終的に95や集計問題はこのままでは対応できないと思うのでもう少し改良が必要だったと思います。MAGIシステムの役割に関しても抽出、計算、疑い、確認などを振ってましたが他にも試せたと思うので改良の余地ありです。</p>\n<p data-sourcepos=\"772:1-773:129\">レイヤー２のプロンプトは以下のような感じです。<br>\nもっと洗練した文章にできると思いますがつぎはぎでこのような形までしかできませんでした。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"774:1-838:3\"><div class=\"highlight\"><pre><code>answer_prompt = f\"\"\"\n    - 4人の専門家が協力して質問に答えてください。\n    - その4人は財務担当の代表、広報担当の代表、数字を疑う担当の代表、確認担当の代表です。\n    - それぞれが多角的に考え、自分の回答への手順と参考としたデータを詳しく説明します。\n    - 各ステップで、各専門家はほかの人の考えを洗練し、その貢献を認めながらその考えを発展させます。\n    - 他人の説明に間違いがないか確認してから、再度「コンテキスト」を確認して、別の確認方法や違うデータで検証して考えを説明してください。\n    - 質問に対する答えが見つかるまでこのステップを繰り返し続けます。\n    - 全員の意見をまとめて、結論を出してください。\n\n    - 「質問」、「コンテキスト」、「table data」を参考にしてください。\n    - 文章で答える場合は要約せず必要な部分のみ抜き出し回答してください。\n    - コンテキストに回答が含まれない場合、「分かりません」と答えたうえでどんなことを探したらいいかアドバイスをください。\n    - アドバイスする場合は検索しやすい単語などを指摘してください。\n    - コンテキストは完全な文章ではなくretrieverで抜き出した文章であることに注意してください。\n    - コンテキストをつなぎ合わせて推論を行ってください。\n    - 数値を計算するときは参考値ではなく実績で計算すること。\n    - 最終的な回答は50トークン以内で答えれることを要求していますが議論は幅広く行ってください。\n    - 「小数第二位で四捨五入してください。」とあるのに回答に小数点第二位がある場合はペナルティ -1点。\n    - 「小数第一位で四捨五入してください。」とあるのに回答に小数点第一位がある場合はペナルティ -1点。\n\n    ## 数字を疑う担当の代表への特別指示\n    - 財務担当の代表、広報担当の代表の意見を疑いながら間違いがないか再検証してください。\n\n    ## 確認担当は以下のヒントから回答が正しいか確認してください。\n    ## ヒント\n    - 「simple_answer」は6割くらい正しいですが、4割くらい間違えなのであくまで参考にしてください。\n    - 通年、通期、上期、下期、半期、四半期の期間の違いによく注意する。\n    - 海外・国内の違いによく注意する。\n    - 社内・社外の違いにはよく注意する。\n    - 常勤の反対は非常勤、であることに注意してください。\n    - 年、月、日などの時間の指定にはよく注意する。\n    - ２つ中から選択する問題には理由でなく、選択肢のみ回答する。\n    - 上期と下期を足して1年間の数字になる。\n    - 2023年上期 123件、2023年下期 234件で、2023年は123+234=357件です。\n    - 順位を出す問題か判定してください。\n    - 順位を考える問題の場合は、まず大きい順（もしくは小さい順）に並び替えてください。\n    - 一番大きい、二番目に大きいなどを考える場合は大きい順に５つ抽出してそのうえで並び書てください。\n    - ひらがな・カタカナ・漢字を判定する場合、「ひらなが」があることに1点、「カタカナ」があることに1点、「漢字」があることに1点、を与え合計3点以上になっていることを確認してください。\n    - 問題文に回答を入れてフォーマットがあっているか確認してください。\n    - 例えばAを｢111｣として、Bを｢222｣のもの、Cは｢333｣の表記を同じようにする必要があることを確認してください。\n    - 東京、大阪、四国4か所、の合計は6か所です。\n    - 東京、名古屋、九州（8県）の合計は10か所です。\n    - 全てを答える場合、原文の要素を抜き出す。\n    - 回答に不必要な部分があれば省く。\n    - 抽出問題はまず初めに該当する項目をすべて洗い出してください。\n\n    ## 確認担当は以下の参考から回答が正しいか確認してください。\n    ## 回答には次を参考にしてください。\n    - Q:プロダクト・ライフサイクルの「導入期」、「成長期」、「成熟期」、の次はなんでしょうか？\n    - A:衰退期\n    - Q:12.345% を「小数第二位で四捨五入してください。」\n    - A:12.3%\n    - Q:12.345% を「小数第一位で四捨五入してください。」\n    - A:12%\n    - Q:進捗率が2023年度12.3%、2022年度23,4%である場合、2023年度は2022年度対比何％増加した？\n    - A:23.4% - 12.3% = 11,1% 答え：11.1%\n    - Q:甲100、乙200、どちらが大きいか？\n    - A:甲\n    - Q:〇〇と挙げていることは何ですか？\n    - A:原文をそのまま回答する。\n    - Q:「日本大和株式会社、東京営業所」の会社名にひらがなは含むか？\n    - A:含まない。「、」は会社名に含まれず、ひらがな扱いでもない。\n\n</code></pre></div></div>\n<p data-sourcepos=\"840:1-840:27\">答えが同一かの判定</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"842:1-871:3\"><div class=\"highlight\"><pre><code># 比較　モデルを準備\nmodel_img_gemini =  \"gemini-2.0-flash-exp\"\ndef compare_answers(question, answer1, answer2):\n\n    compare_prompt = f\"\"\"\n        「question」の「answer1」と「answer2」を比較してその結果を\"Same\", \"Acceptable\", \"Different\"の中から一つだけ選んで答えてください. それぞれの定義は以下の通り.\n\n        # 定義\n        Same: answer1、answer2が問題に正しく回答しており, 同じ内容である.\n        Acceptable: answer1、answer2が全く同じではないが, ほぼ同じ意味である.\n        Different: answer1、answer2同じ内容でない。\n\n        ## question\n        {question}\n\n        ## answers\n        answer1:{answer1}\n        answer2:{answer2}\n\n\n        ## 出力形式\n        Same or Acceptable or Different\n        \"\"\"\n\n    response = model_gemini.generate_content(answer_prompt)\n    answer = response.text\n\n    return answer\n</code></pre></div></div>\n<p data-sourcepos=\"874:1-876:81\">最終的にはこちらを１０回くらい回しました。<br>\nまだプロンプトが不安定なのか、seedの関係なのか、ちゃんと答えてくれる時と答えてくれないときがありました。<br>\nそのため複数回実行し一番よさそうなものを提出しました。</p>\n<p data-sourcepos=\"878:1-880:81\">コンペに参加することでLLM/RAGのことを学ぶ機会が得れてほんとによかったです。<br>\nこれからも重要な技術になると思うので引き続き勉強していこうかと思います。<br>\nコンペを主宰していただいた皆様ありがとうございました。</p>\n",
        "body": "## はじめに\n今回初めてQiitaに投稿します。\n理由はタイトルにも書きましたが、RAGを学んでコンペに参加しましたのでその備忘録と、\n最後ゴールドは取れましたが11位と入賞（10位まで）に入れませんでした。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4010716/881167b4-cda6-4737-b731-b245ebfc98a3.png)\n\n悔しかったので、何とか企業賞に滑り込めないだろうかとコンペ延長戦的な気持ちで書いております。\n\n※2025/2/15執筆時点では順位やメダルは暫定です。変更あり次第修正します。\nまたタイトルがわかりやすいほうがいいとのことで大げさに書いております。\n\nそのため急遽Qiitaの登録を済ませ書いておりますので見にくい部分や、技術的な面よりブログ的な感想が多くなってしまっているかもしれませんがご了承ください。\n\n事前情報\n・非エンジニア\n・証券関連の仕事\n・SIGNATEのコンペは3回目\n\n\n## 参加したコンペ\nhttps://signate.jp/competitions/1515\n\n# 全体像\n1. **Retrieverについて**\n2. **クエリの処理**\n3. **PDFの処理について**\n4. **プロンプトについて**\n\n\n\n\n## RAGコンペで学んだこと：RetrieverとTextSplitterの重要性\n今年に入るまでRAGのことを知らず、このコンペで初めて触れました。過去2回のコンペ参加で表データやPandas、XGBoostなどの知識はそれなりに身につけたつもりでしたが、LLMなどはChatGPTやNLPとしてなんとなく理解している程度で詳しくはなく、コンペなどを見ていると生成AI関連やNLPなどが増えてきているのでどこかで取り組みたいなと思っていたので良い機会だと思い、このコンペが始まる直前くらいから調べ始めました。\n\n### RAGで重要なのはRetriever\n調べ始めた中でRAGで重要なのがRetrieverというのが出てきたのでいくつか調べ、今回のコンペでは以下を使用しました。\n\nParentDocumentRetriever｜チャンクを親チャンク、子チャンクで二つ使用する\nBM25Retriever｜単語の関連性？からの検索、ただ日本語対応してないので要処理\nTFIDFRetriever｜単語の”レア度”からの検索、こちらもMeCabでの処理が必要\nEnsembleRetriever｜それぞれのRetrieverをアンサンブルするもの\nContextualCompressionRetriever｜ReRANKするための\nConversationalRetrievalChain｜retrieverではないですが参考に\n基本的にはハイブリッド検索として「セマンティック検索（ベクトル検索）」と「キーワード検索」の組み合わせが良いとのことでそれをベースにしました。結論を先に書くと今回は最終的には\n\nParentDocumentRetriever k=10 ：0.4\nBM25Retriever_2048チャンク k=10 ：0.2\nBM25Retriever_512チャンク k=10 ：0.2\nTFIDFRetriever k=10 ：0.2\nでアンサンブル（k=20くらいで幅広く抽出）したあとContextualCompressionRetriever k=10 でReRANKしたものを最終的なRetrieverにしました。ConversationalRetrievalChainは考え方は採用し、直接は使用してません。\n\n\n\n#### セマンティック検索\nまずベクトル検索用のRetrieverですが、基本的なretrieverだけだとチャンク数など悩みが出てくるので1の「ParentDocumentRetriever」を採用しました。こちらは親チャンク（例2048）と子チャンク（例512）など二つのチャンクを用意して、子チャンクで文章のベクトルの近さを探しながらヒットした子チャンクの親チャンクを返すというものらしいです。Retrieverのポイントとしていかに該当する文章を検索してその文章の必要な部分をもれなく拾ってくるかが重要なのでそれが工夫されているのだと思います。\n後述しますが、その点はすごい重要なのでコンペ自体では別の工夫を入れるようにしてます。また2000文字（トークン）、500文字（トークン）でもいいのですが、何かの論文か記事で512などの2の倍数のほうがベクトル化でよい成績が出たと見かけたのでお守り程度に2048、1024、512などで試しました。この辺りも英語直接でしたら影響しそうですが、日本語だし、トークン判定されるときにずれそうだからどこまで効果あるかは不明です。\n\n\n#### キーワード検索\nBM25Retrieverが日本語に対応していないとのことではじめかなり苦労しました。いくつかの記事を調べ、MeCabで形態素解析して単語を分解してやる必要があります。TFIDFRetrieverも同様でこちらもMeCabを使用しました。私のやり方が悪いのか、BM25はいろいろ組み合わせですがTFIDFはすっきりしたコードでできました。またBM25はチャンクサイズがかかわるようなのでParentDocumentRetrieverに合わせて2048と512別々で作成しました。TFIDはレア度を測定するためなのかチャンク数が関係ないようなのか1つだけの作成です。今回質問から適切なチャンクを拾ってこれるかをそれぞれ調べていた際に正解率としては、\n\nParentDocumentRetriever ＞ 7割\nBM25Retriever ＞ 6割\nTFIDFRetriever ＞ 6割\nという感じでした。BM25はチャンク数で得な問題、不得意な問題があり、2つ組み合わせたほうがいいと感じました。総合的には512、2048も同じくらいだったと思うのでどちらかに絞るより組み合わせだと思います。\n\n\n\n#### TextSplitter\nRetrieverと同じくらい重要（Retrieverとセット？）なのが「TextSplitter」とのことです。Retriever自体が分割した文章をもとに検索を行うのでそのように分割されているかは重要というのは感覚的にもわかります。TextSplitterで代表的なのが以下とのことです。\n\nCharacterTextSplitter｜単純に〇〇文字で分割｜\nMarkdownTextSplitter｜マークダウンに従って分割｜\nNLTKTextSplitter｜Pythonで英語による自然言語処理をする上で役に立つNLTKで分割｜\nSpacyTextSplitter｜SpaCyは、PythonでNLPを行うための強力なライブラリ｜\nRecursiveCharacterTextSplitter｜再帰的チャンキング｜\n出来れば単純に〇〇文字と一律的に分割するのではなく、段落や章など意味のあるところで切ったほうが検索の際も役立ちます。今回はRetrieverが拾ってきたものを別処理するようにしてますので、RecursiveCharacterTextSplitterをベースに活用してます。でもほんとはマークダウンとか意味のあるとこで分割したほうがいいと思います。ただ今回はコンペで他にやらないといけないことが多かったのと、後処理の工夫でそこまでTextSplitterで差が出ないかなと思いほかに時間かけることにしました。（PDF処理のほうが大変で手が回らなかったというのが感想です。）\n\n参考にしたサイト\nhttps://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f\n\n\n\n## クエリの処理\n\n上記でRetrieverができましたが、そのままクエリ（質問）で検索してもそれぞれ６～７割の正解率（答えを導き出せるチャンクを返してくれる）という感じでした。\n\nそのため、クエリを処理する必要があります。\nクエリを別の言葉に言い換えるなどです。今回クエリの処理には以下の方法を試しました。\n\n１．クエリの言いかえ（内容・答えが変わらないように）を３つ作成\n２．クエリを無理やり３つの文章に分割（言い換えるのではなく因数分解のように分ける）\n３．クエリを回答するにあたり必要な手順をLLMに考えさせる。\n４．必要な参照部分を一旦、答えさせる。\n５．クエリ回答のプロンプトをLLMに作成させる。\n６．クエリに工夫なしでLLMに答えさせる。\n\n\n１については以下のようなプロンプトでLLMに言い換えを指示しました。\n```\nquery_prompt = f\"\"\"\nあなたは高度な自然言語処理と情報検索の専門家です。企業のESGレポートや統合報告書に関連する質問を、文書検索システムでの検索効率と回答精度を高めるように「答え」が変わらないように質問を変えてください。\n\n## 元の質問\n{question}\n\n## 質問の内容\n1.日本の企業に関する質問です。\n2.各企業が出している資料を参照に答えます。\n3.参照する資料は以下のものです。\n- 統合報告書\n- 統合レポート\n- ステナビリティデータブック\n- \n## 指示\n絶対にハルシネーションを避けてください。\n文章を変えた質問を３つ作成してください。\n元の質問と答えが変わってしまう質問を作成するとペナルティです。\n出力形式以外の質問を作成するとペナルティです。\n\n## ヒント\n四捨五入の指示がある場合は間違えないように気を付ける。\n海外・国内の違いによく注意する。\n社内・社外の違いにはよく注意する。\n常勤・非常勤の違いにはよく注意する\n数字を扱う場合単位には気を付けてください。\n\n## 出力形式\n質問１：\n質問２：\n質問３：\n\n\"\"\"\n```\n\n言い換えた質問を組み合わせてRetrieverに検索させることで検索の精度を高めることができるようです。\nただLLMが結構違う意味の質問に変えてしまっている場合もあり、あくまで検索用ですが、多用すると無駄なチャンクを拾ってきてしまう可能性があると思います。\n\n「２．クエリを無理やり３つの文章に分割（言い換えるのではなく因数分解のように分ける）」も同じような感じで文章を作成させます。\nただ１では、３つのそれぞれ同じ意味を持つクエリができますが、2番目は３つ（複数）合わせて元のクエリと同じ意味を成します。\n```\nあなたは高度な自然言語処理と情報検索の専門家です。与えられた質問を正しく理解するため説明してください。\n\n## 最終指示\n絶対にハルシネーションを避けてください。\n対象の質問を理解するためいくつかの要素に分けてください。\n分けた要素を分かりやすく説明してください。\n分けた要素から対象の質問の理解が深まるようにしてください。\n順番を問う質問は対象の範囲を確認する。\n比較を問う質問は比べる対象を確認する。\n\n## 出力形式\n回答の仕方は以下です。\n要素１：\n要素１の説明：\n要素２：\n要素２の説明：\n要素３：\n要素３の説明：\n```\n\n```\nあなたは高度な自然言語処理と情報検索の専門家です。与えられた質問を正しく理解し回答を導き出す手順を教えてください\n\n## 対象の質問\n{query}\n\n## 質問の内容\n1.質問に答える必要がります。\n2.質問を理解するために補足説明があります。\n3.質問に回答するため参照する資料は以下のものです。\n- 統合報告書\n- 統合レポート\n- ステナビリティデータブック\n\n## 指示\n補足質問の内容を理解し、どのような手順を踏めばいいかわかりやすく説明してください。\n計算問題が含まれる場合は計算方法を教えてください。\n質問に答えるために複数の情報が必要な場合はどのような情報を取得する必要があるか明確にしてください。\n手順だけを考え、外部の情報を参照するとペナルティです。\n手順だけを考え、答えまで出すとペナルティです。\n```\n\n\n```\nあなたのタスクは企業のESGレポートや統合報告書に関連する質問に対して、参照する文章を見つけ出すことです。\n\n## 指示\n- 質問に答えるために必要な文章を探してください。\n- 質問に答えるための方法は回答手順を参考にしてください。\n- 参照する文章は変更せずそのままに抜き出してください。\n- 複数の文章を参照とした場合は複数の文章を提示してください。\n\n## 質問\n{question}\n## 回答手順\n{direction}\n## コンテキスト\n{context}\n\n## 出力形式\n参照となる文章：\n\n\"\"\"\n```\nシンプルに答えをまず出してもらう。\n分からない場合、アドバイスをもらう。\n\n```\nあなたのタスクは企業のESGレポートや統合報告書に関連する質問に対して、文書検索システムで得たコンテキストを参考に自然言語で40トークン以内で正確に回答することです。\n\n## 制約\n- コンテキスト以外からは回答しないでください。\n- コンテキストに回答が含まれない場合、「分かりません」と答えたうえでどんなことを探したらいいかアドバイスをください。\n- アドバイスする場合は検索しやすい単語などを指摘してください。\n\n\n## 質問\n{question}\n\n## コンテキスト\n{context}\n```\n\n\n### クエリの処理　＆　Retrieverの評価　＆　ReRANK\n\nいくつかパターンを変えながら１つのクエリに対して、10くらいのsub queryを作成してpandasのデータフレームに格納して複数のRetrieverでどれくらい元のクエリに比べ精度が上がったか検証しました。\n\n**結果的には最後の「元クエリ」＋「シンプル回答 or わからない場合アドバイス」で検索するのが精度が良かったです。**\n\n大体正しいコンテキストを95%くらいで拾ってくるイメージでした。（問95の難問や複数のページを拾ってこないと答えれない問題もありましたので制度的にはほぼ目標達成している感じです。）\n\n\n### 失敗談\n\n最終的には上記の方法で行いましたが、途中の試行錯誤としては、10個くらいに複製させたクエリをそれぞれのRetriever（PD、BA25, TFIDF）で検索し、上位に挙がってきた順でポイントを振り、最終的にポイントで並べなおすというのもしました。（ReRANKの自己処理）\n\nただRetrieverごとに違う要素がありうまくはまって正しいコンテキストが上位に並びなおされる場合もあれば、言い換え時点で全く違う質問になったうえで関係ないコンテキストを拾ってきて、逆に精度を落としてしまっている質問もあったりとReRANKするにも一筋縄ではいかなかったです。\n\nそのため最終的にはReEANKについてはこちらを使ったほうが手間がなくそこそこいい結果が出ました。\n\n```\nfrom langchain.retrievers import EnsembleRetriever\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.retrievers import ContextualCompressionRetriever\nfrom langchain.retrievers.document_compressors import LLMChainExtractor\nfrom langchain.retrievers.document_compressors import LLMListwiseRerank\nfrom langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)\n\nensemble_retriever = EnsembleRetriever( retrievers=[pd_retriever, retriever_bm_parent, retriever_bm_child, tfidf_retriever], weights=[0.4, 0.2, 0.2, 0.2],  k=20)\ncompressor = LLMListwiseRerank.from_llm(llm, top_n=10)\ncompression_retriever = ContextualCompressionRetriever(base_compressor=compressor, base_retriever=ensemble_retriever)\n\n```\n## Retriever　の大幅修正\n\n実はRetrieverに関して最終的には大きな変更を加えています。\n変更といってもベースの仕組みは上記に記載の通りなのですが、変えたのが読み込ませるコンテキストを変えました。\n\n初めは課題となっているレポートPDFを全て読み込ませてRetrieverを作成していたのですが、どうしても間違いコンテキストが含まれて精度が上がらなかったです。\n<br>\nそこで出来るだけ不純物のないRetrieverを作成したいと考え、結論的には19のPDFをそれぞれのRetrieverを作成し、問題にそって正しいRetrieverを選択するモデルにしました。\n（最終的には19×５個のRetrieverを作成）\n<br>\nそのほうが精度も上がってLLMの間違いも減りました。\nただこの方法は今回の質問が複数企業（複数PDF）にまたぐものがなかったからできたのだと思います。\n例えば「ハウス食品と日産の従業員はどちらが多いか？」\nなどの質問があれば今回の方法は取れなかった、もしくは複数のRetrieverを選定して両方からコンテキストを引っ張ってくるなどの必要があったかもしれません。\nただ今回は質問ごとに明確に参考にするPDFが違ったことなど、質問で明確にRetrieverを指定できるなら出来るだけ分割して正しいRetrieverを検索できるようにしたほうがいいかと思います。\nなにかに「ごみを入れてもゴミが出てくるだけ」とありましたが、Retrieverに不要な情報が多くなるのも精度を下げる原因になると思います。\n\n※あくまで個人的感想です。\n<br>\n特に企業毎のデータを調べるのであれば、証券コードなど明確に指定できるので有用かもしれません。社内情報で人事や庶務いろいろな書類を参照しないといけないなどの場合はまた別の工夫が必要かと思います。\n\n\n\n\n\n\n## PDF処理について\n\n今回のコンペのキモはこのPDFの処理をいかに正確にできるかだったと思います。\n実際この処理にコンペ期間中　6割くらいの時間を費やしました。\n普段テーブルデータしか触ったことない身としては、ここに悪戦苦闘しました。\n\nその意味でも失敗したことも含めて、取り組んだ順に紹介していこうと思います。\nここまで長々と書いてしまい見にくいページが出来上がりますが、初投稿ということでとりあえずこのままチャレンジしてみようと思います。\n<br>\n\n###  PDF 難所\nいまだPDFをNLP的に処理しやすいツールがない。（なくはないが簡単じゃない）\n\nこれだけAI OCRや技術が進化しているのに人間がぱっと認識できるレベルでPDFをテキスト化してくれるツールが全然見当たらなかったです。\n特にAPI接続なしのライブラリで完璧なものは見当たらず、工夫が必要でした。\n\n\n### PDFリーダー（ローダー）\n\nまずPDFをLLMが認識できるようにするには処理が必要です。\nそのためのライブラリ・方法は多くありますが考えるうえで大きな選択肢が２つです。\n<br>\n**１．費用なしのライブラリを使う**\n**２．コストがかかるがAPI接続等でLLMモデルやAI OCRの高性能なものを使う**\n\n<br>\nこれは大きな違いで誰でも無駄な費用はかけたくないですから、通常であれば１の選択肢になると思います。\nただ結果、今回も最終的には２の方法をとりましたので無駄な手間をかけたくない、企業でお金がある等であれば初めから２の方法をとったほうがいいと思います。\n\n<br>\n\n先に２のツールを費用感を書いておくと、\nツールは今回「Azure AI Document Intelligence」を使用しました。\n費用はたぶん初めの失敗やテストなど含め30～40個のPDF（ページで3000ページくらい）を読み込ませましたが請求金額は4000円程度です。\n\n<br>\nただこちら初めての登録の場合200ドル（約3万円）の無料クレジットがつくので実質費用は掛かってません。\n無料クレジットがなかったら使ったか微妙ですが性能は１のライブラリに比べて段違いです。最終的にはAzureで取得したデータしか使ってないです。\n\n\n手っ取り早く試してみたいなら１、正確さを求めるなら２という感じでしょうか。\n\n\n## PDFライブラリについて\n\n初めはできるだけコスト掛けないようにPDFを読み込めるライブラリから始めました。\n調べていくとPDFライブラリだけでかなりあり、それぞれ精度や特徴があります。\n\n調べたライブラリ\n\n・pymupdf4llm\n・pdfplumber\n・PDFPlumberLoader\n・PyPDFium2Loader\n・pdfminer\n・PyMuPDF\n・pypdf\n・PDFMinerPDFasHTMLLoader\n・PyPDFDirectoryLoader\n・UnstructuredFileLoader\n・MathpixPDFLoader\n・easyocr\n・pdf spire\n\nだいたいが　langchain_community.document_loaders　に入っているのでそちらから検索して用途や特徴を調べたほうがいいと思います。なんでこんなに調べたかというと一発でうまくPDFの文章を抽出してくれなかったからです。\nとくに日本語というのがハードルが上がっているのだと思います。\n\n### pymupdf4llm\nこちらはLLMでの処理を前提としているのかマークダウンでの抜き出しなどLLM,RAGに対応するように改良がされたものらしくてかなり精度はよく表なども正確に抜き出すことが多かったです。\nただ後ほど触れますが見開き問題として横ページで段落が横に２つ、３つ並んでいると一番左の段落の１行目の次のテキストが真ん中の段落の1行目につながるなど段落が横並びの際に誤抽出があります。\n\nただ難点は処理速度が遅いということです。大体、１PDFを処理するのに1～2分かかります。他のが１秒～数十秒くらいなのに比べて１０倍くらいのイメージです。\n今回大きな演算処理がないので基本CPUで処理していましたのでGPUで行えば気にならないかもしれませんが他に比べてかなり遅い印象です。\n\n### PyMuPDF\nこちらは一番ベースのライブラリというイメージです。処理も早いですし、精度もそこそこいいです。\nオプションで変えれる設定も多く段落の判定も文字の何倍に指定するかなど返れました。\nその辺をうまく調整すれば同じレイアウトの文章には強力になるかもしれません。\n処理的にもまずこちらを試してみてうまく抽出できていなければ上にするというのがいいかもしれないです。\n\n### spire\n基本は上の２つの使い分けでいい気がしますが、特徴があるのでこちらも触れておきます。\nこちらは抽出するときにそのままのレイアウトで抽出してくれます。\nそのままというのはあえて段落のつながりなど判断せず文章がない部分はそのまま空白で置き換えてくれます。\n\nその分、文章のつながりはおかしくなりますがprintで表示したときは原本の見た目に忠実に表現できます。\nその意味でもこのライブラリを使って基本文字データだけにして、それをもう一度PDF化してほかのライブラリに読ませるのはどうかと考えていました。\n１ページごと再度PDFにしてほかに読ませるという手間で断念しましたがもしかしたら文章だけであればうまくいったのではないかと思ってます。\n\nほかも試しましたがそもそも日本語対応してなさそうなものなどもあり、基本は上の組み合わせで行こうというのがベースになりました。\n\n\n### 見開き問題 :PDF分割でRAGの精度向上！\n同じページに段落が横並びであると、隣り合う段落が繋がってしまう現象、ありますよね。\n特に見開きのページでよく起こるのですが、今回扱ったPDFの半分くらいが1ページ目は表紙でA4縦、2ページ目以降がA3横（A4縦の横並び）という構成でした。\n\nこのように縦横が混在していると、たまに見開きでも1ページに丸ごと表や絵などが載っている部分もあり、一律的な処理が難しく、テキスト抽出にも誤りが生じていることが確認できました。（コンテキストと原本を照らし合わせる根気のいる作業…）\n\nどうしようか悩んだ結果、思い切ってPDFを分割するようにしました。\n特にA4縦は分割してしまうとおかしくなることがあるので横ページ（縦のインチより横のインチが大きい）場合のみPDFのページを分割するようにしました。\n結果コンテキストの抽出で精度が上がるページが増えました。\n中には見開きで左、真ん中、右と３段落構成にしているレイアウトもあったので３分割も作成しました。\n\n\n流れは\n１．PDFをそれぞれ1ページごと読み取り\n２．メタデータを格納\n３．横ページであればPDFを2分割\n４．横分割したページを読み取り\n５．で保存したメタデータを紐づけ かつ分割した要素をメタデータに追加\n６．3～5を3分割で繰り返し\n\n#### 分割によるデータ増大と後処理\nこうすることで少なくとも原本、2分割、3分割のどこかで正しい段落でのテキスト抽出ができるようになりました。ただ、これだとデータが約3倍に膨れますし、集計問題などは3倍の数をカウントしてしまうようになりますので後処理が必要です。\n\n\nPDFリーダーについても、Retrieverには全モデル入れて、引っかかってくるページを選定して最終的には1つのライブラリのコンテキストだけにソートし直すというのを考えていました。ただ、上記でいったようにAPIを使うように変更したのでこの辺の処理は未実行となりました。\n\n#### コンテキストの再構築\nこれはAzureでも行っているのですが、コンテキストには正しく読み取れていないものもあるので、いくつかの方法でコンテキスト化して、上位に引っかかったページから再度コンテキストを作成するようにしています。コンテキストにIDが振られてその前後のコンテキストをLLMに与えるというのがあったのですが、それを拡大しました。\n\nLLMの性能が上がり入力コンテキストが100万トークンなどもできる中でコンテキストを過度に少なくする必要はないかと思ってます。ただ、10万トークンとか入れたら小説1冊分とかになるのでどうしても情報が薄まって適切な答えが出ないです。（もしかしたらもう少し性能が上がれば解決することかもしれませんが。）\n\n今回でいえばレポートの性質上、\n\n・1ページごとに内容が完結している\n・ページごとで順序だって内容が関連している\n・ページごとのコンテキストを順番通り渡したほうが正しく判断できる\nと思ってまず該当ページに当たりをつけてそのページ（一部オーバーラップで前後のページも含め）の情報をすべてLLMに渡すとしています。\n\nRetrieverのコンテキストだけで渡すと関連性の高い順で並んでいるので、該当箇所のコンテキスト、1つ前のコンテキスト、2つ後ろのコンテキストなどの順番で渡すこともあり人間でも文脈判断しづらくLLMが混乱するかと思います。\n\n#### メタデータとPDFの分析\nいくつかのライブラリは自動的にメタデータを付けてくれます。ただそれだけでは不足するデータもありますので個別にメタデータを追加しました。\n\nメタデータを追加するにあたり、企業名、レポート名、レポートの概要を入れてRetrieverでヒットしやすくしようと考えました。（最終的に企業別にしたのでレポート名とレポートの概要はいらなかったです。）\n\n手動でのタグ付けは禁止されてましたのでLLMにさせました。19個のPDFを読み取ったデータの10ページくらい（節約のため）をコンテキストとして企業名とレポート名、要約を答えさせるようにしました。PDFの冒頭10ページには何度も企業名がありますからさすがにこのレベルを間違えるほどではなかったです。もちろん上場の3000社とかになれば似た名前の会社などありますから工夫が必要だったかもしれないです。またこのメタ情報を参考に質問ごとの該当の企業名を答えさせると、参照すべきPDFは問95以外は100％の回答率でした。\n\n追加の仕方は辞書と同じなので簡単ですが、英語的には作成者がauthor レポート名がtitleとするようです。PDFリーダーのライブラリ名も追加しておきます。\n\nメタデータに入れておくことで最後コンテキストを再検索するときに簡単にできます。ソート検索ができますのでPDF名、PDFリーダー名、ページで該当コンテキストを再帰的に取得できます。\n\n\n\n## Azure AI Document Intelligence でRAG精度向上\nこのままでは限界を感じて、Azureを使ってみることにしました。\n\n\nAzureは情報量が段違いに多く、レイアウトからしっかり分析して位置情報なども出してくれるので、後々の処理に役立ちました。\n\n\n#### 自動マークダウン変換と課題\n自動的にマークダウン方式にしてくれるのでチャンク化も簡単です。初めはこちらのデータを用いていましたが、簡単にマークダウン化してくれるものの、たまに段落の読み取りが間違えていたり、表データやグラフデータの読み取りができていないところがあります。イメージとしては、全体で90～95％正しいという感じです。グラフや表に限ると6～7割のイメージです。\n\n#### Azureの追加情報と活用\nグラフや表に限界を感じてAzureにしたので、このマークダウン化そのままではそこまで精度は上がりませんでした。特にマークダウン化だとそれぞれのページのメタデータがありません。それも問題でした。\n\nただ、Azureは別途、以下の項目のデータを返してくれます。\n\nsections：パラグラフをまとめかたまり\nparagraphs：構成的に一番小さい（下層）の情報\npage：ページごとの含まれるパラグラフなど\ntables：表（テーブル）データを格納\nfigures：図や絵を格納\n\n\n#### パラグラフドキュメント\nパラグラフをすべて抽出し、ページのメタデータを持つパラグラフドキュメントの作成\n#### テーブルドキュメント\nテーブルデータを抽出し、pandas DFに格納し、表のタイトル（coution）がある場合は紐づけ、ない場合は一つ上のパラグラフをタイトルが代わりにする。パラグラフドキュメントからテーブルデータの部分を置き換えしテーブルドキュメントの作成\n#### フィギュアドキュメント\nフィギュアデータを抽出し、ポリゴンデータ（ページの位置情報）pandas DFに格納。\nAzureのデータの構成を読み取るのとそれを使いやすいように処理するのが結構手間でした。ただ、処理したデータはかなり精度が上がって基本的には正しくLLMに渡せば正しく答えてくれるようになりました。\n**特にAzureのフィギュアのデータだけだとタイトルがついていない場合があり、何のグラフかわからないことが多いので一度その領域を切り出し、タイトルと注釈を加えた画像を作り、別保存しました。**\n\n\n\n参考にした記事\nhttps://qiita.com/nohanaga/items/1263f4a6bc909b6524c8\n\nテーブルなどは上記のサイトを参考で崇徳出来ると思うので図の取得のコード載せておきます。\nフィギュアのデータをデータベース化\n```\nAzureAIDI_documents_path = \"Azure AI Document Intelligenceで読み取ったデータを１９個保存\"\npdf_num ='PDFファイルを１～１９でナンバリング'\n\nfigures_df = pd.DataFrame(columns=['pdf_num', 'idx', 'pageNumber', 'polygon', 'paragraphs', 'caption',  'caption_polygon', 'caption_paragraphs', 'footnotes', 'footnotes_polygon', 'footnotes_paragraphs'])\nfor pdf_num, path in tqdm(enumerate(AzureAIDI_documents_path)):\n    f = open(path,\"rb\")\n    docs=pickle.load(f)\n\n\n    if docs[0].metadata['figures']:\n        for idx, figure in enumerate(docs[0].metadata['figures']):\n            pageNumber = ''\n            polygon = ''\n            paragraphs = []\n            caption = ''\n            caption_polygon = ''\n            caption_paragraphs = []\n            footnotes = ''\n            footnotes_polygon = ''\n            footnotes_paragraphs = []\n\n            # print(f\"--------Analysis of Figures #{idx + 1}--------\")\n\n            if 'caption' in figure and figure['caption']:\n                title = figure['caption'].get(\"content\")\n                if title:\n                    # print(f\"Caption: {title}\")\n                    caption = title\n\n                elements = figure['caption'].get(\"elements\")\n                if elements:\n                    # print(\"...caption elements involved:\")\n                    caption_paragraphs.extend(elements)\n                    # for item in elements:\n                    #   print(f\"......Item #{item}\")\n\n                captionBR = []\n                caption_boundingRegions = figure['caption'].get(\"boundingRegions\")\n                if caption_boundingRegions:\n                    # print(\"...caption bounding regions involved:\")\n                    for item in caption_boundingRegions:\n                        #print(f\"...Item #{item}\")\n                        # print(f\"......Item pageNumber: {item.get('pageNumber')}\")\n                        # print(f\"......Item polygon: {item.get('polygon')}\")\n                        captionBR = item.get('polygon')\n                        caption_polygon = item.get('polygon')\n\n            if 'footnotes' in figure and figure['footnotes']:\n                f_title = figure['footnotes'][0].get(\"content\")\n                if f_title:\n                    footnotes = f_title\n                f_elements = figure['footnotes'][0].get(\"elements\")\n                if f_elements:\n                    footnotes_paragraphs.extend(f_elements)\n\n                footnotes_BR = []\n                footnotes_boundingRegions = figure['footnotes'][0].get(\"boundingRegions\")\n                if footnotes_boundingRegions:\n                    for item in footnotes_boundingRegions:\n                        footnotes_BR = item.get('polygon')\n                        footnotes_polygon = item.get('polygon')\n\n            if 'elements' in figure and figure['elements']:\n                # print(\"Elements involved:\")\n                paragraphs.extend(figure['elements'])\n                # for item in figure['elements']:\n                    # print(f\"...Item #{item}\")\n\n            boundingRegions = figure.get(\"boundingRegions\")\n            if boundingRegions:\n                # print(\"Bounding regions involved:\")\n                for item in boundingRegions:\n                    #print(f\"...Item #{item}\")\n                    if captionBR != item.get('polygon'): #caption の polygon を除外したい\n                        # print(f\"......Item pageNumber: {item.get('pageNumber')}\")\n                        # print(f\"......Item polygon: {item.get('polygon')}\")\n                        pageNumber = item.get('pageNumber')\n                        polygon = item.get('polygon')\n\n            # figures_df.loc[idx] = [pdf_num, idx, pageNumber, polygon, paragraphs, caption, caption_polygon, caption_paragraphs]\n            figures_df.loc[len(figures_df)] = [pdf_num, idx, pageNumber, str(polygon), str(paragraphs), caption, str(caption_polygon), str(caption_paragraphs), footnotes, str(footnotes_polygon), str(footnotes_paragraphs)]\n\n```\n\n\n基本のPDFからの領域の切り出し保存\n```\nfrom PIL import Image\nimport fitz  # PyMuPDF\nimport mimetypes\nfrom mimetypes import guess_type\nfrom IPython.display import display_jpeg\n\ndef crop_image_from_image(image_path, page_number, bounding_box):\n    \"\"\"\n    Crops an image based on a bounding box.\n\n    :param image_path: Path to the image file.\n    :param page_number: The page number of the image to crop (for TIFF format).\n    :param bounding_box: A tuple of (left, upper, right, lower) coordinates for the bounding box.\n    :return: A cropped image.\n    :rtype: PIL.Image.Image\n    \"\"\"\n    with Image.open(image_path) as img:\n        if img.format == \"TIFF\":\n            # Open the TIFF image\n            img.seek(page_number)\n            img = img.copy()\n\n        # The bounding box is expected to be in the format (left, upper, right, lower).\n        cropped_image = img.crop(bounding_box)\n        return cropped_image\n\n\ndef crop_image_from_pdf_page(pdf_path, page_number, bounding_box):\n    \"\"\"\n    Crops a region from a given page in a PDF and returns it as an image.\n\n    :param pdf_path: Path to the PDF file.\n    :param page_number: The page number to crop from (0-indexed).\n    :param bounding_box: A tuple of (x0, y0, x1, y1) coordinates for the bounding box.\n    :return: A PIL Image of the cropped area.\n    \"\"\"\n    doc = fitz.open(pdf_path)\n    page = doc.load_page(page_number)\n\n    # Cropping the page. The rect requires the coordinates in the format (x0, y0, x1, y1).\n    # The coordinates are in points (1/72 inch).\n    bbx = [x * 72 for x in bounding_box]\n    rect = fitz.Rect(bbx)\n    pix = page.get_pixmap(matrix=fitz.Matrix(300/72, 300/72), clip=rect)\n    img = Image.frombytes(\"RGB\", [pix.width, pix.height], pix.samples)\n    doc.close()\n\n    return img\n\ndef crop_image_from_file(file_path, page_number, bounding_box):\n    \"\"\"\n    Crop an image from a file.\n\n    Args:\n        file_path (str): The path to the file.\n        page_number (int): The page number (for PDF and TIFF files, 0-indexed).\n        bounding_box (tuple): The bounding box coordinates in the format (x0, y0, x1, y1).\n\n    Returns:\n        A PIL Image of the cropped area.\n    \"\"\"\n    mime_type = mimetypes.guess_type(file_path)[0]\n\n    if mime_type == \"application/pdf\":\n        return crop_image_from_pdf_page(file_path, page_number, bounding_box)\n    else:\n        return crop_image_from_image(file_path, page_number, bounding_box)\n```\n\n切り出したPDFの領域にタイトルと注釈を追加\n```\nimport ast\nimport matplotlib.pyplot as plt\n\nfigures_df = '上記で作成'\n\ndef save_figures(pred_company, pred_pages):\n\n    save_files = []\n    company_num = comp_num[pred_company]\n\n    for page_num in pred_pages:\n        sort_df = figures_df[(figures_df.pdf_num == company_num)&(figures_df.pageNumber == page_num)].reset_index(drop=True)\n        polygons = []\n        titles = []\n        footnotes = []\n\n        for i in range(len(sort_df)):\n            polygon = sort_df.loc[i, 'polygon']\n            title_ = sort_df.loc[i, 'caption']\n            titles.append(title_)\n            footnote_ = sort_df.loc[i, 'footnotes']\n            footnotes.append(footnote_)\n            polygon_list = ast.literal_eval(polygon)\n            polygons.append(polygon_list)\n\n        # print('figures num : ' + str(len(polygons)))\n        for i in range(len(polygons)):\n            save_name = 'pdf_' + str(company_num) + '_page_' + str(page_num) + '_' + str(i) + '.png'\n\n            if os.path.exists(save_name):\n                save_files.append(save_name)\n            else:\n                polygon = polygons[i]\n                bounding_box = (polygon[0], polygon[1], polygon[4], polygon[5])\n                image = crop_image_from_pdf_page(pdfs[company_num], page_num-1,  bounding_box)\n                graph_title = titles[i]\n                graph_footnote = footnotes[i]\n\n                plt.imshow(image,)\n                plt.axis('off') # 縦軸と横軸のメモリを無くす\n                if type(graph_title) == float:\n                    pass\n                else:\n                    plt.title(graph_title)\n                if type(graph_footnote) == float:\n                    pass\n                else:\n                    plt.figtext(0.2, 0.05, graph_footnote)\n\n\n                plt.savefig(save_name, bbox_inches=\"tight\") # プロットされた図を保存\n                save_files.append(save_name)\n                # plt.show()\n                plt.close()\n\n    return save_files\n```\n\n\n\n## プロンプト\n\n#### 今回は、そのデータをLLMに効果的に渡し、一番良いの回答を得るための具体的な流れを解説します。\n\n全体の流れはこんな感じです。\n\n1. Retriever作成：各ライブラリとAzureのドキュメントを参考にRetrieverを作成\n2. コンテキスト検索：「クエリとシンプル答え」でコンテキストを検索\n3. ヒットページ特定：検索でヒットしたページを確定（場合によって前後のページを追加）\n4. テーブルデータ付きコンテキスト作成：Azureで作成したテーブルデータ込みのコンテキストを該当ページ丸ごとコンテキストとして渡す（コンテキスト①）\n5. 画像データ抽出＆保存：Azureで作成したフィギュアデータから該当ページの絵・グラフをPDFから抜き出し個別の画像として保存\n6. 画像部分のパラグラフ抽出：パラグラフドキュメントから絵・グラフの部分（パラグラフ番号で照合）を抜き出し（重複してしまうので省く）、コンテキスト②を作成\n7. LLMへテーブルデータ送信：LLMにコンテキスト①（テーブル）を渡し回答させる\n8. LLMへ画像データ送信：LLMにコンテキスト②と画像データ（複数の場合は複数）を渡し回答させる\n9. 最終回答：LLMに7と8の回答を渡し、総合的な答えを判断させる\n\n\nポイントはハイブリッド回答\nAzureで作成した個別のパラグラフから表データを置き換えたものと絵・グラフを抜き出して画像として渡していくハイブリッドでの回答をさせる形にしました。\n\n\n#### PDF処理完了とプロンプト工夫\nPDF処理が完了し、いよいよプロンプトの工夫に取り掛かることができました。しかし、最終日1週間前という状況だったので、かなり時間を使ってしまったという印象です。\n\n#### プロンプト試行錯誤の日々\nプロンプトというか、LLMにどう答えさせるかの部分について書いていきます。一通りプロンプトの工夫の方法を学び、それらを組み合わせて作成したのですが、質問ごとに良い結果と悪い結果に分かれました。特に答えさせるごとに回答が変わるので、何度も試行錯誤を繰り返しました。LLMにもSeedの指定ができるようで、それをしていればもっと検証が楽だったと思います。\n\n#### プロンプトの基本パターン\n・Few-shot\n・Chain-of-Thought（CoT)\n・自己整合性　Self-Consistency\n・Tree-of-Thought（ToT)\n・MAGIシステム\n・仮想スクリプトエンジン\n・Mock Prompt\n\nこのあたりの基本の作法を学び組わせました。\n\n#### 量より質！プロンプトは絞り込むべし\nまず工夫を知って、とりあえずたくさん書き出しました。しかし、各質問ごとに前に書いてうまくいっていたものができなくなったり、指示についても多くなると一つ一つが薄まる感じで、量を書けばいいんじゃないということが分かりました。\n\n#### MAGIシステムで役割分担\n特にMAGIシステムはうまくいったと思います。役割を変えることで変化をつけれるので、もう少し時間があれば深堀できたと思います。\n例えば、\n•\tレイヤー1：①財務担当、②経理担当、③広報担当\n•\tレイヤー2：①経営者、②アナリスト、③エコノミスト\n•\tレイヤー2-2：①経済学者、②数学者、③国家機関\nなどとすると、国家機関の役割が勝手に質問の答えとは関係ない会社の施策の良し悪しを評価しだしたり、今回の精度には無駄ですが、LLMの奥が深いなと感じました。\n\n\n#### 最終的なプロンプト構成\n最終的な構成としては、\n##### レイヤー1 \n①　シンプルなプロンプトで答えさせる（openAI）\n②　シンプルなプロンプトで答えさせる（gemini）\n分からない場合はわからないと答えさせる。\n\nレイヤーを分けた理由でもあるのですが、半分くらいはシンプルなプロンプトで正解を答えてくれます。逆にシンプルなプロンプトだと正解なのに難しい問題と同様に複雑な指示をするとかえって間違うことがありました。またAPIの料金の問題も含め、簡単に正解する場合をふるいにかけ掛けてしまいたかったからです。\nただシンプルだけで判断すると両方間違えることがあるのでレイヤー２には基本的には進みます。\n\n##### レイヤー2 Generate Answer1 \n③　①②の答えとMAGIシステムで役割を与えた4人に「テーブルデータコンテキスト」で推論させて答えを出させる\n④　①②の答えとMAGIシステムで役割を与えた4人に「画像データ＆コンテキスト」でと③での会話を新たなクエリとしてretrieverに検索し、コンテキストの範囲を拡大させてから推論させて答えを出させる\n⑤　③と④を会話として渡して総合プロンプト（役割なし）で「画像データ＆コンテキスト」で答えさせる\n\n\n**途中の処理として③での会話の文章と④の会話の文章はChat_histryとして格納してそれぞれコンテキストの検索やLLMが回答を考える参考に渡してます。**\n\n\n##### レイヤー3 Generate Answer2 　（レイヤー２の画像・テーブルの順番入れ替え）\n⑥　①②の答えとMAGIシステムで役割を与えた4人（③とは別の役割）に「画像データ＆コンテキスト」で推論させて答えを出させる\n⑦　①②の答えとMAGIシステムで役割を与えた4人（④とは別の役割）に「テーブルデータコンテキスト」でと⑥での会話を新たなクエリとしてretrieverに検索し、コンテキストの範囲を拡大させてから推論させて答えを出させる\n⑧　③と④を会話として渡して総合プロンプト（役割なし）で「画像データ＆コンテキスト」で答えさせる\n##### レイヤー4 Check Answer1 \n⑨　⑤と⑧の答えを見比べさせて同じであれば答え確定。同じでない場合を抽出\n⑩　レイヤー2を繰り返して答えを出させる（多少内容を変えて）\n##### レイヤー5 Check Answer2 \n⑨　⑧と⑩の答えを見比べさせて同じであれば答え確定。同じでない場合を抽出\n⑩　レイヤー3を繰り返して答えを出させる（多少内容を変えて）\n##### レイヤーLAST \n⑪　チェックを2回行ったので最後の答えをFinalとして提出\nこちらでモデル作成しました。最終的に95や集計問題はこのままでは対応できないと思うのでもう少し改良が必要だったと思います。MAGIシステムの役割に関しても抽出、計算、疑い、確認などを振ってましたが他にも試せたと思うので改良の余地ありです。\n\n\n\nレイヤー２のプロンプトは以下のような感じです。\nもっと洗練した文章にできると思いますがつぎはぎでこのような形までしかできませんでした。\n```\nanswer_prompt = f\"\"\"\n    - 4人の専門家が協力して質問に答えてください。\n    - その4人は財務担当の代表、広報担当の代表、数字を疑う担当の代表、確認担当の代表です。\n    - それぞれが多角的に考え、自分の回答への手順と参考としたデータを詳しく説明します。\n    - 各ステップで、各専門家はほかの人の考えを洗練し、その貢献を認めながらその考えを発展させます。\n    - 他人の説明に間違いがないか確認してから、再度「コンテキスト」を確認して、別の確認方法や違うデータで検証して考えを説明してください。\n    - 質問に対する答えが見つかるまでこのステップを繰り返し続けます。\n    - 全員の意見をまとめて、結論を出してください。\n\n    - 「質問」、「コンテキスト」、「table data」を参考にしてください。\n    - 文章で答える場合は要約せず必要な部分のみ抜き出し回答してください。\n    - コンテキストに回答が含まれない場合、「分かりません」と答えたうえでどんなことを探したらいいかアドバイスをください。\n    - アドバイスする場合は検索しやすい単語などを指摘してください。\n    - コンテキストは完全な文章ではなくretrieverで抜き出した文章であることに注意してください。\n    - コンテキストをつなぎ合わせて推論を行ってください。\n    - 数値を計算するときは参考値ではなく実績で計算すること。\n    - 最終的な回答は50トークン以内で答えれることを要求していますが議論は幅広く行ってください。\n    - 「小数第二位で四捨五入してください。」とあるのに回答に小数点第二位がある場合はペナルティ -1点。\n    - 「小数第一位で四捨五入してください。」とあるのに回答に小数点第一位がある場合はペナルティ -1点。\n\n    ## 数字を疑う担当の代表への特別指示\n    - 財務担当の代表、広報担当の代表の意見を疑いながら間違いがないか再検証してください。\n\n    ## 確認担当は以下のヒントから回答が正しいか確認してください。\n    ## ヒント\n    - 「simple_answer」は6割くらい正しいですが、4割くらい間違えなのであくまで参考にしてください。\n    - 通年、通期、上期、下期、半期、四半期の期間の違いによく注意する。\n    - 海外・国内の違いによく注意する。\n    - 社内・社外の違いにはよく注意する。\n    - 常勤の反対は非常勤、であることに注意してください。\n    - 年、月、日などの時間の指定にはよく注意する。\n    - ２つ中から選択する問題には理由でなく、選択肢のみ回答する。\n    - 上期と下期を足して1年間の数字になる。\n    - 2023年上期 123件、2023年下期 234件で、2023年は123+234=357件です。\n    - 順位を出す問題か判定してください。\n    - 順位を考える問題の場合は、まず大きい順（もしくは小さい順）に並び替えてください。\n    - 一番大きい、二番目に大きいなどを考える場合は大きい順に５つ抽出してそのうえで並び書てください。\n    - ひらがな・カタカナ・漢字を判定する場合、「ひらなが」があることに1点、「カタカナ」があることに1点、「漢字」があることに1点、を与え合計3点以上になっていることを確認してください。\n    - 問題文に回答を入れてフォーマットがあっているか確認してください。\n    - 例えばAを｢111｣として、Bを｢222｣のもの、Cは｢333｣の表記を同じようにする必要があることを確認してください。\n    - 東京、大阪、四国4か所、の合計は6か所です。\n    - 東京、名古屋、九州（8県）の合計は10か所です。\n    - 全てを答える場合、原文の要素を抜き出す。\n    - 回答に不必要な部分があれば省く。\n    - 抽出問題はまず初めに該当する項目をすべて洗い出してください。\n\n    ## 確認担当は以下の参考から回答が正しいか確認してください。\n    ## 回答には次を参考にしてください。\n    - Q:プロダクト・ライフサイクルの「導入期」、「成長期」、「成熟期」、の次はなんでしょうか？\n    - A:衰退期\n    - Q:12.345% を「小数第二位で四捨五入してください。」\n    - A:12.3%\n    - Q:12.345% を「小数第一位で四捨五入してください。」\n    - A:12%\n    - Q:進捗率が2023年度12.3%、2022年度23,4%である場合、2023年度は2022年度対比何％増加した？\n    - A:23.4% - 12.3% = 11,1% 答え：11.1%\n    - Q:甲100、乙200、どちらが大きいか？\n    - A:甲\n    - Q:〇〇と挙げていることは何ですか？\n    - A:原文をそのまま回答する。\n    - Q:「日本大和株式会社、東京営業所」の会社名にひらがなは含むか？\n    - A:含まない。「、」は会社名に含まれず、ひらがな扱いでもない。\n\n```\n\n答えが同一かの判定\n\n```\n# 比較　モデルを準備\nmodel_img_gemini =  \"gemini-2.0-flash-exp\"\ndef compare_answers(question, answer1, answer2):\n\n    compare_prompt = f\"\"\"\n        「question」の「answer1」と「answer2」を比較してその結果を\"Same\", \"Acceptable\", \"Different\"の中から一つだけ選んで答えてください. それぞれの定義は以下の通り.\n\n        # 定義\n        Same: answer1、answer2が問題に正しく回答しており, 同じ内容である.\n        Acceptable: answer1、answer2が全く同じではないが, ほぼ同じ意味である.\n        Different: answer1、answer2同じ内容でない。\n\n        ## question\n        {question}\n\n        ## answers\n        answer1:{answer1}\n        answer2:{answer2}\n\n\n        ## 出力形式\n        Same or Acceptable or Different\n        \"\"\"\n\n    response = model_gemini.generate_content(answer_prompt)\n    answer = response.text\n\n    return answer\n```\n\n\n最終的にはこちらを１０回くらい回しました。\nまだプロンプトが不安定なのか、seedの関係なのか、ちゃんと答えてくれる時と答えてくれないときがありました。\nそのため複数回実行し一番よさそうなものを提出しました。\n\nコンペに参加することでLLM/RAGのことを学ぶ機会が得れてほんとによかったです。\nこれからも重要な技術になると思うので引き続き勉強していこうかと思います。\nコンペを主宰していただいた皆様ありがとうございました。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-02-17T08:19:46+09:00",
        "group": null,
        "id": "49567b821097081d6918",
        "likes_count": 21,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 23,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "rag",
            "versions": []
          },
          {
            "name": "LLM",
            "versions": []
          }
        ],
        "title": "RAGを知って、一ヵ月で「第3回金融データ活用チャレンジ」ゴールドメダル(暫定)取得まで",
        "updated_at": "2025-02-17T14:14:32+09:00",
        "url": "https://qiita.com/tomo418/items/49567b821097081d6918",
        "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 1,
          "followers_count": 0,
          "github_login_name": null,
          "id": "tomo418",
          "items_count": 1,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 4010716,
          "profile_image_url": "https://lh3.googleusercontent.com/a/ACg8ocL5RtcmC_3FmS1gn3owGojIIwF0siKADCb7-eX5mUSRvpJ2qg=s96-c",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7530577182769775,
        "quality_score": 21,
        "python_code_score": 5,
        "python_code_blocks": 0
      },
      {
        "rendered_body": "<h2 data-sourcepos=\"2:1-2:18\">\n<span id=\"1-はじめに\" class=\"fragment\"></span><a href=\"#1-%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>1. はじめに</h2>\n<p data-sourcepos=\"3:1-4:77\">「毎月の経費精算でレシートの数字をひたすら入力するのが面倒...」<br>\n「紙の資料をデジタル化したいけど手作業は非効率...」</p>\n<p data-sourcepos=\"6:1-7:127\">こんな悩みを解決するのが<strong>OCR（Optical Character Recognition）技術</strong>です。<br>\n本記事ではPythonを使い、AIでレシートの文字を自動認識するシステムをゼロから構築します。</p>\n<p data-sourcepos=\"9:1-10:95\">実際に私がプロジェクトで導入したノウハウや、<br>\n「ここでハマった！」というトラブル事例も交えながら解説します。</p>\n<h2 data-sourcepos=\"12:1-12:30\">\n<span id=\"2-ocr技術の基礎知識\" class=\"fragment\"></span><a href=\"#2-ocr%E6%8A%80%E8%A1%93%E3%81%AE%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98\"><i class=\"fa fa-link\"></i></a>2. OCR技術の基礎知識</h2>\n<h3 data-sourcepos=\"14:1-14:16\">\n<span id=\"ocrとは\" class=\"fragment\"></span><a href=\"#ocr%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>OCRとは？</h3>\n<p data-sourcepos=\"15:1-15:110\">OCRは画像中の文字を検出・認識する技術で、以下のプロセスから構成されます：</p>\n<ol data-sourcepos=\"17:1-20:0\">\n<li data-sourcepos=\"17:1-17:60\">\n<strong>前処理</strong>：画像の傾き補正、ノイズ除去</li>\n<li data-sourcepos=\"18:1-18:72\">\n<strong>文字領域検出</strong>：テキストが存在する領域を特定</li>\n<li data-sourcepos=\"19:1-20:0\">\n<strong>文字認識</strong>：検出した領域の文字を解読</li>\n</ol>\n<h3 data-sourcepos=\"21:1-21:31\">\n<span id=\"主要ライブラリ比較\" class=\"fragment\"></span><a href=\"#%E4%B8%BB%E8%A6%81%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E6%AF%94%E8%BC%83\"><i class=\"fa fa-link\"></i></a>主要ライブラリ比較</h3>\n<table data-sourcepos=\"22:1-26:93\">\n<thead>\n<tr data-sourcepos=\"22:1-22:51\">\n<th data-sourcepos=\"22:2-22:18\">ライブラリ</th>\n<th data-sourcepos=\"22:20-22:27\">特徴</th>\n<th data-sourcepos=\"22:29-22:48\">適したケース</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"24:1-24:75\">\n<td data-sourcepos=\"24:2-24:12\">Tesseract</td>\n<td data-sourcepos=\"24:14-24:54\">オープンソース、多言語対応</td>\n<td data-sourcepos=\"24:56-24:72\">汎用的なOCR</td>\n</tr>\n<tr data-sourcepos=\"25:1-25:76\">\n<td data-sourcepos=\"25:2-25:10\">EasyOCR</td>\n<td data-sourcepos=\"25:12-25:46\">深層学習ベース、簡単API</td>\n<td data-sourcepos=\"25:48-25:73\">リアルタイム処理</td>\n</tr>\n<tr data-sourcepos=\"26:1-26:93\">\n<td data-sourcepos=\"26:2-26:15\">AWS Textract</td>\n<td data-sourcepos=\"26:17-26:54\">クラウドサービス、高精度</td>\n<td data-sourcepos=\"26:56-26:90\">企業向けソリューション</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"28:1-28:52\">今回は<strong>EasyOCR</strong>を選択。その理由は：</p>\n<ul data-sourcepos=\"29:1-32:0\">\n<li data-sourcepos=\"29:1-29:58\">インストールが簡単（<code>pip install easyocr</code>）</li>\n<li data-sourcepos=\"30:1-30:25\">日本語対応済み</li>\n<li data-sourcepos=\"31:1-32:0\">デフォルトで高い精度</li>\n</ul>\n<h2 data-sourcepos=\"33:1-33:27\">\n<span id=\"3-実装してみよう\" class=\"fragment\"></span><a href=\"#3-%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>3. 実装してみよう</h2>\n<h3 data-sourcepos=\"35:1-35:16\">\n<span id=\"環境準備\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>環境準備</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"36:1-38:3\"><div class=\"highlight\"><pre><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">easyocr</span> <span class=\"n\">opencv</span><span class=\"o\">-</span><span class=\"n\">python</span> <span class=\"n\">matplotlib</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"40:1-40:28\">\n<span id=\"最小限のocrコード\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%B0%8F%E9%99%90%E3%81%AEocr%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>最小限のOCRコード</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"41:1-64:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">easyocr</span>\n<span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n<span class=\"kn\">from</span> <span class=\"n\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"c1\"># リーダー初期化（日本語指定）\n</span><span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">easyocr</span><span class=\"p\">.</span><span class=\"nc\">Reader</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">ja</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># 画像読み込み\n</span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">receipt.jpg</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OCR実行\n</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"nf\">readtext</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 結果表示\n</span><span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">prob</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Text: </span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s\">, Confidence: </span><span class=\"si\">{</span><span class=\"n\">prob</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">top_left</span> <span class=\"o\">=</span> <span class=\"nf\">tuple</span><span class=\"p\">(</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n    <span class=\"n\">bottom_right</span> <span class=\"o\">=</span> <span class=\"nf\">tuple</span><span class=\"p\">(</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n    <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">rectangle</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">top_left</span><span class=\"p\">,</span> <span class=\"n\">bottom_right</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">imshow</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">show</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"66:1-66:52\">\n<span id=\"実行例レシート画像入力出力\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E4%BE%8B%E3%83%AC%E3%82%B7%E3%83%BC%E3%83%88%E7%94%BB%E5%83%8F%E5%85%A5%E5%8A%9B%E5%87%BA%E5%8A%9B\"><i class=\"fa fa-link\"></i></a>実行例（レシート画像入力→出力）</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"67:1-71:3\"><div class=\"highlight\"><pre><code>Text: 領収書, Confidence: 0.98  \nText: 2023年5月15日, Confidence: 0.95  \nText: ￥12,800, Confidence: 0.93  \n</code></pre></div></div>\n<h2 data-sourcepos=\"73:1-73:69\">\n<span id=\"4-実践的なテクニックとトラブルシューティング\" class=\"fragment\"></span><a href=\"#4-%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%81%A8%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>4. 実践的なテクニックとトラブルシューティング</h2>\n<h3 data-sourcepos=\"75:1-75:37\">\n<span id=\"精度向上のための前処理\" class=\"fragment\"></span><a href=\"#%E7%B2%BE%E5%BA%A6%E5%90%91%E4%B8%8A%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E5%89%8D%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>精度向上のための前処理</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"76:1-86:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">preprocess_image</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">):</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">)</span>\n    <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n    <span class=\"n\">denoised</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">fastNlMeansDenoising</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">thresholded</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">threshold</span><span class=\"p\">(</span><span class=\"n\">denoised</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> \n                                 <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">THRESH_BINARY</span> <span class=\"o\">+</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">THRESH_OTSU</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">thresholded</span>\n\n<span class=\"n\">processed_image</span> <span class=\"o\">=</span> <span class=\"nf\">preprocess_image</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">receipt.jpg</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"88:1-88:37\">\n<span id=\"よくあるエラーと解決策\" class=\"fragment\"></span><a href=\"#%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E8%A7%A3%E6%B1%BA%E7%AD%96\"><i class=\"fa fa-link\"></i></a>よくあるエラーと解決策</h3>\n<p data-sourcepos=\"89:1-90:73\"><strong>問題1</strong>：縦書き文字を認識しない<br>\n→ <code>reader = easyocr.Reader(['ja'], gpu=True)</code>でGPU加速を有効化</p>\n<p data-sourcepos=\"92:1-93:36\"><strong>問題2</strong>：数字と日本語の混在が苦手<br>\n→ カスタム辞書を追加：</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"94:1-100:3\"><div class=\"highlight\"><pre><code><span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">easyocr</span><span class=\"p\">.</span><span class=\"nc\">Reader</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">ja</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n    <span class=\"n\">recog_network</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">custom_model</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"n\">user_network_directory</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">./custom_net/</span><span class=\"sh\">'</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"102:1-102:51\">\n<span id=\"5-応用クラウド連携システム構築\" class=\"fragment\"></span><a href=\"#5-%E5%BF%9C%E7%94%A8%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E9%80%A3%E6%90%BA%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>5. 応用：クラウド連携システム構築</h2>\n<h3 data-sourcepos=\"104:1-104:31\">\n<span id=\"aws-textractとの比較例\" class=\"fragment\"></span><a href=\"#aws-textract%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>AWS Textractとの比較例</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"105:1-119:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">boto3</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">aws_textract_analyze</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">):</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"nf\">client</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">textract</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">rb</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">image</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">detect_document_text</span><span class=\"p\">(</span>\n            <span class=\"n\">Document</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">Bytes</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()}</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Text</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Blocks</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">BlockType</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">LINE</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># コスト比較（1000ページあたり）\n# EasyOCR: 無料（自前サーバー）\n# Textract: $15〜（高精度モード）\n</span></code></pre></div></div>\n<h3 data-sourcepos=\"121:1-121:55\">\n<span id=\"実プロジェクトでのアーキテクチャ例\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%81%AE%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>実プロジェクトでのアーキテクチャ例</h3>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"122:1-125:3\"><div class=\"highlight\"><pre><code>レシート画像 → S3バケット → Lambdaトリガー →  \n→ Textract処理 → DynamoDB保存 → 経費精算システム連携\n</code></pre></div></div>\n<h2 data-sourcepos=\"127:1-127:15\">\n<span id=\"6-まとめ\" class=\"fragment\"></span><a href=\"#6-%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>6. まとめ</h2>\n<h3 data-sourcepos=\"129:1-129:16\">\n<span id=\"メリット\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>メリット</h3>\n<ul data-sourcepos=\"130:1-132:0\">\n<li data-sourcepos=\"130:1-130:58\">手作業の工数削減（90%時間短縮の実績）</li>\n<li data-sourcepos=\"131:1-132:0\">既存システムと容易に連携可能</li>\n</ul>\n<h3 data-sourcepos=\"133:1-133:19\">\n<span id=\"デメリット\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>デメリット</h3>\n<ul data-sourcepos=\"134:1-136:0\">\n<li data-sourcepos=\"134:1-134:52\">特殊フォントや極端な傾きには弱い</li>\n<li data-sourcepos=\"135:1-136:0\">個人情報取り扱いには注意が必要</li>\n</ul>\n<p data-sourcepos=\"137:1-140:41\"><strong>今後の展望</strong>：<br>\nLLM（GPT-4等）と組み合わせ、<br>\n「￥12,800 → 経費カテゴリ『接待』自動分類」のような<br>\nさらに高度な処理が可能に！</p>\n<hr data-sourcepos=\"142:1-143:0\">\n<p data-sourcepos=\"144:1-146:127\">「実際に試してみたい！」という方は、<br>\nこちらのGoogle Colabサンプルをご利用ください：<br>\n<a href=\"https://colab.research.google.com/drive/1xyz...\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcolab.research.google.com%2Fassets%2Fcolab-badge.svg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=723c3bbc6dbd20eb9843375a1083256b\" alt=\"Open In Colab\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcolab.research.google.com%2Fassets%2Fcolab-badge.svg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=069f057abbac1ca989de17959cc57daf 1x\" data-canonical-src=\"https://colab.research.google.com/assets/colab-badge.svg\" loading=\"lazy\"></a></p>\n",
        "body": "\n## 1. はじめに  \n「毎月の経費精算でレシートの数字をひたすら入力するのが面倒...」  \n「紙の資料をデジタル化したいけど手作業は非効率...」  \n\nこんな悩みを解決するのが**OCR（Optical Character Recognition）技術**です。  \n本記事ではPythonを使い、AIでレシートの文字を自動認識するシステムをゼロから構築します。  \n\n実際に私がプロジェクトで導入したノウハウや、  \n「ここでハマった！」というトラブル事例も交えながら解説します。  \n\n## 2. OCR技術の基礎知識  \n\n### OCRとは？  \nOCRは画像中の文字を検出・認識する技術で、以下のプロセスから構成されます：  \n\n1. **前処理**：画像の傾き補正、ノイズ除去  \n2. **文字領域検出**：テキストが存在する領域を特定  \n3. **文字認識**：検出した領域の文字を解読  \n\n### 主要ライブラリ比較  \n| ライブラリ | 特徴 | 適したケース |  \n|------------|------|-------------|  \n| Tesseract | オープンソース、多言語対応 | 汎用的なOCR |  \n| EasyOCR | 深層学習ベース、簡単API | リアルタイム処理 |  \n| AWS Textract | クラウドサービス、高精度 | 企業向けソリューション |  \n\n今回は**EasyOCR**を選択。その理由は：  \n- インストールが簡単（`pip install easyocr`）  \n- 日本語対応済み  \n- デフォルトで高い精度  \n\n## 3. 実装してみよう  \n\n### 環境準備  \n```python\n!pip install easyocr opencv-python matplotlib\n```\n\n### 最小限のOCRコード  \n```python\nimport easyocr\nimport cv2\nfrom matplotlib import pyplot as plt\n\n# リーダー初期化（日本語指定）\nreader = easyocr.Reader(['ja'])\n\n# 画像読み込み\nimage = cv2.imread('receipt.jpg')\n\n# OCR実行\nresults = reader.readtext(image)\n\n# 結果表示\nfor (bbox, text, prob) in results:\n    print(f'Text: {text}, Confidence: {prob:.2f}')\n    top_left = tuple(map(int, bbox[0]))\n    bottom_right = tuple(map(int, bbox[2]))\n    cv2.rectangle(image, top_left, bottom_right, (0, 255, 0), 2)\n\nplt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\nplt.show()\n```\n\n### 実行例（レシート画像入力→出力）  \n```\nText: 領収書, Confidence: 0.98  \nText: 2023年5月15日, Confidence: 0.95  \nText: ￥12,800, Confidence: 0.93  \n```\n\n## 4. 実践的なテクニックとトラブルシューティング  \n\n### 精度向上のための前処理  \n```python\ndef preprocess_image(image_path):\n    image = cv2.imread(image_path)\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    denoised = cv2.fastNlMeansDenoising(gray, h=30)\n    _, thresholded = cv2.threshold(denoised, 0, 255, \n                                 cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n    return thresholded\n\nprocessed_image = preprocess_image('receipt.jpg')\n```\n\n### よくあるエラーと解決策  \n**問題1**：縦書き文字を認識しない  \n→ `reader = easyocr.Reader(['ja'], gpu=True)`でGPU加速を有効化  \n\n**問題2**：数字と日本語の混在が苦手  \n→ カスタム辞書を追加：  \n```python\nreader = easyocr.Reader(\n    ['ja'],\n    recog_network='custom_model',\n    user_network_directory='./custom_net/'\n)\n```\n\n## 5. 応用：クラウド連携システム構築  \n\n### AWS Textractとの比較例  \n```python\nimport boto3\n\ndef aws_textract_analyze(image_path):\n    client = boto3.client('textract')\n    with open(image_path, 'rb') as image:\n        response = client.detect_document_text(\n            Document={'Bytes': image.read()}\n        )\n    return [item['Text'] for item in response['Blocks'] if item['BlockType'] == 'LINE']\n\n# コスト比較（1000ページあたり）\n# EasyOCR: 無料（自前サーバー）\n# Textract: $15〜（高精度モード）\n```\n\n### 実プロジェクトでのアーキテクチャ例  \n```\nレシート画像 → S3バケット → Lambdaトリガー →  \n→ Textract処理 → DynamoDB保存 → 経費精算システム連携\n```\n\n## 6. まとめ  \n\n### メリット  \n- 手作業の工数削減（90%時間短縮の実績）  \n- 既存システムと容易に連携可能  \n\n### デメリット  \n- 特殊フォントや極端な傾きには弱い  \n- 個人情報取り扱いには注意が必要  \n\n**今後の展望**：  \nLLM（GPT-4等）と組み合わせ、  \n「￥12,800 → 経費カテゴリ『接待』自動分類」のような  \nさらに高度な処理が可能に！  \n\n---\n\n「実際に試してみたい！」という方は、  \nこちらのGoogle Colabサンプルをご利用ください：  \n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1xyz...)  \n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-06-04T13:22:36+09:00",
        "group": null,
        "id": "247be5c2f3e5efc452c1",
        "likes_count": 2,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 3,
        "tags": [
          {
            "name": "機械学習",
            "versions": []
          },
          {
            "name": "AI",
            "versions": []
          },
          {
            "name": "バイナリテック",
            "versions": []
          }
        ],
        "title": "猿でもわかるAIプログラミングシリーズ 🐵💻 AIでレシートの文字を読み取ってみた！（OCR入門）",
        "updated_at": "2025-06-04T13:22:36+09:00",
        "url": "https://qiita.com/BNR-Gigi/items/247be5c2f3e5efc452c1",
        "user": {
          "description": "",
          "facebook_id": "",
          "followees_count": 20,
          "followers_count": 444,
          "github_login_name": null,
          "id": "BNR-Gigi",
          "items_count": 350,
          "linkedin_id": "",
          "location": "",
          "name": "Gigi_Codes",
          "organization": "",
          "permanent_id": 4039389,
          "profile_image_url": "https://lh3.googleusercontent.com/a/ACg8ocIUUmN9pI9Ti_G2Q-OhbcVm4DnnVhytqPJGuOA-aBx3QGAw7C8=s96-c",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": "binarytech",
        "slide": false,
        "semantic_similarity": 0.8108505010604858,
        "quality_score": 20,
        "python_code_score": 5,
        "python_code_blocks": 5
      },
      {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:27\">\n<span id=\"この記事について\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>この記事について</h2>\n<p data-sourcepos=\"2:1-2:264\">RAGの精度向上には、元データの品質改善が欠かせません。本記事では、画像PDFのようにそのままでは検索できないドキュメントに対して、検索可能なPDFへ変換する検証を行った内容を紹介します。</p>\n<h2 data-sourcepos=\"4:1-4:15\">\n<span id=\"問題意識\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E6%84%8F%E8%AD%98\"><i class=\"fa fa-link\"></i></a>問題意識</h2>\n<p data-sourcepos=\"5:1-6:224\">画像PDFは、単純にアップロードするだけ(何も前処理を行わない)ではKendraやBedrock Knowledge Baseなどの検索サービスに同期できません。<br>\nそのため、これまではAmazon Bedrockなどを経由させ、基盤モデルを利用してOCRをかけ、テキストファイルに変換したうえで登録する、というプロセスを踏んでいました。</p>\n<p data-sourcepos=\"8:1-8:99\">ただこの方法だと、以下のような課題があると感じるようになりました。</p>\n<ul data-sourcepos=\"9:1-13:0\">\n<li data-sourcepos=\"9:1-9:62\">①元々あったPDFのページ数が失われてしまう</li>\n<li data-sourcepos=\"10:1-10:44\">②構造的なOCRがなかなか難しい</li>\n<li data-sourcepos=\"11:1-13:0\">③どこをどう読み取ったのか、という詳細の推論過程はブラックボックスになっている</li>\n</ul>\n<p data-sourcepos=\"14:1-16:52\">そこで今回は、次の2点を意識して検証を進めることにしました。<br>\n①「画像PDF」→「検索可能なPDF」に蘇らせる（テキスト情報を埋め込む）<br>\n② より高精度なOCRエンジンを使用する</p>\n<h2 data-sourcepos=\"20:1-20:21\">\n<span id=\"検証スタート\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88\"><i class=\"fa fa-link\"></i></a>検証スタート</h2>\n<div data-sourcepos=\"21:1-32:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"22:1-27:164\">前提条件<br>\nRAGの仕組みの構築は、Amazon BedrockのKnowledge Base（以下KBと記載）を使用し、<br>\nベクトルDBには、Pineconeを採用しました。<br>\n※ 検証を通して気づいたのですが、Pineconeの<a href=\"https://docs.pinecone.io/guides/indexes/create-an-index\" rel=\"nofollow noopener\" target=\"_blank\">Serverless index</a>を用いれば、かなり費用を抑えられると思いました。（私はAWS Marketplace 経由で利用していたので Standardプラン）<br>\n検証を行う中で、まあまあ使っていましたが、0.003ドルくらいにしか費用がかさまなかったです。従量課金なのがメリットですね。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F986b1de5-137b-4b48-a74e-e69ed5fa6d9d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=abd063fa3089c8f682c981a3e62397e3\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F986b1de5-137b-4b48-a74e-e69ed5fa6d9d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=abd063fa3089c8f682c981a3e62397e3\" alt=\"スクリーンショット 2025-04-29 15.40.04.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F986b1de5-137b-4b48-a74e-e69ed5fa6d9d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e1c8a9ce4549ebf4788029ba071a9ae1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/986b1de5-137b-4b48-a74e-e69ed5fa6d9d.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"29:1-29:164\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F6a498d49-9083-4fa9-bfb5-c34f97f77381.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=99b0b29a7d2ea6a578c40a36b975aaeb\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F6a498d49-9083-4fa9-bfb5-c34f97f77381.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=99b0b29a7d2ea6a578c40a36b975aaeb\" alt=\"スクリーンショット 2025-04-29 15.36.03.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F6a498d49-9083-4fa9-bfb5-c34f97f77381.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=08f12820a7576d5a5bbec77acf13990a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/6a498d49-9083-4fa9-bfb5-c34f97f77381.png\" loading=\"lazy\"></a></p>\n</div>\n</div>\n<h3 data-sourcepos=\"34:1-34:31\">\n<span id=\"検証で確かめること\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC%E3%81%A7%E7%A2%BA%E3%81%8B%E3%82%81%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>検証で確かめること</h3>\n<ul data-sourcepos=\"35:1-40:0\">\n<li data-sourcepos=\"35:1-37:145\">ページ数が正しく保持されること\n<ul data-sourcepos=\"36:5-37:145\">\n<li data-sourcepos=\"36:5-37:145\">OCR→PDFの過程で、正しくページ数を保持できているのか\n<ul data-sourcepos=\"37:9-37:145\">\n<li data-sourcepos=\"37:9-37:145\">検索を行った際に、「何ページ目から抽出できたのか」という情報が正しく抽出できているかで確認</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"38:1-40:0\">OCR精度はいかほどか（期待する情報がある程度取れてくるか？）\n<ul data-sourcepos=\"39:5-40:0\">\n<li data-sourcepos=\"39:5-40:0\">回答の正確性</li>\n</ul>\n</li>\n</ul>\n<h3 data-sourcepos=\"41:1-41:43\">\n<span id=\"検証に使用するドキュメント\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC%E3%81%AB%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>検証に使用するドキュメント</h3>\n<p data-sourcepos=\"42:1-44:164\">今回は、OCRを実現するアプローチとして2つの策を考え、検証してみました。<br>\n検証に共通して、適当な画像をスキャンし、PDFにしたものをS3に配置し、データソースとして指定します。（<code>test-input.pdf</code>と名付けます）<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F9aa13def-e727-40e0-8edf-95d73cbd5109.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3491a8b6cdc23a7078eb3c4a34cb6e5e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F9aa13def-e727-40e0-8edf-95d73cbd5109.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3491a8b6cdc23a7078eb3c4a34cb6e5e\" alt=\"スクリーンショット 2025-04-27 12.16.10.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F9aa13def-e727-40e0-8edf-95d73cbd5109.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=199ab743a32d68d88e8ef7d40424f965 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/9aa13def-e727-40e0-8edf-95d73cbd5109.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"46:1-48:164\">当然、このPDFは、検索ができる状況ではありません。<br>\n試しに、Amazon BedrockのKnowledge Baseを作成し、S3に配置した<code>test-input.pdf</code>と同期してみると、以下のように同期に失敗する旨のエラーが表示されています。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fca91c4cf-6de3-4819-9884-bc008f430746.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0b0326bc3819cbd04354ea5f3f2d0b34\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fca91c4cf-6de3-4819-9884-bc008f430746.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0b0326bc3819cbd04354ea5f3f2d0b34\" alt=\"スクリーンショット 2025-04-26 22.58.32.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fca91c4cf-6de3-4819-9884-bc008f430746.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=00cd9ac8ad13f670dda6b5886d8262c5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/ca91c4cf-6de3-4819-9884-bc008f430746.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"50:1-50:55\">\n<span id=\"検証において使用したpythonスクリプト\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9Fpython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>検証において使用したpythonスクリプト</h3>\n<div data-sourcepos=\"51:1-325:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"52:1-55:183\">今回の検証で使用した全体のpythonスクリプトを以下に添付します。<br>\n<a href=\"https://github.com/y-mae-dev/convert-searcheble-pdf-sample\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>にも公開したので、自己責任の上ご利用ください。<br>\n各手順の部分で、かいつまんで説明します。<br>\nなお、処理の全体像の図を記事最下部（<a href=\"#%E5%87%A6%E7%90%86%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\">処理イメージ</a>)の項に記載しましたので、気になる方は参考になれば幸いです。</p>\n<details><summary>検証で使用したスクリプト</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"59:1-323:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">fitz</span>\n<span class=\"kn\">from</span> <span class=\"n\">google.cloud</span> <span class=\"kn\">import</span> <span class=\"n\">documentai_v1</span> <span class=\"k\">as</span> <span class=\"n\">documentai</span>\n<span class=\"kn\">from</span> <span class=\"n\">google.cloud.documentai_toolbox</span> <span class=\"kn\">import</span> <span class=\"n\">document</span>\n<span class=\"kn\">from</span> <span class=\"n\">ocrmypdf</span> <span class=\"kn\">import</span> <span class=\"n\">exceptions</span><span class=\"p\">,</span> <span class=\"n\">hocrtransform</span><span class=\"p\">,</span> <span class=\"n\">ocr</span>\n\n<span class=\"c1\"># サービスアカウントキーのパスを環境変数に設定\n# NOTE 事前にスクリプトを実行するファイルと同じ階層に配置\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">GOOGLE_APPLICATION_CREDENTIALS</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">XXXXXXX.json</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># プロジェクトID・ロケーション・プロセッサIDを設定\n</span><span class=\"n\">project_id</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">your-project-id</span><span class=\"sh\">\"</span>\n<span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">us</span><span class=\"sh\">\"</span> <span class=\"c1\">#またはeu（プロセッサを作成したリージョン）\n</span><span class=\"n\">processor_id</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">your-processor-id</span><span class=\"sh\">\"</span> <span class=\"c1\">#（作成したプロセッサID）\n</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_pdf_by_ocrmypdf</span><span class=\"p\">(</span><span class=\"n\">input_pdf</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">output_pdf</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    OCRmyPDFを使ってPDFに透明テキストレイヤーを付与する\n\n    Args:\n        input_pdf (str): 入力PDFファイルパス\n        output_pdf (str): 出力PDFファイルパス\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nf\">ocr</span><span class=\"p\">(</span>\n            <span class=\"n\">input_file</span><span class=\"o\">=</span><span class=\"n\">input_pdf</span><span class=\"p\">,</span>\n            <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output_pdf</span><span class=\"p\">,</span>\n            <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">jpn</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">deskew</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">progress_bar</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] OCRが正常に完了: </span><span class=\"si\">{</span><span class=\"n\">output_pdf</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">exceptions</span><span class=\"p\">.</span><span class=\"n\">ExitStatusException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[ERROR] OCRmyPDFエラー: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">split_pdf_page_by_page</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    PDFファイルを1ページずつ分割し、個別ファイルとして保存する\n\n    Args:\n        input_path (str): 入力PDFファイルパス\n\n    Returns:\n        List[str]: 分割後の各ページPDFファイルパスリスト\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)</span>\n    <span class=\"n\">chunk_files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">base_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">)):</span>\n        <span class=\"n\">chunk_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">base_name</span><span class=\"si\">}</span><span class=\"s\">_page</span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">.pdf</span><span class=\"sh\">\"</span>\n        <span class=\"n\">chunk_pdf</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">()</span>\n        <span class=\"n\">chunk_pdf</span><span class=\"p\">.</span><span class=\"nf\">insert_pdf</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">,</span> <span class=\"n\">from_page</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">to_page</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">chunk_pdf</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">chunk_path</span><span class=\"p\">)</span>\n        <span class=\"n\">chunk_pdf</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n        <span class=\"n\">chunk_files</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">chunk_path</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pdf</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">chunk_files</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_hocr_to_pdf</span><span class=\"p\">(</span>\n    <span class=\"n\">hocr_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">background_pdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    hOCRファイルから透明テキストレイヤーを作成し、背景PDFと合成する\n\n    Args:\n        hocr_path (str): hOCRファイルパス\n        background_pdf_path (str): 背景PDFファイルパス\n        output_pdf_path (str): 出力PDFファイルパス\n        dpi (int, optional): 解像度（デフォルト300）\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">ocr_only_pdf_path</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">output_pdf_path</span><span class=\"p\">).</span><span class=\"nf\">with_suffix</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.ocr_only.pdf</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">transformer</span> <span class=\"o\">=</span> <span class=\"n\">hocrtransform</span><span class=\"p\">.</span><span class=\"nc\">HocrTransform</span><span class=\"p\">(</span><span class=\"n\">hocr_filename</span><span class=\"o\">=</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">),</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">dpi</span><span class=\"p\">)</span>\n    <span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">to_pdf</span><span class=\"p\">(</span><span class=\"n\">out_filename</span><span class=\"o\">=</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"p\">))</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 透明テキストPDF生成完了: </span><span class=\"si\">{</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">merge_background_and_ocr</span><span class=\"p\">(</span><span class=\"n\">background_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">ocr_only_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 背景と透明テキストを合成完了: </span><span class=\"si\">{</span><span class=\"n\">output_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"p\">).</span><span class=\"nf\">unlink</span><span class=\"p\">(</span><span class=\"n\">missing_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_background_and_ocr</span><span class=\"p\">(</span>\n    <span class=\"n\">background_pdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ocr_text_pdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    背景PDFと透明テキストレイヤーPDFを合成する\n\n    Args:\n        background_pdf_path (str): 背景PDFパス\n        ocr_text_pdf_path (str): 透明テキストPDFパス\n        output_pdf_path (str): 出力PDFパス\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">bg_doc</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">background_pdf_path</span><span class=\"p\">)</span>\n    <span class=\"n\">ocr_doc</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">ocr_text_pdf_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">page_num</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">bg_doc</span><span class=\"p\">)):</span>\n        <span class=\"n\">bg_page</span> <span class=\"o\">=</span> <span class=\"n\">bg_doc</span><span class=\"p\">[</span><span class=\"n\">page_num</span><span class=\"p\">]</span>\n        <span class=\"n\">bg_page</span><span class=\"p\">.</span><span class=\"nf\">show_pdf_page</span><span class=\"p\">(</span><span class=\"n\">bg_page</span><span class=\"p\">.</span><span class=\"n\">rect</span><span class=\"p\">,</span> <span class=\"n\">ocr_doc</span><span class=\"p\">,</span> <span class=\"n\">page_num</span><span class=\"p\">)</span>\n\n    <span class=\"n\">bg_doc</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">output_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">garbage</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">deflate</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">bg_doc</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n    <span class=\"n\">ocr_doc</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_document_with_docai</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Document AIでPDFをOCR処理する\n\n    Args:\n        file_path (str): 入力PDFパス\n\n    Returns:\n        documentai.Document: OCR処理結果\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"nc\">DocumentProcessorServiceClient</span><span class=\"p\">()</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">projects/</span><span class=\"si\">{</span><span class=\"n\">project_id</span><span class=\"si\">}</span><span class=\"s\">/locations/</span><span class=\"si\">{</span><span class=\"n\">location</span><span class=\"si\">}</span><span class=\"s\">/processors/</span><span class=\"si\">{</span><span class=\"n\">processor_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">rb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"nc\">ProcessRequest</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">raw_document</span><span class=\"o\">=</span><span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"nc\">RawDocument</span><span class=\"p\">(</span>\n            <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">application/pdf</span><span class=\"sh\">\"</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">process_document</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">document</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">save_docai_response_to_json</span><span class=\"p\">(</span>\n    <span class=\"n\">document_obj</span><span class=\"p\">:</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Document AIレスポンスをJSONファイルとして保存する\n\n    Args:\n        document_obj (Document): Documentオブジェクト\n        output_path (str): 出力JSONファイルパス\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">json_obj</span> <span class=\"o\">=</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">.</span><span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"n\">document_obj</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">json_obj</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_docai_response_to_hocr</span><span class=\"p\">(</span>\n    <span class=\"n\">docai_document</span><span class=\"p\">:</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">document_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Document AI JSONからhOCR形式に変換する\n\n    Args:\n        docai_document (Document): OCRドキュメント\n        title (str): hOCRファイルタイトル\n        document_path (str): Document AI JSONパス\n\n    Returns:\n        str: hOCRテキスト\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">wrapped_doc</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">.</span><span class=\"nf\">from_document_path</span><span class=\"p\">(</span><span class=\"n\">document_path</span><span class=\"o\">=</span><span class=\"n\">document_path</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapped_doc</span><span class=\"p\">.</span><span class=\"nf\">export_hocr_str</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_pdfs_with_pymupdf</span><span class=\"p\">(</span><span class=\"n\">pdf_files</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    複数PDFファイルを結合する\n\n    Args:\n        pdf_files (List[str]): PDFファイルリスト\n        output_path (str): 出力ファイルパス\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">merger</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">pdf_file</span> <span class=\"ow\">in</span> <span class=\"n\">pdf_files</span><span class=\"p\">:</span>\n        <span class=\"n\">merger</span><span class=\"p\">.</span><span class=\"nf\">insert_pdf</span><span class=\"p\">(</span><span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">pdf_file</span><span class=\"p\">))</span>\n    <span class=\"n\">merger</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">)</span>\n    <span class=\"n\">merger</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_searchable_pdf</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">use_docai</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    PDFをOCR処理して検索可能なPDFに変換する\n\n    Args:\n        input_path (str): 入力PDFパス\n        output_path (str): 出力PDFパス\n        use_docai (bool, optional): Document AIを使用するか（デフォルトTrue）\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 分割処理中: </span><span class=\"si\">{</span><span class=\"n\">input_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">chunk_files</span> <span class=\"o\">=</span> <span class=\"nf\">split_pdf_page_by_page</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)</span>\n    <span class=\"n\">processed_chunks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">temp_files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">chunk_file</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">chunk_files</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] ページ </span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">chunk_files</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> 処理中...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">chunk_file</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">hocr_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">base</span><span class=\"si\">}</span><span class=\"s\">.hocr.xml</span><span class=\"sh\">\"</span>\n        <span class=\"n\">json_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">base</span><span class=\"si\">}</span><span class=\"s\">.json</span><span class=\"sh\">\"</span>\n        <span class=\"n\">output_chunk</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">base</span><span class=\"si\">}</span><span class=\"s\">_processed.pdf</span><span class=\"sh\">\"</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">use_docai</span><span class=\"p\">:</span>\n                <span class=\"n\">docai_document</span> <span class=\"o\">=</span> <span class=\"nf\">process_document_with_docai</span><span class=\"p\">(</span><span class=\"n\">chunk_file</span><span class=\"p\">)</span>\n                <span class=\"nf\">save_docai_response_to_json</span><span class=\"p\">(</span><span class=\"n\">docai_document</span><span class=\"p\">,</span> <span class=\"n\">json_path</span><span class=\"p\">)</span>\n                <span class=\"n\">hocr_content</span> <span class=\"o\">=</span> <span class=\"nf\">convert_docai_response_to_hocr</span><span class=\"p\">(</span>\n                    <span class=\"n\">docai_document</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Chunk </span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">json_path</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                    <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">hocr_content</span><span class=\"p\">)</span>\n\n                <span class=\"nf\">convert_hocr_to_pdf</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">,</span> <span class=\"n\">chunk_file</span><span class=\"p\">,</span> <span class=\"n\">output_chunk</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nf\">process_pdf_by_ocrmypdf</span><span class=\"p\">(</span><span class=\"n\">chunk_file</span><span class=\"p\">,</span> <span class=\"n\">output_chunk</span><span class=\"p\">)</span>\n\n            <span class=\"n\">processed_chunks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">output_chunk</span><span class=\"p\">)</span>\n            <span class=\"n\">temp_files</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">chunk_file</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">use_docai</span><span class=\"p\">:</span>\n                <span class=\"n\">temp_files</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">hocr_path</span><span class=\"p\">,</span> <span class=\"n\">json_path</span><span class=\"p\">]</span>\n\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[ERROR] ページ </span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\"> 処理失敗: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 各ページを結合中...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">merge_pdfs_with_pymupdf</span><span class=\"p\">(</span><span class=\"n\">processed_chunks</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">temp_files</span> <span class=\"o\">+</span> <span class=\"n\">processed_chunks</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[WARN] 一時ファイル削除失敗: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s\"> -&gt; </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[DONE] 完了: </span><span class=\"si\">{</span><span class=\"n\">output_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 実行部分\n</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">使用方法: python script.py 入力PDF 出力PDF [use_docai]</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nf\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">input_pdf</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">output_pdf</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"n\">use_docai</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">true</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">use_docai</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">GOOGLE_APPLICATION_CREDENTIALS</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">[WARN] 認証情報が設定されていません。</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">make_searchable_pdf</span><span class=\"p\">(</span><span class=\"n\">input_pdf</span><span class=\"p\">,</span> <span class=\"n\">output_pdf</span><span class=\"p\">,</span> <span class=\"n\">use_docai</span><span class=\"p\">)</span>\n</code></pre></div></div>\n</details>\n</div>\n</div>\n<h4 data-sourcepos=\"327:1-327:59\">\n<span id=\"-pythonライブラリocrmypdfを使ってocr\" class=\"fragment\"></span><a href=\"#-python%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AAocrmypdf%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ocr\"><i class=\"fa fa-link\"></i></a>① pythonライブラリ「OCRmyPDF」を使ってOCR</h4>\n<h5 data-sourcepos=\"328:1-328:20\">\n<span id=\"ocrmypdfとは\" class=\"fragment\"></span><a href=\"#ocrmypdf%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>OCRmyPDFとは</h5>\n<p data-sourcepos=\"329:1-329:36\"><iframe id=\"qiita-embed-content__225c0fbe5246c76d84781093f6e08ae3\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__225c0fbe5246c76d84781093f6e08ae3\" data-content=\"https%3A%2F%2Fgithub.com%2Focrmypdf%2FOCRmyPDF\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<blockquote data-sourcepos=\"331:1-331:144\">\n<p data-sourcepos=\"331:2-331:144\">OCRmyPDF adds an OCR text layer to scanned PDF files, allowing them to be searched or copy-pasted.（GitHubリポジトリ説明から引用）</p>\n</blockquote>\n<p data-sourcepos=\"333:1-336:79\">OCRmyPDFは、<br>\nスキャンされたPDFファイルにテキストを埋め込むことができる役割を担っています。<br>\nオープンソースのOCRエンジンである、<a href=\"https://github.com/tesseract-ocr/tesseract\" rel=\"nofollow noopener\" target=\"_blank\">「Tesseract OCR」</a>が内部的に使われています。<br>\nTesseract OCRは、日本語を含めた多言語にも対応しています。</p>\n<h5 data-sourcepos=\"338:1-338:58\">\n<span id=\"手順1-ocrmypdfライブラリをインストール\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%861-ocrmypdf%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>手順1 ocrmypdfライブラリをインストール</h5>\n<div data-sourcepos=\"340:1-347:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"341:1-342:56\">uvを使って検証を行いました。<br>\n検証時点でのバージョンは<code>uv 0.6.12</code>です。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"343:1-346:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>uv version\nuv 0.6.12 <span class=\"o\">(</span>e4e03833f 2025-04-02<span class=\"o\">)</span>\n</code></pre></div></div>\n</div>\n</div>\n<p data-sourcepos=\"349:1-349:188\"><code>uv init</code>で任意のプロジェクトを作成したのちに、下記を実行します。これでプログラムからocrmypdfライブラリを呼び出す準備が整いました。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"350:1-352:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>uv add ocrmypdf\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"353:1-355:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>uv <span class=\"nb\">sync</span>\n</code></pre></div></div>\n<h5 data-sourcepos=\"357:1-357:47\">\n<span id=\"手順2-プログラムから呼び出す\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%862-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99\"><i class=\"fa fa-link\"></i></a>手順2 プログラムから呼び出す</h5>\n<p data-sourcepos=\"358:1-360:70\">OCR処理は<a href=\"https://ocrmypdf.readthedocs.io/en/v11.2.1/api.html#ocrmypdf.ocr\" rel=\"nofollow noopener\" target=\"_blank\">ocrmypdf.ocr</a>が担っているので、これを使います。<br>\n<code>input_file</code>にはOCRをかけたいファイルのパスを、<br>\n<code>output_file</code>にはOCR結果の出力先のパスを指定します。</p>\n<p data-sourcepos=\"362:1-362:203\"><code>--language</code>オプションをつけることで、もとドキュメントの言語を指定することができます。（多くの場合は<code>jpn</code>）を指定することになるかと思います。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"365:1-390:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"n\">ocrmypdf</span> <span class=\"kn\">import</span> <span class=\"n\">ocr</span><span class=\"p\">,</span> <span class=\"n\">exceptions</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_pdf_by_ocrmypdf</span><span class=\"p\">(</span><span class=\"n\">input_pdf</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">output_pdf</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    OCRmyPDFを使ってPDFに透明テキストレイヤーを付与する\n\n    Args:\n        input_pdf (str): 入力PDFファイルのパス\n        output_pdf (str): 出力PDFファイルのパス\n\n    Returns:\n        None\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nf\">ocr</span><span class=\"p\">(</span>\n            <span class=\"n\">input_file</span><span class=\"o\">=</span><span class=\"n\">input_pdf</span><span class=\"p\">,</span>\n            <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"n\">output_pdf</span><span class=\"p\">,</span>\n            <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">jpn</span><span class=\"sh\">\"</span><span class=\"p\">,</span>     \n            <span class=\"n\">deskew</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>        <span class=\"c1\"># 傾きを補正するオプション\n</span>            <span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>         <span class=\"c1\"># ノイズ除去をするオプション\n</span>            <span class=\"n\">progress_bar</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># 処理状況をターミナルで確認可能にする\n</span>        <span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] OCRが正常に完了: </span><span class=\"si\">{</span><span class=\"n\">output_pdf</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">exceptions</span><span class=\"p\">.</span><span class=\"n\">ExitCodeException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[ERROR] OCR実行中にエラー: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"392:1-393:48\"><code>progress_bar=True</code>をつけると、OCR処理の進捗状況をターミナル上で確認することができます。<br>\n出力結果は以下のようになります。</p>\n<details><summary>プログレスバー出力イメージ</summary>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"397:1-430:3\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>uv run convert_to_searchable_pdf_v2.py test-input.pdf test-output.pdf <span class=\"nb\">false</span>\n<span class=\"o\">[</span>INFO] 分割処理中: test-input.pdf\n<span class=\"o\">[</span>INFO] チャンク 1/3 処理中...\nScanning contents     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\n<span class=\"o\">[</span>tesseract] lots of diacritics - possibly poor OCR\nOCR                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nPDF/A conversion      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nLinearizing           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 100/100 0:00:00\nRecompressing JPEGs   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\nDeflating JPEGs       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nJBIG2                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\n<span class=\"o\">[</span>INFO] OCRが正常に完了: test-input_page1_processed.pdf\n<span class=\"o\">[</span>INFO] チャンク 2/3 処理中...\nScanning contents     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nOCR                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nPDF/A conversion      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nLinearizing           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 100/100 0:00:00\nRecompressing JPEGs   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\nDeflating JPEGs       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nJBIG2                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\n<span class=\"o\">[</span>INFO] OCRが正常に完了: test-input_page2_processed.pdf\n<span class=\"o\">[</span>INFO] チャンク 3/3 処理中...\nScanning contents     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nOCR                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nPDF/A conversion      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nLinearizing           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 100/100 0:00:00\nRecompressing JPEGs   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\nDeflating JPEGs       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nJBIG2                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\n<span class=\"o\">[</span>INFO] OCRが正常に完了: test-input_page3_processed.pdf\n<span class=\"o\">[</span>INFO] チャンク結合中...\n<span class=\"o\">[</span>DONE] 完了: test-output.pdf\n</code></pre></div></div>\n</details>\n<h4 data-sourcepos=\"434:1-434:80\">\n<span id=\"-google-cloudのocrサービスdocument-aiを使ってocrを行う\" class=\"fragment\"></span><a href=\"#-google-cloud%E3%81%AEocr%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9document-ai%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ocr%E3%82%92%E8%A1%8C%E3%81%86\"><i class=\"fa fa-link\"></i></a>② Google CloudのOCRサービス「Document AI」を使ってOCRを行う</h4>\n<h5 data-sourcepos=\"435:1-435:23\">\n<span id=\"document-aiとは\" class=\"fragment\"></span><a href=\"#document-ai%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Document AIとは</h5>\n<p data-sourcepos=\"436:1-438:194\">Google CloudのOCRサービスです。<br>\n料金体系は以下のようになっています。<br>\nEnterprise Document OCR プロセッサを使う場合では、1000ページごとに1.5$ということで、少量のデータであれば比較的安価にOCRをすることができます。</p>\n<p data-sourcepos=\"440:1-440:108\">料金体系は以下のページに記載がありますので、詳細はこちらをご覧ください。</p>\n<p data-sourcepos=\"442:1-442:50\"><iframe id=\"qiita-embed-content__5aaf2a9cae71bc6609751e9f6a69aa24\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5aaf2a9cae71bc6609751e9f6a69aa24\" data-content=\"https%3A%2F%2Fcloud.google.com%2Fdocument-ai%2Fpricing%3Fhl%3Dja\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"445:1-446:106\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fe585592d-ae94-44a1-bf78-fddb0d07d942.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8d59d1207307093523d6ab20ba569d68\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fe585592d-ae94-44a1-bf78-fddb0d07d942.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8d59d1207307093523d6ab20ba569d68\" alt=\"スクリーンショット 2025-04-29 12.27.39.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fe585592d-ae94-44a1-bf78-fddb0d07d942.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7ebe26c475a060aee955dcb74f9feaa7 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/e585592d-ae94-44a1-bf78-fddb0d07d942.png\" loading=\"lazy\"></a><br>\n上記のようにGoogle Cloud コンソール上から簡単にテストすることができますが、</p>\n<p data-sourcepos=\"449:1-449:73\">今回はGoogle Cloud SDK経由から呼び出すことを考えます。</p>\n<p data-sourcepos=\"451:1-453:69\">利用に際しては<br>\nサービスアカウントの認証情報作成、プロセッサの作成など事前準備が必要となります。<br>\nこちらのチュートリアル（1-5）が参考になります。</p>\n<p data-sourcepos=\"455:1-455:72\"><iframe id=\"qiita-embed-content__53f074228b5b5fc34625d85b6c85b416\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__53f074228b5b5fc34625d85b6c85b416\" data-content=\"https%3A%2F%2Fcodelabs.developers.google.com%2Fcodelabs%2Fdocai-ocr-python%3Fhl%3Dja%234\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h5 data-sourcepos=\"457:1-457:85\">\n<span id=\"手順1document-ai-toolboxを用いて画像pdfをhocr形式に変換する\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%861document-ai-toolbox%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6%E7%94%BB%E5%83%8Fpdf%E3%82%92hocr%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>手順1.Document AI ToolBoxを用いて、画像PDFをhocr形式に変換する</h5>\n<p data-sourcepos=\"458:1-458:91\"><iframe id=\"qiita-embed-content__b759fac6312ce352c5bb2bf4883e9762\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b759fac6312ce352c5bb2bf4883e9762\" data-content=\"https%3A%2F%2Fcloud.google.com%2Fdocument-ai%2Fdocs%2Fsamples%2Fdocumentai-toolbox-document-to-hocr%3Fhl%3Dja\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"460:1-460:231\">Document AIには、<a href=\"https://cloud.google.com/document-ai/docs/toolbox?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">Toolbox</a>と呼ばれる、OCR結果を2次利用しやすい形式に変換するためのクライアントライブラリが用意されています。</p>\n<div data-sourcepos=\"462:1-464:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"463:1-463:192\">インストール方法は<a href=\"https://cloud.google.com/document-ai/docs/libraries?hl=ja#install\" rel=\"nofollow noopener\" target=\"_blank\">クライアントライブラリをインストールする</a>の項を参照してください。</p>\n</div>\n</div>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"466:1-483:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">convert_docai_response_to_hocr</span><span class=\"p\">(</span>\n    <span class=\"n\">docai_document</span><span class=\"p\">:</span> <span class=\"n\">documentai</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">document_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    JSON（Document AIのレスポンスが入っている）をhOCR形式に変換する\n\n    Args:\n        docai_document (Document): OCRドキュメント\n        title (str): hOCRファイルタイトル\n        document_path (str): Document AI JSONパス\n\n    Returns:\n        str: hOCRテキスト\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">wrapped_doc</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"n\">Document</span><span class=\"p\">.</span><span class=\"nf\">from_document_path</span><span class=\"p\">(</span><span class=\"n\">document_path</span><span class=\"o\">=</span><span class=\"n\">document_path</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapped_doc</span><span class=\"p\">.</span><span class=\"nf\">export_hocr_str</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"484:1-487:166\">その中に、Document AIによるOCR結果のレスポンス（JSON形式）をhocr形式に変換するツールがあったため、今回はこれを使用します。<br>\n変換された結果が以下です。（掲載しているのは一部です）<br>\n<code>bbox</code>という記述が多くありますが、これはOCRによって検出された物体(画像やテキストなど)の領域のことを指すようです。<br>\nつまり出力されたhocr形式のファイルは「どこに、何が書いてあるかを詳細にまとめたXML形式のファイル」と言えそうです。</p>\n<div class=\"code-frame\" data-lang=\"xml\" data-sourcepos=\"489:1-508:3\"><div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"unknown\"</span> <span class=\"na\">lang=</span><span class=\"s\">\"unknown\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;head&gt;</span>\n<span class=\"nt\">&lt;title&gt;</span>Chunk 2<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"Content-Type\"</span> <span class=\"na\">content=</span><span class=\"s\">\"text/html;charset=utf-8\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"ocr-system\"</span> <span class=\"na\">content=</span><span class=\"s\">\"Document AI OCR\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"ocr-langs\"</span> <span class=\"na\">content=</span><span class=\"s\">\"unknown\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"ocr-scripts\"</span> <span class=\"na\">content=</span><span class=\"s\">\"unknown\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"ocr-number-of-pages\"</span> <span class=\"na\">content=</span><span class=\"s\">\"1\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"ocr-capabilities\"</span> <span class=\"na\">content=</span><span class=\"s\">\"ocrp_lang ocr_page ocr_carea ocr_par ocr_line ocrx_word\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">'ocr_page'</span> <span class=\"na\">lang=</span><span class=\"s\">'unknown'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 0 0 1626 2459'</span><span class=\"nt\">&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocr_carea'</span> <span class=\"na\">id=</span><span class=\"s\">'block_1_0'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 400 54 797 61'</span><span class=\"nt\">&gt;&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">'ocr_par'</span> <span class=\"na\">id=</span><span class=\"s\">'par_1_0_0'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 400 54 797 61'</span><span class=\"nt\">&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocr_line'</span> <span class=\"na\">id=</span><span class=\"s\">'line_1_0_0_0'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 400 54 797 61'</span><span class=\"nt\">&gt;</span>かわさきの上下水道 No.59 令和7年3月\n<span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_0'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 400 54 475 71'</span><span class=\"nt\">&gt;</span>かわさき<span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_1'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 479 52 498 69'</span><span class=\"nt\">&gt;</span>の<span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_2'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 498 51 580 68'</span><span class=\"nt\">&gt;</span>上下水道 <span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_3'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 600 48 654 65'</span><span class=\"nt\">&gt;</span>No.59 <span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_4'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 676 46 715 64'</span><span class=\"nt\">&gt;</span>令和<span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_5'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 720 45 732 63'</span><span class=\"nt\">&gt;</span>7<span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_6'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 738 44 757 61'</span><span class=\"nt\">&gt;</span>年<span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_7'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 763 44 774 62'</span><span class=\"nt\">&gt;</span>3<span class=\"nt\">&lt;/span&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">'ocrx_word'</span> <span class=\"na\">id=</span><span class=\"s\">'word_1_0_0_0_8'</span> <span class=\"na\">title=</span><span class=\"s\">'bbox 781 43 798 61'</span><span class=\"nt\">&gt;</span>月\n....中略\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n<h5 data-sourcepos=\"511:1-511:51\">\n<span id=\"手順2hocr形式からpdfに変換する\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%862hocr%E5%BD%A2%E5%BC%8F%E3%81%8B%E3%82%89pdf%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>手順2.hocr形式から、PDFに変換する</h5>\n<p data-sourcepos=\"512:1-512:246\">OCRmyPDFのライブラリで、hocr形式からPDFに変換を行うことのできる<a href=\"https://ocrmypdf.readthedocs.io/en/latest/apiref.html#module-ocrmypdf.hocrtransform\" rel=\"nofollow noopener\" target=\"_blank\"><code>hocrtransform</code></a>メソッドがあるため、これを利用します。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"513:1-521:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">convert_hocr_to_pdf</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">,</span> <span class=\"n\">background_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">hOCRファイルから透明テキストレイヤーを作成するサンプルコード</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">ocr_only_pdf_path</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">output_pdf_path</span><span class=\"p\">).</span><span class=\"nf\">with_suffix</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.ocr_only.pdf</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">transformer</span> <span class=\"o\">=</span> <span class=\"n\">hocrtransform</span><span class=\"p\">.</span><span class=\"nc\">HocrTransform</span><span class=\"p\">(</span><span class=\"n\">hocr_filename</span><span class=\"o\">=</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">),</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">dpi</span><span class=\"p\">)</span>\n    <span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">to_pdf</span><span class=\"p\">(</span><span class=\"n\">out_filename</span><span class=\"o\">=</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"p\">))</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 透明テキストPDF生成完了: </span><span class=\"si\">{</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"522:1-524:43\">変換結果は以下のようになりした。<br>\nコード内にも記載していますが、あくまでもここでは検出されたテキストがPDF内に埋め込まれるだけです。なので文字列検索には引っかかりますが、こちら側からは確認ができません。<br>\nこの問題を手順3で解決します。</p>\n<p data-sourcepos=\"527:1-527:164\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fba01fdae-1de6-44a5-b76b-da5a1428b7b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1281b85a0ce10743a5b7668930310ccc\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fba01fdae-1de6-44a5-b76b-da5a1428b7b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1281b85a0ce10743a5b7668930310ccc\" alt=\"スクリーンショット 2025-04-29 12.50.59.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fba01fdae-1de6-44a5-b76b-da5a1428b7b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f0b252c00a37873b57203f88ec9e9e8a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/ba01fdae-1de6-44a5-b76b-da5a1428b7b8.png\" loading=\"lazy\"></a></p>\n<h5 data-sourcepos=\"530:1-530:80\">\n<span id=\"手順3透明テキストが含まれるpdfと元pdfを重ね合わせる\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%863%E9%80%8F%E6%98%8E%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8Bpdf%E3%81%A8%E5%85%83pdf%E3%82%92%E9%87%8D%E3%81%AD%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>手順3.透明テキストが含まれるPDFと元PDFを重ね合わせる</h5>\n<p data-sourcepos=\"531:1-531:130\">手順2で生じた問題を解決するため、元の画像PDFに、テキストを重ね合わせる処理を追加します。</p>\n<div class=\"code-frame\" data-lang=\"diff_python\" data-sourcepos=\"533:1-544:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">convert_hocr_to_pdf</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">,</span> <span class=\"n\">background_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">):</span>\n<span class=\"hil\"><span class=\"o\">+ </span>  <span class=\"sh\">\"\"\"</span><span class=\"s\">hOCRファイルから透明テキストレイヤーを作成し、背景PDFと合成する</span><span class=\"sh\">\"\"\"</span>\n</span>    <span class=\"n\">ocr_only_pdf_path</span> <span class=\"o\">=</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">output_pdf_path</span><span class=\"p\">).</span><span class=\"nf\">with_suffix</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.ocr_only.pdf</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">transformer</span> <span class=\"o\">=</span> <span class=\"n\">hocrtransform</span><span class=\"p\">.</span><span class=\"nc\">HocrTransform</span><span class=\"p\">(</span><span class=\"n\">hocr_filename</span><span class=\"o\">=</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">hocr_path</span><span class=\"p\">),</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">dpi</span><span class=\"p\">)</span>\n    <span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">to_pdf</span><span class=\"p\">(</span><span class=\"n\">out_filename</span><span class=\"o\">=</span><span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"p\">))</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 透明テキストPDF生成完了: </span><span class=\"si\">{</span><span class=\"n\">ocr_only_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nf\">merge_background_and_ocr</span><span class=\"p\">(</span><span class=\"n\">background_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">ocr_only_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">)</span>\n</span><span class=\"hil\"><span class=\"o\">+ </span>   <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[INFO] 背景と透明テキストを合成完了: </span><span class=\"si\">{</span><span class=\"n\">output_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</span></code></pre></div></div>\n<p data-sourcepos=\"546:1-546:65\">新たに、関数<code>merge_background_and_ocr</code>を作成します。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"547:1-560:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">merge_background_and_ocr</span><span class=\"p\">(</span><span class=\"n\">background_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">ocr_text_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">output_pdf_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">背景PDFと透明テキストレイヤーPDFを合成</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">bg_doc</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">background_pdf_path</span><span class=\"p\">)</span>\n    <span class=\"n\">ocr_doc</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">ocr_text_pdf_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">page_num</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">bg_doc</span><span class=\"p\">)):</span>\n        <span class=\"n\">bg_page</span> <span class=\"o\">=</span> <span class=\"n\">bg_doc</span><span class=\"p\">[</span><span class=\"n\">page_num</span><span class=\"p\">]</span>\n        <span class=\"n\">bg_page</span><span class=\"p\">.</span><span class=\"nf\">show_pdf_page</span><span class=\"p\">(</span><span class=\"n\">bg_page</span><span class=\"p\">.</span><span class=\"n\">rect</span><span class=\"p\">,</span> <span class=\"n\">ocr_doc</span><span class=\"p\">,</span> <span class=\"n\">page_num</span><span class=\"p\">)</span>\n\n    <span class=\"n\">bg_doc</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">output_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">garbage</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">deflate</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">bg_doc</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n    <span class=\"n\">ocr_doc</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p data-sourcepos=\"561:1-563:120\">今回は<code>pymupdf</code>ライブラリの<a href=\"https://pymupdf.readthedocs.io/ja/latest/page.html#Page.show_pdf_page\" rel=\"nofollow noopener\" target=\"_blank\"><code>show_pdf_page</code></a>メソッドを使用しました。<br>\nこのメソッドはあるPDFの特定のページの内容を、別のPDFに描画できるメソッドで、<br>\n処理内では、画像PDFの上に、透明テキストが含まれるOCR済みのPDFを重ね合わせています。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"565:1-577:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># 補足\n# bg.rect→配置場所（「どこに重ね合わせるか」）\n# ocr_doc→OCR済みの、テキスト情報だけが存在するPDF（「何を重ね合わせるか」）\n# page_num→重ね合わせる対象のページ数\n</span><span class=\"n\">bg_page</span><span class=\"p\">.</span><span class=\"nf\">show_pdf_page</span><span class=\"p\">(</span><span class=\"n\">bg_page</span><span class=\"p\">.</span><span class=\"n\">rect</span><span class=\"p\">,</span> <span class=\"n\">ocr_doc</span><span class=\"p\">,</span> <span class=\"n\">page_num</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># saveメソッドについては以下を参照\n# https://pymupdf.readthedocs.io/ja/latest/document.html#Document.save\n## garbage=4にすることで不要なコンテンツを削除してくれる。\n## deflate=Trueにすることでファイルを圧縮してくれる。\n</span>\n</code></pre></div></div>\n<p data-sourcepos=\"578:1-578:129\">手順1-3の処理を以て、画像PDFからテキスト情報を埋め込んだPDFへの変換を行うことができます。</p>\n<h2 data-sourcepos=\"581:1-581:30\">\n<span id=\"ragの結果を見てみる\" class=\"fragment\"></span><a href=\"#rag%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>RAGの結果を見てみる</h2>\n<h3 data-sourcepos=\"582:1-582:34\">\n<span id=\"簡単な質問をしてみる\" class=\"fragment\"></span><a href=\"#%E7%B0%A1%E5%8D%98%E3%81%AA%E8%B3%AA%E5%95%8F%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>簡単な質問をしてみる</h3>\n<p data-sourcepos=\"583:1-583:41\">KBを使って、RAGをしてみます。</p>\n<h4 data-sourcepos=\"585:1-585:41\">\n<span id=\"-ocrmypdfでocrを行った場合\" class=\"fragment\"></span><a href=\"#-ocrmypdf%E3%81%A7ocr%E3%82%92%E8%A1%8C%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>① OCRmypdfでOCRを行った場合</h4>\n<p data-sourcepos=\"586:1-587:164\">元々の画像PDFの2ページ目にあった、「工事をしないとどうなるの？」の項に関する質問をしてみます。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fbf1222b3-a25a-46d2-beca-85f1b76032f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=05d7aa8b72c42507dbe879619dff1f4d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fbf1222b3-a25a-46d2-beca-85f1b76032f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=05d7aa8b72c42507dbe879619dff1f4d\" alt=\"スクリーンショット 2025-04-29 11.41.48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2Fbf1222b3-a25a-46d2-beca-85f1b76032f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6ef38e4f2e74791b9a8be435bab236cc 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/bf1222b3-a25a-46d2-beca-85f1b76032f7.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"589:1-589:120\">「耐用年数を経過した水道管はどのくらいありますか？」という質問を投げてみました。</p>\n<p data-sourcepos=\"591:1-592:117\">710kmと返してくれるのが期待値ですが、元ドキュメントの通り、710kmと返却してくれました。OCRの読み取り精度は悪くなさそうです。<br>\nまた、<code>x-amz-bedrock-kb-document-page-number</code>で、抽出元のページも相違なく取れてきています。</p>\n<p data-sourcepos=\"594:1-594:164\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F7e4dbbf6-e7ea-44d7-a327-7e58e6e1a932.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=39424bc3f89a7359031dafb4e55f4f40\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F7e4dbbf6-e7ea-44d7-a327-7e58e6e1a932.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=39424bc3f89a7359031dafb4e55f4f40\" alt=\"スクリーンショット 2025-04-29 13.36.49.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F7e4dbbf6-e7ea-44d7-a327-7e58e6e1a932.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5a7090d2723910a5397be8a62ebaa492 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/7e4dbbf6-e7ea-44d7-a327-7e58e6e1a932.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"597:1-597:44\">\n<span id=\"-document-aiでocrを行った場合\" class=\"fragment\"></span><a href=\"#-document-ai%E3%81%A7ocr%E3%82%92%E8%A1%8C%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>② Document AIでOCRを行った場合</h4>\n<p data-sourcepos=\"598:1-598:273\">こちらについても、同様問題なく結果が取れてきそうでした。①とはそこまで差異がないですが、ソースチャンクを見る限り、こちらの方が文字をより正確に読み取ってくれているような気がしました。</p>\n<p data-sourcepos=\"600:1-600:164\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F4f9d6406-3a59-4bfe-a2d9-472a519f6aaf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=61ef4504dfbe8b1472a62f9bdcd9475c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F4f9d6406-3a59-4bfe-a2d9-472a519f6aaf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=61ef4504dfbe8b1472a62f9bdcd9475c\" alt=\"スクリーンショット 2025-04-29 11.39.35.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F4f9d6406-3a59-4bfe-a2d9-472a519f6aaf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=84077702dea1fe79c6767d6afa3ad115 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/4f9d6406-3a59-4bfe-a2d9-472a519f6aaf.png\" loading=\"lazy\"></a></p>\n<div data-sourcepos=\"602:1-606:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"603:1-605:164\">おまけ<br>\nKendraでindexを立てて検索を行ってみても、同じように検索結果からページ情報が得られました。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F4ffcfc58-4d79-47ed-9ffd-532cff9f42bb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=20fd0d1a842142b5d81875284dcc2c0e\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F4ffcfc58-4d79-47ed-9ffd-532cff9f42bb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=20fd0d1a842142b5d81875284dcc2c0e\" alt=\"スクリーンショット 2025-04-26 22.15.53.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3623937%2F4ffcfc58-4d79-47ed-9ffd-532cff9f42bb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bdc71d9fda93544e46697bd93dbe7026 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/4ffcfc58-4d79-47ed-9ffd-532cff9f42bb.png\" loading=\"lazy\"></a></p>\n</div>\n</div>\n<h2 data-sourcepos=\"609:1-609:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<p data-sourcepos=\"610:1-615:191\">ここまで読んでいただき、ありがとうございました。<br>\n今回は、画像PDFに対してOCRの処理を行い、検索可能なPDFに変換して、RAGのデータソースとして機能するかの検証を行いました。<br>\n比較的読み取りのしやすいドキュメントでテストを行ったのもありますが、問題なくデータの前処理を行うことができました。<br>\n冒頭の問題意識の項で記載した、ページ数の抽出の課題は、<br>\nページごとにOCRをかける→PDFに書き戻す、というアプローチでクリアできそうな気がしました。<br>\nまた、Document AIを使えば、どこをどう読み取っているのかの情報が、レスポンスからある程度把握できるので、こちらも便利な気がしました。</p>\n<p data-sourcepos=\"617:1-617:12\">今後は、</p>\n<ul data-sourcepos=\"618:1-623:0\">\n<li data-sourcepos=\"618:1-619:0\">\n<p data-sourcepos=\"618:3-618:50\">表組みが多いPDF（帳票、レポート）</p>\n</li>\n<li data-sourcepos=\"620:1-621:0\">\n<p data-sourcepos=\"620:3-620:35\">手書き文字が混在するPDF</p>\n</li>\n<li data-sourcepos=\"622:1-623:0\">\n<p data-sourcepos=\"622:3-622:32\">フォントが特殊な文書</p>\n</li>\n</ul>\n<p data-sourcepos=\"624:1-624:114\">など、より難易度の高いケースでも本手法が使えるか検証していきたいと思います。</p>\n<h4 data-sourcepos=\"627:1-627:14\">\n<span id=\"おまけ\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91\"><i class=\"fa fa-link\"></i></a>おまけ</h4>\n<h5 data-sourcepos=\"628:1-628:24\">\n<span id=\"処理イメージ\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>処理イメージ</h5>\n<p data-sourcepos=\"629:1-629:61\">処理の全体像をmermaid記法で書いてみました。</p>\n<iframe id=\"qiita-embed-content__1a81a632352f4e46682b193373b52b5a\" src=\"https://qiita.com/embed-contents/mermaid#qiita-embed-content__1a81a632352f4e46682b193373b52b5a\" style=\"width:100%;\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" data-content='{\"data\":\"flowchart TD\\n A[画像PDF（入力）] --&gt; B{ページごとに分割}\\n\\n B --&gt; C1[ページ1]\\n B --&gt; C2[ページ2]\\n\\n C1 --&gt; D1{Document AIを使うか？}\\n C2 --&gt; D2{Document AIを使うか？}\\n\\n D1 -- Yes --&gt; E1[Document AIでOCR実行、&lt;br&gt;レスポンスをJSONファイルに保存]\\n D1 -- No --&gt; F1[OCRmyPDFでOCR]\\n\\n D2 -- Yes --&gt; E2[Document AIでOCR実行、&lt;br&gt;レスポンスをJSONファイルに保存]\\n D2 -- No --&gt; F2[OCRmyPDFでOCR]\\n\\n E1 --&gt; G1[JSONからhOCRを生成 → &lt;br&gt;透明テキストPDF作成]\\n E2 --&gt; G2[JSONからhOCRを生成 → &lt;br&gt;透明テキストPDF作成]\\n\\n G1 --&gt; H1[背景PDFと&lt;br&gt;透明テキスト合成]\\n G2 --&gt; H2[背景PDFと&lt;br&gt;透明テキスト合成]\\n\\n F1 --&gt; I1[テキストが埋め込まれたPDF]\\n F2 --&gt; I2[テキストが埋め込まれたPDF]\\n\\n H1 --&gt; M[各ページの結果を統合]\\n H2 --&gt; M\\n I1 --&gt; M\\n I2 --&gt; M\\n\\n M --&gt; Z[検索可能なPDF（出力）]\\n\",\"key\":\"96c5265c4a66992967083f2cf83a2a90\"}'>\n</iframe>\n\n",
        "body": "## この記事について\nRAGの精度向上には、元データの品質改善が欠かせません。本記事では、画像PDFのようにそのままでは検索できないドキュメントに対して、検索可能なPDFへ変換する検証を行った内容を紹介します。\n\n## 問題意識\n画像PDFは、単純にアップロードするだけ(何も前処理を行わない)ではKendraやBedrock Knowledge Baseなどの検索サービスに同期できません。\nそのため、これまではAmazon Bedrockなどを経由させ、基盤モデルを利用してOCRをかけ、テキストファイルに変換したうえで登録する、というプロセスを踏んでいました。\n\nただこの方法だと、以下のような課題があると感じるようになりました。\n- ①元々あったPDFのページ数が失われてしまう\n- ②構造的なOCRがなかなか難しい\n- ③どこをどう読み取ったのか、という詳細の推論過程はブラックボックスになっている\n\n\nそこで今回は、次の2点を意識して検証を進めることにしました。\n①「画像PDF」→「検索可能なPDF」に蘇らせる（テキスト情報を埋め込む）\n② より高精度なOCRエンジンを使用する\n\n\n\n## 検証スタート\n::: note info \n前提条件\nRAGの仕組みの構築は、Amazon BedrockのKnowledge Base（以下KBと記載）を使用し、\nベクトルDBには、Pineconeを採用しました。\n※ 検証を通して気づいたのですが、Pineconeの[Serverless index](https://docs.pinecone.io/guides/indexes/create-an-index)を用いれば、かなり費用を抑えられると思いました。（私はAWS Marketplace 経由で利用していたので Standardプラン）\n検証を行う中で、まあまあ使っていましたが、0.003ドルくらいにしか費用がかさまなかったです。従量課金なのがメリットですね。\n![スクリーンショット 2025-04-29 15.40.04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/986b1de5-137b-4b48-a74e-e69ed5fa6d9d.png)\n\n![スクリーンショット 2025-04-29 15.36.03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/6a498d49-9083-4fa9-bfb5-c34f97f77381.png)\n\n\n:::\n\n### 検証で確かめること\n- ページ数が正しく保持されること\n    - OCR→PDFの過程で、正しくページ数を保持できているのか\n        - 検索を行った際に、「何ページ目から抽出できたのか」という情報が正しく抽出できているかで確認\n- OCR精度はいかほどか（期待する情報がある程度取れてくるか？）\n    - 回答の正確性\n\n### 検証に使用するドキュメント\n今回は、OCRを実現するアプローチとして2つの策を考え、検証してみました。\n検証に共通して、適当な画像をスキャンし、PDFにしたものをS3に配置し、データソースとして指定します。（`test-input.pdf`と名付けます）\n![スクリーンショット 2025-04-27 12.16.10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/9aa13def-e727-40e0-8edf-95d73cbd5109.png)\n\n当然、このPDFは、検索ができる状況ではありません。\n試しに、Amazon BedrockのKnowledge Baseを作成し、S3に配置した`test-input.pdf`と同期してみると、以下のように同期に失敗する旨のエラーが表示されています。\n![スクリーンショット 2025-04-26 22.58.32.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/ca91c4cf-6de3-4819-9884-bc008f430746.png)\n\n### 検証において使用したpythonスクリプト\n:::note info\n今回の検証で使用した全体のpythonスクリプトを以下に添付します。\n[GitHub](https://github.com/y-mae-dev/convert-searcheble-pdf-sample)にも公開したので、自己責任の上ご利用ください。\n各手順の部分で、かいつまんで説明します。\nなお、処理の全体像の図を記事最下部（[処理イメージ](#処理イメージ))の項に記載しましたので、気になる方は参考になれば幸いです。\n\n<details><summary>検証で使用したスクリプト</summary>\n\n```python\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport fitz\nfrom google.cloud import documentai_v1 as documentai\nfrom google.cloud.documentai_toolbox import document\nfrom ocrmypdf import exceptions, hocrtransform, ocr\n\n# サービスアカウントキーのパスを環境変数に設定\n# NOTE 事前にスクリプトを実行するファイルと同じ階層に配置\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"XXXXXXX.json\"\n\n# プロジェクトID・ロケーション・プロセッサIDを設定\nproject_id = \"your-project-id\"\nlocation = \"us\" #またはeu（プロセッサを作成したリージョン）\nprocessor_id = \"your-processor-id\" #（作成したプロセッサID）\n\n\ndef process_pdf_by_ocrmypdf(input_pdf: str, output_pdf: str) -> None:\n    \"\"\"\n    OCRmyPDFを使ってPDFに透明テキストレイヤーを付与する\n\n    Args:\n        input_pdf (str): 入力PDFファイルパス\n        output_pdf (str): 出力PDFファイルパス\n    \"\"\"\n    try:\n        ocr(\n            input_file=input_pdf,\n            output_file=output_pdf,\n            language=\"jpn\",\n            deskew=True,\n            clean=True,\n            progress_bar=True,\n        )\n        print(f\"[INFO] OCRが正常に完了: {output_pdf}\")\n    except exceptions.ExitStatusException as e:\n        print(f\"[ERROR] OCRmyPDFエラー: {e}\")\n\n\ndef split_pdf_page_by_page(input_path: str) -> List[str]:\n    \"\"\"\n    PDFファイルを1ページずつ分割し、個別ファイルとして保存する\n\n    Args:\n        input_path (str): 入力PDFファイルパス\n\n    Returns:\n        List[str]: 分割後の各ページPDFファイルパスリスト\n    \"\"\"\n    pdf = fitz.open(input_path)\n    chunk_files = []\n\n    base_name = os.path.splitext(input_path)[0]\n\n    for i in range(len(pdf)):\n        chunk_path = f\"{base_name}_page{i + 1}.pdf\"\n        chunk_pdf = fitz.open()\n        chunk_pdf.insert_pdf(pdf, from_page=i, to_page=i)\n        chunk_pdf.save(chunk_path)\n        chunk_pdf.close()\n        chunk_files.append(chunk_path)\n\n    pdf.close()\n    return chunk_files\n\n\ndef convert_hocr_to_pdf(\n    hocr_path: str, background_pdf_path: str, output_pdf_path: str, dpi: int = 300\n) -> None:\n    \"\"\"\n    hOCRファイルから透明テキストレイヤーを作成し、背景PDFと合成する\n\n    Args:\n        hocr_path (str): hOCRファイルパス\n        background_pdf_path (str): 背景PDFファイルパス\n        output_pdf_path (str): 出力PDFファイルパス\n        dpi (int, optional): 解像度（デフォルト300）\n    \"\"\"\n    ocr_only_pdf_path = str(Path(output_pdf_path).with_suffix(\".ocr_only.pdf\"))\n\n    transformer = hocrtransform.HocrTransform(hocr_filename=Path(hocr_path), dpi=dpi)\n    transformer.to_pdf(out_filename=Path(ocr_only_pdf_path))\n    print(f\"[INFO] 透明テキストPDF生成完了: {ocr_only_pdf_path}\")\n\n    merge_background_and_ocr(background_pdf_path, ocr_only_pdf_path, output_pdf_path)\n    print(f\"[INFO] 背景と透明テキストを合成完了: {output_pdf_path}\")\n\n    Path(ocr_only_pdf_path).unlink(missing_ok=True)\n\n\ndef merge_background_and_ocr(\n    background_pdf_path: str, ocr_text_pdf_path: str, output_pdf_path: str\n) -> None:\n    \"\"\"\n    背景PDFと透明テキストレイヤーPDFを合成する\n\n    Args:\n        background_pdf_path (str): 背景PDFパス\n        ocr_text_pdf_path (str): 透明テキストPDFパス\n        output_pdf_path (str): 出力PDFパス\n    \"\"\"\n    bg_doc = fitz.open(background_pdf_path)\n    ocr_doc = fitz.open(ocr_text_pdf_path)\n\n    for page_num in range(len(bg_doc)):\n        bg_page = bg_doc[page_num]\n        bg_page.show_pdf_page(bg_page.rect, ocr_doc, page_num)\n\n    bg_doc.save(output_pdf_path, garbage=4, deflate=True)\n    bg_doc.close()\n    ocr_doc.close()\n\n\ndef process_document_with_docai(file_path: str) -> documentai.Document:\n    \"\"\"\n    Document AIでPDFをOCR処理する\n\n    Args:\n        file_path (str): 入力PDFパス\n\n    Returns:\n        documentai.Document: OCR処理結果\n    \"\"\"\n    client = documentai.DocumentProcessorServiceClient()\n    name = f\"projects/{project_id}/locations/{location}/processors/{processor_id}\"\n\n    with open(file_path, \"rb\") as f:\n        content = f.read()\n\n    request = documentai.ProcessRequest(\n        name=name,\n        raw_document=documentai.RawDocument(\n            content=content, mime_type=\"application/pdf\"\n        ),\n    )\n    result = client.process_document(request=request)\n    return result.document\n\n\ndef save_docai_response_to_json(\n    document_obj: documentai.Document, output_path: str\n) -> None:\n    \"\"\"\n    Document AIレスポンスをJSONファイルとして保存する\n\n    Args:\n        document_obj (Document): Documentオブジェクト\n        output_path (str): 出力JSONファイルパス\n    \"\"\"\n    json_obj = documentai.Document.to_json(document_obj)\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(json_obj)\n\n\ndef convert_docai_response_to_hocr(\n    docai_document: documentai.Document, title: str, document_path: str\n) -> str:\n    \"\"\"\n    Document AI JSONからhOCR形式に変換する\n\n    Args:\n        docai_document (Document): OCRドキュメント\n        title (str): hOCRファイルタイトル\n        document_path (str): Document AI JSONパス\n\n    Returns:\n        str: hOCRテキスト\n    \"\"\"\n    wrapped_doc = document.Document.from_document_path(document_path=document_path)\n    return wrapped_doc.export_hocr_str(title=title)\n\n\ndef merge_pdfs_with_pymupdf(pdf_files: List[str], output_path: str) -> None:\n    \"\"\"\n    複数PDFファイルを結合する\n\n    Args:\n        pdf_files (List[str]): PDFファイルリスト\n        output_path (str): 出力ファイルパス\n    \"\"\"\n    merger = fitz.open()\n    for pdf_file in pdf_files:\n        merger.insert_pdf(fitz.open(pdf_file))\n    merger.save(output_path)\n    merger.close()\n\n\ndef make_searchable_pdf(input_path: str, output_path: str, use_docai: bool = True) -> None:\n    \"\"\"\n    PDFをOCR処理して検索可能なPDFに変換する\n\n    Args:\n        input_path (str): 入力PDFパス\n        output_path (str): 出力PDFパス\n        use_docai (bool, optional): Document AIを使用するか（デフォルトTrue）\n    \"\"\"\n    print(f\"[INFO] 分割処理中: {input_path}\")\n    chunk_files = split_pdf_page_by_page(input_path)\n    processed_chunks = []\n    temp_files = []\n\n    for i, chunk_file in enumerate(chunk_files):\n        print(f\"[INFO] ページ {i + 1}/{len(chunk_files)} 処理中...\")\n\n        base = os.path.splitext(chunk_file)[0]\n        hocr_path = f\"{base}.hocr.xml\"\n        json_path = f\"{base}.json\"\n        output_chunk = f\"{base}_processed.pdf\"\n\n        try:\n            if use_docai:\n                docai_document = process_document_with_docai(chunk_file)\n                save_docai_response_to_json(docai_document, json_path)\n                hocr_content = convert_docai_response_to_hocr(\n                    docai_document, f\"Chunk {i + 1}\", json_path\n                )\n\n                with open(hocr_path, \"w\", encoding=\"utf-8\") as f:\n                    f.write(hocr_content)\n\n                convert_hocr_to_pdf(hocr_path, chunk_file, output_chunk)\n\n            else:\n                process_pdf_by_ocrmypdf(chunk_file, output_chunk)\n\n            processed_chunks.append(output_chunk)\n            temp_files += [chunk_file]\n            if use_docai:\n                temp_files += [hocr_path, json_path]\n\n        except Exception as e:\n            print(f\"[ERROR] ページ {i + 1} 処理失敗: {e}\")\n\n    print(\"[INFO] 各ページを結合中...\")\n    merge_pdfs_with_pymupdf(processed_chunks, output_path)\n\n    for path in temp_files + processed_chunks:\n        try:\n            os.remove(path)\n        except Exception as e:\n            print(f\"[WARN] 一時ファイル削除失敗: {path} -> {e}\")\n\n    print(f\"[DONE] 完了: {output_path}\")\n\n\n# 実行部分\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print(\"使用方法: python script.py 入力PDF 出力PDF [use_docai]\")\n        sys.exit(1)\n\n    input_pdf = sys.argv[1]\n    output_pdf = sys.argv[2]\n    use_docai = sys.argv[3].lower() == \"true\" if len(sys.argv) > 3 else True\n\n    if use_docai:\n        if not os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\"):\n            print(\"[WARN] 認証情報が設定されていません。\")\n\n    make_searchable_pdf(input_pdf, output_pdf, use_docai)\n```\n</details>\n:::\n\n#### ① pythonライブラリ「OCRmyPDF」を使ってOCR\n##### OCRmyPDFとは\nhttps://github.com/ocrmypdf/OCRmyPDF\n\n>OCRmyPDF adds an OCR text layer to scanned PDF files, allowing them to be searched or copy-pasted.（GitHubリポジトリ説明から引用）\n\nOCRmyPDFは、\nスキャンされたPDFファイルにテキストを埋め込むことができる役割を担っています。\nオープンソースのOCRエンジンである、[「Tesseract OCR」](https://github.com/tesseract-ocr/tesseract)が内部的に使われています。\nTesseract OCRは、日本語を含めた多言語にも対応しています。\n\n##### 手順1 ocrmypdfライブラリをインストール\n\n:::note info\nuvを使って検証を行いました。\n検証時点でのバージョンは`uv 0.6.12`です。\n```zsh\n$ uv version\nuv 0.6.12 (e4e03833f 2025-04-02)\n```\n:::\n\n`uv init`で任意のプロジェクトを作成したのちに、下記を実行します。これでプログラムからocrmypdfライブラリを呼び出す準備が整いました。\n```zsh\n$ uv add ocrmypdf\n```\n```zsh\n$ uv sync\n```\n\n##### 手順2 プログラムから呼び出す\nOCR処理は[ocrmypdf.ocr](https://ocrmypdf.readthedocs.io/en/v11.2.1/api.html#ocrmypdf.ocr)が担っているので、これを使います。\n`input_file`にはOCRをかけたいファイルのパスを、\n`output_file`にはOCR結果の出力先のパスを指定します。\n\n`--language`オプションをつけることで、もとドキュメントの言語を指定することができます。（多くの場合は`jpn`）を指定することになるかと思います。\n\n\n```python\nfrom ocrmypdf import ocr, exceptions\ndef process_pdf_by_ocrmypdf(input_pdf: str, output_pdf: str) -> None:\n    \"\"\"\n    OCRmyPDFを使ってPDFに透明テキストレイヤーを付与する\n\n    Args:\n        input_pdf (str): 入力PDFファイルのパス\n        output_pdf (str): 出力PDFファイルのパス\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        ocr(\n            input_file=input_pdf,\n            output_file=output_pdf,\n            language=\"jpn\",     \n            deskew=True,        # 傾きを補正するオプション\n            clean=True,         # ノイズ除去をするオプション\n            progress_bar=True,  # 処理状況をターミナルで確認可能にする\n        )\n        print(f\"[INFO] OCRが正常に完了: {output_pdf}\")\n    except exceptions.ExitCodeException as e:\n        print(f\"[ERROR] OCR実行中にエラー: {e}\")\n```\n\n`progress_bar=True`をつけると、OCR処理の進捗状況をターミナル上で確認することができます。\n出力結果は以下のようになります。\n\n<details><summary>プログレスバー出力イメージ</summary>\n\n```zsh\n$ uv run convert_to_searchable_pdf_v2.py test-input.pdf test-output.pdf false\n[INFO] 分割処理中: test-input.pdf\n[INFO] チャンク 1/3 処理中...\nScanning contents     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\n[tesseract] lots of diacritics - possibly poor OCR\nOCR                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nPDF/A conversion      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nLinearizing           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 100/100 0:00:00\nRecompressing JPEGs   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\nDeflating JPEGs       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nJBIG2                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\n[INFO] OCRが正常に完了: test-input_page1_processed.pdf\n[INFO] チャンク 2/3 処理中...\nScanning contents     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nOCR                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nPDF/A conversion      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nLinearizing           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 100/100 0:00:00\nRecompressing JPEGs   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\nDeflating JPEGs       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nJBIG2                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\n[INFO] OCRが正常に完了: test-input_page2_processed.pdf\n[INFO] チャンク 3/3 処理中...\nScanning contents     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nOCR                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nPDF/A conversion      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nLinearizing           ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 100/100 0:00:00\nRecompressing JPEGs   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\nDeflating JPEGs       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\nJBIG2                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0% 0/0 -:--:--\n[INFO] OCRが正常に完了: test-input_page3_processed.pdf\n[INFO] チャンク結合中...\n[DONE] 完了: test-output.pdf\n```\n</details>\n\n\n#### ② Google CloudのOCRサービス「Document AI」を使ってOCRを行う\n##### Document AIとは\nGoogle CloudのOCRサービスです。\n料金体系は以下のようになっています。\nEnterprise Document OCR プロセッサを使う場合では、1000ページごとに1.5$ということで、少量のデータであれば比較的安価にOCRをすることができます。\n\n料金体系は以下のページに記載がありますので、詳細はこちらをご覧ください。\n\nhttps://cloud.google.com/document-ai/pricing?hl=ja\n\n\n![スクリーンショット 2025-04-29 12.27.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/e585592d-ae94-44a1-bf78-fddb0d07d942.png)\n上記のようにGoogle Cloud コンソール上から簡単にテストすることができますが、\n\n\n今回はGoogle Cloud SDK経由から呼び出すことを考えます。\n\n利用に際しては\nサービスアカウントの認証情報作成、プロセッサの作成など事前準備が必要となります。\nこちらのチュートリアル（1-5）が参考になります。\n\nhttps://codelabs.developers.google.com/codelabs/docai-ocr-python?hl=ja#4\n\n##### 手順1.Document AI ToolBoxを用いて、画像PDFをhocr形式に変換する\nhttps://cloud.google.com/document-ai/docs/samples/documentai-toolbox-document-to-hocr?hl=ja\n\nDocument AIには、[Toolbox](https://cloud.google.com/document-ai/docs/toolbox?hl=ja)と呼ばれる、OCR結果を2次利用しやすい形式に変換するためのクライアントライブラリが用意されています。\n\n:::note info\nインストール方法は[クライアントライブラリをインストールする](https://cloud.google.com/document-ai/docs/libraries?hl=ja#install)の項を参照してください。\n:::\n\n```python\ndef convert_docai_response_to_hocr(\n    docai_document: documentai.Document, title: str, document_path: str\n) -> str:\n    \"\"\"\n    JSON（Document AIのレスポンスが入っている）をhOCR形式に変換する\n\n    Args:\n        docai_document (Document): OCRドキュメント\n        title (str): hOCRファイルタイトル\n        document_path (str): Document AI JSONパス\n\n    Returns:\n        str: hOCRテキスト\n    \"\"\"\n    wrapped_doc = document.Document.from_document_path(document_path=document_path)\n    return wrapped_doc.export_hocr_str(title=title)\n```\nその中に、Document AIによるOCR結果のレスポンス（JSON形式）をhocr形式に変換するツールがあったため、今回はこれを使用します。\n変換された結果が以下です。（掲載しているのは一部です）\n`bbox`という記述が多くありますが、これはOCRによって検出された物体(画像やテキストなど)の領域のことを指すようです。\nつまり出力されたhocr形式のファイルは「どこに、何が書いてあるかを詳細にまとめたXML形式のファイル」と言えそうです。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"unknown\" lang=\"unknown\">\n<head>\n<title>Chunk 2</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<meta name=\"ocr-system\" content=\"Document AI OCR\" />\n<meta name=\"ocr-langs\" content=\"unknown\" />\n<meta name=\"ocr-scripts\" content=\"unknown\" />\n<meta name=\"ocr-number-of-pages\" content=\"1\" />\n<meta name=\"ocr-capabilities\" content=\"ocrp_lang ocr_page ocr_carea ocr_par ocr_line ocrx_word\" />\n</head>\n<body>\n<div class='ocr_page' lang='unknown' title='bbox 0 0 1626 2459'><span class='ocr_carea' id='block_1_0' title='bbox 400 54 797 61'><p class='ocr_par' id='par_1_0_0' title='bbox 400 54 797 61'><span class='ocr_line' id='line_1_0_0_0' title='bbox 400 54 797 61'>かわさきの上下水道 No.59 令和7年3月\n<span class='ocrx_word' id='word_1_0_0_0_0' title='bbox 400 54 475 71'>かわさき</span><span class='ocrx_word' id='word_1_0_0_0_1' title='bbox 479 52 498 69'>の</span><span class='ocrx_word' id='word_1_0_0_0_2' title='bbox 498 51 580 68'>上下水道 </span><span class='ocrx_word' id='word_1_0_0_0_3' title='bbox 600 48 654 65'>No.59 </span><span class='ocrx_word' id='word_1_0_0_0_4' title='bbox 676 46 715 64'>令和</span><span class='ocrx_word' id='word_1_0_0_0_5' title='bbox 720 45 732 63'>7</span><span class='ocrx_word' id='word_1_0_0_0_6' title='bbox 738 44 757 61'>年</span><span class='ocrx_word' id='word_1_0_0_0_7' title='bbox 763 44 774 62'>3</span><span class='ocrx_word' id='word_1_0_0_0_8' title='bbox 781 43 798 61'>月\n....中略\n</body>\n</html>\n```\n\n\n##### 手順2.hocr形式から、PDFに変換する\nOCRmyPDFのライブラリで、hocr形式からPDFに変換を行うことのできる[`hocrtransform`](https://ocrmypdf.readthedocs.io/en/latest/apiref.html#module-ocrmypdf.hocrtransform)メソッドがあるため、これを利用します。\n```python\ndef convert_hocr_to_pdf(hocr_path, background_pdf_path, output_pdf_path, dpi=300):\n    \"\"\"hOCRファイルから透明テキストレイヤーを作成するサンプルコード\"\"\"\n    ocr_only_pdf_path = str(Path(output_pdf_path).with_suffix(\".ocr_only.pdf\"))\n\n    transformer = hocrtransform.HocrTransform(hocr_filename=Path(hocr_path), dpi=dpi)\n    transformer.to_pdf(out_filename=Path(ocr_only_pdf_path))\n    print(f\"[INFO] 透明テキストPDF生成完了: {ocr_only_pdf_path}\")\n```\n変換結果は以下のようになりした。\nコード内にも記載していますが、あくまでもここでは検出されたテキストがPDF内に埋め込まれるだけです。なので文字列検索には引っかかりますが、こちら側からは確認ができません。\nこの問題を手順3で解決します。\n\n\n![スクリーンショット 2025-04-29 12.50.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/ba01fdae-1de6-44a5-b76b-da5a1428b7b8.png)\n\n\n##### 手順3.透明テキストが含まれるPDFと元PDFを重ね合わせる\n手順2で生じた問題を解決するため、元の画像PDFに、テキストを重ね合わせる処理を追加します。\n\n```diff_python\ndef convert_hocr_to_pdf(hocr_path, background_pdf_path, output_pdf_path, dpi=300):\n+   \"\"\"hOCRファイルから透明テキストレイヤーを作成し、背景PDFと合成する\"\"\"\n    ocr_only_pdf_path = str(Path(output_pdf_path).with_suffix(\".ocr_only.pdf\"))\n\n    transformer = hocrtransform.HocrTransform(hocr_filename=Path(hocr_path), dpi=dpi)\n    transformer.to_pdf(out_filename=Path(ocr_only_pdf_path))\n    print(f\"[INFO] 透明テキストPDF生成完了: {ocr_only_pdf_path}\")\n\n+    merge_background_and_ocr(background_pdf_path, ocr_only_pdf_path, output_pdf_path)\n+    print(f\"[INFO] 背景と透明テキストを合成完了: {output_pdf_path}\")\n```\n\n新たに、関数`merge_background_and_ocr`を作成します。\n```python\ndef merge_background_and_ocr(background_pdf_path, ocr_text_pdf_path, output_pdf_path):\n    \"\"\"背景PDFと透明テキストレイヤーPDFを合成\"\"\"\n    bg_doc = fitz.open(background_pdf_path)\n    ocr_doc = fitz.open(ocr_text_pdf_path)\n\n    for page_num in range(len(bg_doc)):\n        bg_page = bg_doc[page_num]\n        bg_page.show_pdf_page(bg_page.rect, ocr_doc, page_num)\n\n    bg_doc.save(output_pdf_path, garbage=4, deflate=True)\n    bg_doc.close()\n    ocr_doc.close()\n```\n今回は`pymupdf`ライブラリの[`show_pdf_page`](https://pymupdf.readthedocs.io/ja/latest/page.html#Page.show_pdf_page)メソッドを使用しました。\nこのメソッドはあるPDFの特定のページの内容を、別のPDFに描画できるメソッドで、\n処理内では、画像PDFの上に、透明テキストが含まれるOCR済みのPDFを重ね合わせています。\n\n```python\n# 補足\n# bg.rect→配置場所（「どこに重ね合わせるか」）\n# ocr_doc→OCR済みの、テキスト情報だけが存在するPDF（「何を重ね合わせるか」）\n# page_num→重ね合わせる対象のページ数\nbg_page.show_pdf_page(bg_page.rect, ocr_doc, page_num)\n\n# saveメソッドについては以下を参照\n# https://pymupdf.readthedocs.io/ja/latest/document.html#Document.save\n## garbage=4にすることで不要なコンテンツを削除してくれる。\n## deflate=Trueにすることでファイルを圧縮してくれる。\n\n```\n手順1-3の処理を以て、画像PDFからテキスト情報を埋め込んだPDFへの変換を行うことができます。\n\n\n## RAGの結果を見てみる\n### 簡単な質問をしてみる\nKBを使って、RAGをしてみます。\n\n#### ① OCRmypdfでOCRを行った場合\n元々の画像PDFの2ページ目にあった、「工事をしないとどうなるの？」の項に関する質問をしてみます。\n![スクリーンショット 2025-04-29 11.41.48.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/bf1222b3-a25a-46d2-beca-85f1b76032f7.png)\n\n「耐用年数を経過した水道管はどのくらいありますか？」という質問を投げてみました。\n\n710kmと返してくれるのが期待値ですが、元ドキュメントの通り、710kmと返却してくれました。OCRの読み取り精度は悪くなさそうです。\nまた、`x-amz-bedrock-kb-document-page-number`で、抽出元のページも相違なく取れてきています。\n\n![スクリーンショット 2025-04-29 13.36.49.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/7e4dbbf6-e7ea-44d7-a327-7e58e6e1a932.png)\n\n\n#### ② Document AIでOCRを行った場合\nこちらについても、同様問題なく結果が取れてきそうでした。①とはそこまで差異がないですが、ソースチャンクを見る限り、こちらの方が文字をより正確に読み取ってくれているような気がしました。\n\n![スクリーンショット 2025-04-29 11.39.35.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/4f9d6406-3a59-4bfe-a2d9-472a519f6aaf.png)\n\n:::note info  \nおまけ\nKendraでindexを立てて検索を行ってみても、同じように検索結果からページ情報が得られました。\n![スクリーンショット 2025-04-26 22.15.53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3623937/4ffcfc58-4d79-47ed-9ffd-532cff9f42bb.png)\n:::\n\n\n## まとめ\nここまで読んでいただき、ありがとうございました。\n今回は、画像PDFに対してOCRの処理を行い、検索可能なPDFに変換して、RAGのデータソースとして機能するかの検証を行いました。\n比較的読み取りのしやすいドキュメントでテストを行ったのもありますが、問題なくデータの前処理を行うことができました。\n冒頭の問題意識の項で記載した、ページ数の抽出の課題は、\nページごとにOCRをかける→PDFに書き戻す、というアプローチでクリアできそうな気がしました。\nまた、Document AIを使えば、どこをどう読み取っているのかの情報が、レスポンスからある程度把握できるので、こちらも便利な気がしました。\n\n今後は、\n- 表組みが多いPDF（帳票、レポート）\n\n- 手書き文字が混在するPDF\n\n- フォントが特殊な文書\n\nなど、より難易度の高いケースでも本手法が使えるか検証していきたいと思います。\n\n\n#### おまけ\n##### 処理イメージ\n処理の全体像をmermaid記法で書いてみました。\n```mermaid\nflowchart TD\n    A[画像PDF（入力）] --> B{ページごとに分割}\n\n    B --> C1[ページ1]\n    B --> C2[ページ2]\n\n    C1 --> D1{Document AIを使うか？}\n    C2 --> D2{Document AIを使うか？}\n\n    D1 -- Yes --> E1[Document AIでOCR実行、<br>レスポンスをJSONファイルに保存]\n    D1 -- No --> F1[OCRmyPDFでOCR]\n\n    D2 -- Yes --> E2[Document AIでOCR実行、<br>レスポンスをJSONファイルに保存]\n    D2 -- No --> F2[OCRmyPDFでOCR]\n\n    E1 --> G1[JSONからhOCRを生成 → <br>透明テキストPDF作成]\n    E2 --> G2[JSONからhOCRを生成 → <br>透明テキストPDF作成]\n\n    G1 --> H1[背景PDFと<br>透明テキスト合成]\n    G2 --> H2[背景PDFと<br>透明テキスト合成]\n\n    F1 --> I1[テキストが埋め込まれたPDF]\n    F2 --> I2[テキストが埋め込まれたPDF]\n\n    H1 --> M[各ページの結果を統合]\n    H2 --> M\n    I1 --> M\n    I2 --> M\n\n    M --> Z[検索可能なPDF（出力）]\n\n```\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-04-29T16:15:54+09:00",
        "group": null,
        "id": "568da7bd706065802c07",
        "likes_count": 11,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 9,
        "tags": [
          {
            "name": "PDF",
            "versions": []
          },
          {
            "name": "OCR",
            "versions": []
          },
          {
            "name": "rag",
            "versions": []
          },
          {
            "name": "documentai",
            "versions": []
          }
        ],
        "title": "【検証】画像PDFを検索可能化してRAGデータソースに活用する",
        "updated_at": "2025-05-07T19:12:30+09:00",
        "url": "https://qiita.com/y-mae/items/568da7bd706065802c07",
        "user": {
          "description": "社会人3年目の開発エンジニア。\r\n業界未経験からのスタートですが、「日々勉強」をモットーに頑張っています。\r\n2024 Japan AWS Jr.champions 選出。\r\nAWSの生成AI/MLサービスに関心があります。\r\n趣味は走ること、音楽鑑賞、お酒を飲むこと。",
          "facebook_id": "",
          "followees_count": 67,
          "followers_count": 35,
          "github_login_name": "y-mae-dev",
          "id": "y-mae",
          "items_count": 16,
          "linkedin_id": "yuki-maeno-143096346",
          "location": "",
          "name": "",
          "organization": "",
          "permanent_id": 3623937,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3623937/d331e8d58a20fe3ad71feee07f7c83907e5a7a18/large.png?1700407651",
          "team_only": false,
          "twitter_screen_name": "yu_mae11",
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": "iret",
        "slide": false,
        "semantic_similarity": 0.7795124053955078,
        "quality_score": 20,
        "python_code_score": 4,
        "python_code_blocks": 6
      },
      {
        "rendered_body": "<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"3:1-3:348\">色々な文書を複合機でスキャンし、png画像を保管しているのですが、受け取った資料の上下左右がバラバラで、これをOCRしようとすると読み取りミスが多くて困っていたので、スキャンした文書を回転させてきちんと上下をあわせる方法を検討してみました。</p>\n<p data-sourcepos=\"5:1-6:221\">ちなみに、調べてみるとtesseract-odsで実現できるとのことでしたが、精度が悪くて思うような結果がでません。<br>\nこれは縦書きに対応しているため、画像が時計回りに90度回転している状態と正しく上に向いている状態の結果が同じようになってしまうためかなと推察されます。</p>\n<h1 data-sourcepos=\"8:1-8:14\">\n<span id=\"使うもの\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%86%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>使うもの</h1>\n<ul data-sourcepos=\"10:1-15:0\">\n<li data-sourcepos=\"10:1-10:13\">Ubuntu 22.x</li>\n<li data-sourcepos=\"11:1-11:12\">Python 3.x</li>\n<li data-sourcepos=\"12:1-12:12\">tessor-ocr</li>\n<li data-sourcepos=\"13:1-13:8\">OpenCV</li>\n<li data-sourcepos=\"14:1-15:0\">PIL</li>\n</ul>\n<h1 data-sourcepos=\"16:1-16:14\">\n<span id=\"環境設定\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>環境設定</h1>\n<p data-sourcepos=\"18:1-18:63\">以下のコマンドでライブラリーをインストール</p>\n<div class=\"code-frame\" data-lang=\"sh\" data-sourcepos=\"20:1-22:3\"><div class=\"highlight\"><pre><code><span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">-y</span> tesseract-ocr tesseract-ocr-jpn tesseract-ocr-osd python3-tesserocr\n</code></pre></div></div>\n<h1 data-sourcepos=\"24:1-24:20\">\n<span id=\"ソースコード\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ソースコード</h1>\n<h2 data-sourcepos=\"26:1-26:60\">\n<span id=\"任意の角度で画像を回転させる関数を作成\" class=\"fragment\"></span><a href=\"#%E4%BB%BB%E6%84%8F%E3%81%AE%E8%A7%92%E5%BA%A6%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E5%9B%9E%E8%BB%A2%E3%81%95%E3%81%9B%E3%82%8B%E9%96%A2%E6%95%B0%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>任意の角度で画像を回転させる関数を作成</h2>\n<div class=\"code-frame\" data-lang=\"py\" data-sourcepos=\"28:1-46:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">rotate_cv_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">):</span>\n\n    <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">getRotationMatrix2D</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n    <span class=\"c1\"># 回転後の画像サイズを考慮して拡大\n</span>    <span class=\"n\">cos</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">new_w</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">((</span><span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">))</span>\n    <span class=\"n\">new_h</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">((</span><span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">))</span>\n    \n    <span class=\"c1\"># 回転行列の中心を補正\n</span>    <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">new_w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">new_h</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\"># 回転処理\n</span>    <span class=\"k\">return</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">warpAffine</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">new_w</span><span class=\"p\">,</span> <span class=\"n\">new_h</span><span class=\"p\">),</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">INTER_LINEAR</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"48:1-48:60\">\n<span id=\"一番読み取れる方向を判定する関数を作成\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E7%95%AA%E8%AA%AD%E3%81%BF%E5%8F%96%E3%82%8C%E3%82%8B%E6%96%B9%E5%90%91%E3%82%92%E5%88%A4%E5%AE%9A%E3%81%99%E3%82%8B%E9%96%A2%E6%95%B0%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>一番読み取れる方向を判定する関数を作成</h2>\n<div class=\"code-frame\" data-lang=\"py\" data-sourcepos=\"50:1-103:3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">find_best_orientation_with_tesserocr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">np_image</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">jpn</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    \n    <span class=\"c1\"># tesserocrを使って最も単語を認識できる角度を判定\n</span>    <span class=\"n\">best_angle</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># 本文中に出現する可能性の高い単語を列挙する\n</span>    <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">松江</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">島根</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">パソコン</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">...]</span>\n    <span class=\"n\">txt_lens</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">with</span> <span class=\"nc\">PyTessBaseAPI</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"n\">lang</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n        \n        <span class=\"k\">for</span> <span class=\"n\">angle</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">270</span><span class=\"p\">]:</span>\n            \n            <span class=\"n\">rotated</span> <span class=\"o\">=</span> <span class=\"nf\">rotate_cv_image</span><span class=\"p\">(</span><span class=\"n\">np_image</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">)</span>\n            <span class=\"n\">pil</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">fromarray</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">rotated</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">))</span>\n            <span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nc\">SetImage</span><span class=\"p\">(</span><span class=\"n\">pil</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># tessorocrの検出結果を取得\n</span>            <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nc\">GetUTF8Text</span><span class=\"p\">()</span>\n            <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">).</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># 単語の出現回数を合計\n</span>            <span class=\"n\">text_len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">:</span>\n                <span class=\"n\">text_len</span> <span class=\"o\">+=</span>  <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n            <span class=\"n\">txt_lens</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">text_len</span><span class=\"p\">]</span>\n            \n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">angle</span><span class=\"si\">}</span><span class=\"s\">° 回転 → 認識単語数: </span><span class=\"si\">{</span><span class=\"n\">text_len</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># 検出数の平均値を算出して、それ以上か否かをパターンに変換\n</span>    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">txt_lens</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span>\n    <span class=\"n\">ptn</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">txt_len</span> <span class=\"ow\">in</span> <span class=\"n\">txt_lens</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">txt_len</span> <span class=\"o\">&gt;</span> <span class=\"n\">avg</span><span class=\"p\">:</span>\n            <span class=\"n\">ptn</span> <span class=\"o\">+=</span> <span class=\"sh\">\"</span><span class=\"s\">1</span><span class=\"sh\">\"</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ptn</span> <span class=\"o\">+=</span> <span class=\"sh\">\"</span><span class=\"s\">0</span><span class=\"sh\">\"</span>\n    \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">ptn</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># パターンに応じて回転する角度を割り出す\n</span>    <span class=\"k\">if</span> <span class=\"n\">ptn</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">1100</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">best_angle</span> <span class=\"o\">=</span> <span class=\"mi\">90</span>\n    <span class=\"k\">elif</span> <span class=\"n\">ptn</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">1001</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">best_angle</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">ptn</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">0011</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">best_angle</span> <span class=\"o\">=</span> <span class=\"mi\">270</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">best_angle</span> <span class=\"o\">=</span> <span class=\"mi\">180</span>\n    \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">最適な回転角度: </span><span class=\"si\">{</span><span class=\"n\">best_angle</span><span class=\"si\">}</span><span class=\"s\">°</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">best_angle</span>\n</code></pre></div></div>\n<p data-sourcepos=\"105:1-105:98\">ここで、wordsの値を判定結果から追記していくことで精度が向上します。</p>\n<h2 data-sourcepos=\"107:1-107:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<div class=\"code-frame\" data-lang=\"py\" data-sourcepos=\"109:1-157:3\">\n<div class=\"code-lang\"><span class=\"bold\">detect_and_ocr.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tesserocr</span>\n<span class=\"kn\">from</span> <span class=\"n\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span>\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rotate_cv_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">):</span>\n  <span class=\"sh\">\"\"\"</span><span class=\"s\"> 省略 </span><span class=\"sh\">\"\"\"</span>\n<span class=\"n\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_best_orientation_with_tesserocr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">np_image</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">jpn</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n  <span class=\"sh\">\"\"\"</span><span class=\"s\"> 省略 </span><span class=\"sh\">\"\"\"</span>\n<span class=\"n\">end</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># ファイルの一覧を取得\n</span>    <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">images/*.png</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(files)\n</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    \n    <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># 画像ファイルを読込\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 角度の検出\n</span>        <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"nf\">find_best_orientation_with_tesserocr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 回転させて保存\n</span>        <span class=\"n\">img_rotated</span> <span class=\"o\">=</span> <span class=\"nf\">rotate_cv_image</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">)</span>\n        <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imwrite</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"nb\">file</span><span class=\"si\">}</span><span class=\"s\">_rotated.png</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">img_rotated</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 画像からテキストを抽出\n</span>        <span class=\"n\">pil</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">fromarray</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">img_rotated</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">))</span>\n        <span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nc\">SetImage</span><span class=\"p\">(</span><span class=\"n\">pil</span><span class=\"p\">)</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nc\">GetUTF8Text</span><span class=\"p\">()</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n        \n    <span class=\"nf\">exit</span><span class=\"p\">()</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"159:1-159:8\">\n<span id=\"実行\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>実行</h1>\n<div class=\"code-frame\" data-lang=\"sh\" data-sourcepos=\"161:1-163:3\"><div class=\"highlight\"><pre><code>python3 detect_and_ocr.py\n</code></pre></div></div>\n<p data-sourcepos=\"165:1-165:12\">できた！</p>\n",
        "body": "# はじめに\n\n色々な文書を複合機でスキャンし、png画像を保管しているのですが、受け取った資料の上下左右がバラバラで、これをOCRしようとすると読み取りミスが多くて困っていたので、スキャンした文書を回転させてきちんと上下をあわせる方法を検討してみました。\n\nちなみに、調べてみるとtesseract-odsで実現できるとのことでしたが、精度が悪くて思うような結果がでません。\nこれは縦書きに対応しているため、画像が時計回りに90度回転している状態と正しく上に向いている状態の結果が同じようになってしまうためかなと推察されます。\n\n# 使うもの\n\n- Ubuntu 22.x\n- Python 3.x\n- tessor-ocr\n- OpenCV\n- PIL\n\n# 環境設定\n\n以下のコマンドでライブラリーをインストール\n\n```sh:\nsudo apt install -y tesseract-ocr tesseract-ocr-jpn tesseract-ocr-osd python3-tesserocr\n```\n\n# ソースコード\n\n## 任意の角度で画像を回転させる関数を作成\n\n```py:\ndef rotate_cv_image(image, angle):\n\n    (h, w) = image.shape[:2]\n    center = (w // 2, h // 2)\n    matrix = cv2.getRotationMatrix2D(center, angle, 1.0)\n    # 回転後の画像サイズを考慮して拡大\n    cos = np.abs(matrix[0, 0])\n    sin = np.abs(matrix[0, 1])\n    new_w = int((h * sin) + (w * cos))\n    new_h = int((h * cos) + (w * sin))\n    \n    # 回転行列の中心を補正\n    matrix[0, 2] += (new_w / 2) - center[0]\n    matrix[1, 2] += (new_h / 2) - center[1]\n    \n    # 回転処理\n    return cv2.warpAffine(image, matrix, (new_w, new_h), flags=cv2.INTER_LINEAR)\n```\n\n## 一番読み取れる方向を判定する関数を作成\n\n```py:\ndef find_best_orientation_with_tesserocr(i, np_image, lang='jpn'):\n    \n    # tesserocrを使って最も単語を認識できる角度を判定\n    best_angle = 0\n\n    # 本文中に出現する可能性の高い単語を列挙する\n    words = [\"松江\", \"島根\", \"パソコン\", ...]\n    txt_lens = []\n\n    with PyTessBaseAPI(lang=lang) as api:\n        \n        for angle in [0, 90, 180, 270]:\n            \n            rotated = rotate_cv_image(np_image, angle)\n            pil = Image.fromarray(cv2.cvtColor(rotated, cv2.COLOR_BGR2RGB))\n            api.SetImage(pil)\n\n            # tessorocrの検出結果を取得\n            text = api.GetUTF8Text()\n            text = text.replace(\"\\n\", \"\").replace(\" \", \"\")\n\n            # 単語の出現回数を合計\n            text_len = 0\n            for word in words:\n                text_len +=  text.count(word)\n            txt_lens += [text_len]\n            \n            print(f\"{angle}° 回転 → 認識単語数: {text_len}\")\n    \n    # 検出数の平均値を算出して、それ以上か否かをパターンに変換\n    avg = sum(txt_lens) / 4\n    ptn = \"\"\n    for txt_len in txt_lens:\n        if txt_len > avg:\n            ptn += \"1\"\n        else:\n            ptn += \"0\"\n    \n    print(ptn)\n\n    # パターンに応じて回転する角度を割り出す\n    if ptn == \"1100\":\n        best_angle = 90\n    elif ptn == \"1001\":\n        best_angle = 0\n    elif ptn == \"0011\":\n        best_angle = 270\n    else:\n        best_angle = 180\n    \n    print(f\"最適な回転角度: {best_angle}°\")\n    return best_angle\n```\n\nここで、wordsの値を判定結果から追記していくことで精度が向上します。\n\n## まとめ\n\n```py:detect_and_ocr.py\nimport cv2\nimport numpy as np\n\nimport tesserocr\nfrom tesserocr import PyTessBaseAPI\nfrom PIL import Image\n\nimport glob\nimport os\n\ndef rotate_cv_image(image, angle):\n  \"\"\" 省略 \"\"\"\nend\n\ndef find_best_orientation_with_tesserocr(i, np_image, lang='jpn'):\n  \"\"\" 省略 \"\"\"\nend\n\nif __name__ == \"__main__\":\n\n    # ファイルの一覧を取得\n    files = glob.glob(\"images/*.png\")\n    #print(files)\n\n    i = 0\n    \n    for file in files:\n\n        # 画像ファイルを読込\n        print(file)\n        img = cv2.imread(file)\n\n        # 角度の検出\n        angle = find_best_orientation_with_tesserocr(i, img)\n        print(angle)\n\n        # 回転させて保存\n        img_rotated = rotate_cv_image(img, angle)\n        cv2.imwrite(f\"{file}_rotated.png\", img_rotated)\n\n        # 画像からテキストを抽出\n        pil = Image.fromarray(cv2.cvtColor(img_rotated, cv2.COLOR_BGR2RGB))\n        api.SetImage(pil)\n        text = api.GetUTF8Text()\n        print(text)\n        \n    exit()\n```\n\n# 実行\n\n```sh:\npython3 detect_and_ocr.py\n```\n\nできた！\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-05-30T10:26:16+09:00",
        "group": null,
        "id": "5324897b9596b13274f5",
        "likes_count": 1,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "tesseract-ocr",
            "versions": []
          }
        ],
        "title": "スキャンしたりFAXで受信した画像の向きが一定でない時にきちんと向きをあわせる方法を検討してみた",
        "updated_at": "2025-05-30T18:02:12+09:00",
        "url": "https://qiita.com/mix_dvd/items/5324897b9596b13274f5",
        "user": {
          "description": "ExcelのマクロやWebアプリケーション、iOSアプリを作っています。\r\nまた、しまねソフト研究開発センター専門研究員の業務を受託しています。http://www.s-itoc.jp",
          "facebook_id": "shinobu.kmr",
          "followees_count": 3,
          "followers_count": 148,
          "github_login_name": "shinob",
          "id": "mix_dvd",
          "items_count": 168,
          "linkedin_id": "shinobu-kimura-464788121",
          "location": "Shimane, Japan",
          "name": "きむら しのぶ",
          "organization": "システムアトリエ ブルーオメガ, しまねソフト研究開発センター",
          "permanent_id": 114240,
          "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/114240/profile-images/1473712527",
          "team_only": false,
          "twitter_screen_name": "mix_dvd",
          "website_url": "http://blueomega.jp"
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": "blueomega",
        "slide": false,
        "semantic_similarity": 0.7748672962188721,
        "quality_score": 20,
        "python_code_score": 6,
        "python_code_blocks": 3
      },
      {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:9\">\n<span id=\"背景\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF\"><i class=\"fa fa-link\"></i></a>背景</h2>\n<p data-sourcepos=\"3:1-3:528\">『Pokémon Trading Card Game Pocket（ポケポケ）』では、ゲームの開始時に手札として5枚のカードが配られます。その際、手札には必ず「たねポケが1枚以上含まれる」ようになっています。しかし、実際にどのようなロジックでこの処理が行われているかはユーザーに公開されていません。<a href=\"https://qiita.com/Davoi/items/8e6393f6833c9492da4e\" id=\"reference-fab55da3b300b8a4442c\">@Davoiさんの記事</a>ではこの処理について以下の3つが考察されています。</p>\n<ol data-sourcepos=\"4:1-7:0\">\n<li data-sourcepos=\"4:1-4:114\"><strong>初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く</strong></li>\n<li data-sourcepos=\"5:1-5:123\"><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す</strong></li>\n<li data-sourcepos=\"6:1-7:0\"><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></li>\n</ol>\n<p data-sourcepos=\"8:1-8:535\">これら3つのどれを採用していても、最初に「たねポケが1枚以上含まれる」という点は同じですが、「たねポケを2枚引く確率」や「ある特定のたねポケのみを引く確率」などはロジックごとに異なります。<a href=\"https://qiita.com/Davoi/items/8e6393f6833c9492da4e\">@Davoiさんの記事</a>では、これら3つのロジックについての検証が行われていましたが、試行回数がやや少なく、統計的有意性を判断するには不十分でした。</p>\n<p data-sourcepos=\"11:1-11:377\">そこで本記事では、<strong>対戦操作を自動化</strong>することで大量の対戦データを収集し、<strong>Z検定による統計的な仮説検定</strong>を通じて、<strong>どのロジックが実際の挙動に最も近いか</strong>を明らかにすることを目的とします。具体的には、ロジックごとに確率が異なる以下の2点を検証対象とします。</p>\n<ul data-sourcepos=\"13:1-15:0\">\n<li data-sourcepos=\"13:1-13:47\"><strong>検証1：たねポケを2枚引く確率</strong></li>\n<li data-sourcepos=\"14:1-15:0\"><strong>検証2：ネッコアラのみを引く確率</strong></li>\n</ul>\n<p data-sourcepos=\"16:1-16:95\">各検証にはそれぞれ1,000回の対戦データを収集し、分析を行いました。</p>\n<h2 data-sourcepos=\"19:1-19:9\">\n<span id=\"方法\" class=\"fragment\"></span><a href=\"#%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>方法</h2>\n<p data-sourcepos=\"20:1-20:172\">以下の手順に従って検証を行いました。各手順で用いたプログラムは記事末尾の「<strong>使用したプログラム</strong>」に掲載しています。</p>\n<ol data-sourcepos=\"21:1-24:0\">\n<li data-sourcepos=\"21:1-21:93\">手順1：<code>pyautogui</code>により、2種類のデッキで各1,000回の対戦を自動実行</li>\n<li data-sourcepos=\"22:1-22:124\">手順2：画像マッチングにより、スクリーンショットからカードの種類と枚数を自動で判定</li>\n<li data-sourcepos=\"23:1-24:0\">手順3：Z検定により、集計結果と理論値に統計的な有意差があるかどうかを評価</li>\n</ol>\n<hr data-sourcepos=\"25:1-26:0\">\n<h2 data-sourcepos=\"27:1-27:44\">\n<span id=\"検証1たねポケを2枚引く確率\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC1%E3%81%9F%E3%81%AD%E3%83%9D%E3%82%B1%E3%82%922%E6%9E%9A%E5%BC%95%E3%81%8F%E7%A2%BA%E7%8E%87\"><i class=\"fa fa-link\"></i></a>検証1：たねポケを2枚引く確率</h2>\n<h3 data-sourcepos=\"28:1-28:25\">\n<span id=\"使用したデッキ\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%83%87%E3%83%83%E3%82%AD\"><i class=\"fa fa-link\"></i></a>使用したデッキ</h3>\n<p data-sourcepos=\"29:1-29:275\">まず、<a href=\"https://qiita.com/Davoi/items/8e6393f6833c9492da4e\">@Davoiさんの記事</a>を参考に、たねポケが2枚のみのデッキを用いて、最初に「たねポケを2枚引く確率」について検証します。使用したデッキは以下の通りです。</p>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fb0350d76-f149-4437-bf99-e10f29518d69.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7eeee429d1bd3ec2b8d623d1ea4c8f8d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fb0350d76-f149-4437-bf99-e10f29518d69.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7eeee429d1bd3ec2b8d623d1ea4c8f8d\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fb0350d76-f149-4437-bf99-e10f29518d69.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3f97532a05d6992eedf9384a17c33153 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4102743/b0350d76-f149-4437-bf99-e10f29518d69.png\" loading=\"lazy\"></a>\n<p>\n    図1. 検証1で使用したデッキ（たねポケ2枚、その他18枚）\n</p>\n<h3 data-sourcepos=\"36:1-36:16\">\n<span id=\"集計結果\" class=\"fragment\"></span><a href=\"#%E9%9B%86%E8%A8%88%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>集計結果</h3>\n<p data-sourcepos=\"37:1-37:236\">以下の表は、1,000回の対戦において、手札に含まれていた各カードの枚数別出現回数をまとめたものです。たねポケを2枚引いた回数は<strong>62回</strong>で、全体の<b>6.2%</b>となりました。</p>\n<table data-sourcepos=\"39:1-50:44\">\n<thead>\n<tr data-sourcepos=\"39:1-39:55\">\n<th data-sourcepos=\"39:2-39:15\">カード名</th>\n<th data-sourcepos=\"39:17-39:22\">0枚</th>\n<th data-sourcepos=\"39:24-39:29\">1枚</th>\n<th data-sourcepos=\"39:31-39:36\">2枚</th>\n<th data-sourcepos=\"39:38-39:54\">枚数期待値</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"41:1-41:42\">\n<td data-sourcepos=\"41:2-41:18\">コイキング</td>\n<td data-sourcepos=\"41:20-41:22\">0</td>\n<td data-sourcepos=\"41:24-41:28\">938</td>\n<td data-sourcepos=\"41:30-41:33\">62</td>\n<td data-sourcepos=\"41:35-41:41\">1.062</td>\n</tr>\n<tr data-sourcepos=\"42:1-42:44\">\n<td data-sourcepos=\"42:2-42:18\">きずぐすり</td>\n<td data-sourcepos=\"42:20-42:24\">604</td>\n<td data-sourcepos=\"42:26-42:30\">352</td>\n<td data-sourcepos=\"42:32-42:35\">44</td>\n<td data-sourcepos=\"42:37-42:43\">0.440</td>\n</tr>\n<tr data-sourcepos=\"43:1-43:44\">\n<td data-sourcepos=\"43:2-43:18\">スピーダー</td>\n<td data-sourcepos=\"43:20-43:24\">605</td>\n<td data-sourcepos=\"43:26-43:30\">353</td>\n<td data-sourcepos=\"43:32-43:35\">42</td>\n<td data-sourcepos=\"43:37-43:43\">0.437</td>\n</tr>\n<tr data-sourcepos=\"44:1-44:53\">\n<td data-sourcepos=\"44:2-44:27\">モンスターボール</td>\n<td data-sourcepos=\"44:29-44:33\">590</td>\n<td data-sourcepos=\"44:35-44:39\">370</td>\n<td data-sourcepos=\"44:41-44:44\">40</td>\n<td data-sourcepos=\"44:46-44:52\">0.450</td>\n</tr>\n<tr data-sourcepos=\"45:1-45:50\">\n<td data-sourcepos=\"45:2-45:24\">ハンドスコープ</td>\n<td data-sourcepos=\"45:26-45:30\">571</td>\n<td data-sourcepos=\"45:32-45:36\">388</td>\n<td data-sourcepos=\"45:38-45:41\">41</td>\n<td data-sourcepos=\"45:43-45:49\">0.470</td>\n</tr>\n<tr data-sourcepos=\"46:1-46:47\">\n<td data-sourcepos=\"46:2-46:21\">ポケモン図鑑</td>\n<td data-sourcepos=\"46:23-46:27\">610</td>\n<td data-sourcepos=\"46:29-46:33\">347</td>\n<td data-sourcepos=\"46:35-46:38\">43</td>\n<td data-sourcepos=\"46:40-46:46\">0.433</td>\n</tr>\n<tr data-sourcepos=\"47:1-47:47\">\n<td data-sourcepos=\"47:2-47:21\">レッドカード</td>\n<td data-sourcepos=\"47:23-47:27\">644</td>\n<td data-sourcepos=\"47:29-47:33\">325</td>\n<td data-sourcepos=\"47:35-47:38\">31</td>\n<td data-sourcepos=\"47:40-47:46\">0.387</td>\n</tr>\n<tr data-sourcepos=\"48:1-48:41\">\n<td data-sourcepos=\"48:2-48:15\">幻の石板</td>\n<td data-sourcepos=\"48:17-48:21\">628</td>\n<td data-sourcepos=\"48:23-48:27\">331</td>\n<td data-sourcepos=\"48:29-48:32\">41</td>\n<td data-sourcepos=\"48:34-48:40\">0.413</td>\n</tr>\n<tr data-sourcepos=\"49:1-49:47\">\n<td data-sourcepos=\"49:2-49:21\">ポケモンの笛</td>\n<td data-sourcepos=\"49:23-49:27\">593</td>\n<td data-sourcepos=\"49:29-49:33\">365</td>\n<td data-sourcepos=\"49:35-49:38\">42</td>\n<td data-sourcepos=\"49:40-49:46\">0.449</td>\n</tr>\n<tr data-sourcepos=\"50:1-50:44\">\n<td data-sourcepos=\"50:2-50:18\">博士の研究</td>\n<td data-sourcepos=\"50:20-50:24\">588</td>\n<td data-sourcepos=\"50:26-50:30\">365</td>\n<td data-sourcepos=\"50:32-50:35\">47</td>\n<td data-sourcepos=\"50:37-50:43\">0.459</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"53:1-53:19\">\n<span id=\"理論値計算\" class=\"fragment\"></span><a href=\"#%E7%90%86%E8%AB%96%E5%80%A4%E8%A8%88%E7%AE%97\"><i class=\"fa fa-link\"></i></a>理論値計算</h3>\n<p data-sourcepos=\"54:1-54:113\">続いて、3つのロジックについて、「たねポケを2枚引く確率」を理論的に求めます。</p>\n<p data-sourcepos=\"56:1-58:287\"><strong>ロジック1</strong><br>\n<ins><strong>初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く</strong></ins><br>\nこの場合は、「山札20枚からたねポケ1枚を除き、残った19枚から4枚を引いた時にもう1枚のたねポケを引く確率」で考えることができます。このロジックの場合、「たねポケを2枚引く確率」は<b>21.1%</b>となります。</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"60:1-66:3\"><div class=\"highlight\"><pre><code>\\begin{align}\np_1 &amp;= \\frac{たねポケ2枚以外のカード3枚の組み合わせ}{カード4枚の組み合わせ} \\\\\n&amp;= \\frac{_{18}C_3}{_{19}C_4} \\\\\n&amp;= 0.21053\n\\end{align}\n</code></pre></div></div>\n<p data-sourcepos=\"68:1-70:282\"><strong>ロジック2</strong><br>\n<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す</strong></ins><br>\nこの場合は、「山札20枚から5枚引いてたねポケを1枚以上引いた場合に、たねポケを2枚とも引いている確率」で考えることができます。このロジックの場合、「たねポケを2枚引く確率」は<b>11.8%</b>となります。</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"72:1-78:3\"><div class=\"highlight\"><pre><code>\\begin{align}\np_2 &amp;= \\frac{たねポケ2枚以外のカード3枚の組み合わせ}{カード5枚中たねポケが1枚以上含まれる組み合わせ} \\\\\n&amp;= \\frac{_{18}C_3}{_{20}C_5 - {}_{18}C_5} \\\\\n&amp;= 0.11765\n\\end{align}\n</code></pre></div></div>\n<p data-sourcepos=\"80:1-82:239\"><strong>ロジック3</strong><br>\n<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></ins><br>\nこの場合は、「山札20枚から5枚引いて、たねポケを2枚とも引いている確率」と考えることができます。このロジックの場合、「たねポケを2枚引く確率」は<b>5.26%</b>となります。</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"84:1-90:3\"><div class=\"highlight\"><pre><code>\\begin{align}\np_3 &amp;= \\frac{たねポケ2枚以外のカード3枚の組み合わせ}{カード5枚の組み合わせ} \\\\\n&amp;= \\frac{_{18}C_3}{_{20}C_5} \\\\\n&amp;= 0.05263\n\\end{align}\n</code></pre></div></div>\n<h3 data-sourcepos=\"92:1-92:19\">\n<span id=\"統計的検定\" class=\"fragment\"></span><a href=\"#%E7%B5%B1%E8%A8%88%E7%9A%84%E6%A4%9C%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>統計的検定</h3>\n<p data-sourcepos=\"94:1-94:141\">集計結果と各ロジックによって導かれた理論値との間に、統計的に有意な差が存在するかを検定します。</p>\n<p data-sourcepos=\"96:1-97:226\">まず、1回の試行で「たねポケを2枚引く」確率を$p$とし、このとき成功（たねポケを2枚引く）を$1$、失敗（それ以外）を$0$とする確率変数$X \\in \\lbrace 0, 1 \\rbrace$を定義します。この試行を独立に$n$回繰り返すと、成功回数$K= \\sum_{j=1}^{n} X_j$は二項分布$Bin(n, p)$に従います。<br>\nここで、$n$が十分大きい場合、二項分布はその期待値$\\mu=np$, 分散$\\sigma^2=np(1-p)$に基づいて正規分布に近似できます。つまり、$K$を標準正規分布に変換した統計量$z$は、</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"98:1-100:3\"><div class=\"highlight\"><pre><code>z = \\frac{K - np}{\\sqrt{np(1-p)}}\n</code></pre></div></div>\n<p data-sourcepos=\"101:1-101:101\">と導出でき、この$z$は近似的に標準正規分布$N(0,1)$に従うと考えられます。</p>\n<p data-sourcepos=\"103:1-103:354\">ここで、帰無仮説$H_0$を「たねポケを2枚引く確率が理論通り$p$である」とし、対立仮説を「たねポケを2枚引く確率が$p$ではない」と定義します。有意水準は$\\alpha=0.05$（両側検定）とし、計算された$z$に対応する$p$値が$\\alpha$より小さい場合は、$H_0$を棄却します。</p>\n<p data-sourcepos=\"105:1-105:132\">以下は、集計結果に基づいて検定を行った結果です。試行回数は$n = 1000$、成功回数は$K = 62$です。</p>\n<p data-sourcepos=\"107:1-108:25\"><strong>ロジック1</strong><br>\n理論値：$p = 0.21053$</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"109:1-111:3\"><div class=\"highlight\"><pre><code>z = \\frac{62 - 210.53}{\\sqrt{210.53(1-0.21053)}} = -11.521\n</code></pre></div></div>\n<p data-sourcepos=\"112:1-112:224\">このときの$p$値は$p \\approx 0.0000000\\%$となり、有意水準$\\alpha=5\\%$を大きく下回ります。よって、帰無仮説$H_0$は棄却され、<strong>ロジック1は有意に異なると判断できます</strong>。</p>\n<p data-sourcepos=\"114:1-115:25\"><strong>ロジック2</strong><br>\n理論値：$p = 0.11765$</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"116:1-118:3\"><div class=\"highlight\"><pre><code>z = \\frac{62 - 117.65}{\\sqrt{117.65(1-0.11765)}} = -5.462\n</code></pre></div></div>\n<p data-sourcepos=\"119:1-119:224\">このときの$p$値は$p \\approx 0.0000047\\%$となり、有意水準$\\alpha=5\\%$を大きく下回ります。よって、帰無仮説$H_0$は棄却され、<strong>ロジック2は有意に異なると判断できます</strong>。</p>\n<p data-sourcepos=\"121:1-122:25\"><strong>ロジック3</strong><br>\n理論値：$p = 0.05263$</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"123:1-125:3\"><div class=\"highlight\"><pre><code>z = \\frac{62 - 52.63}{\\sqrt{52.63(1-0.05263)}} = 1.327\n</code></pre></div></div>\n<p data-sourcepos=\"126:1-126:256\">このときの$p$値は$p \\approx 18.46\\%$となり、有意水準$\\alpha=5\\%$を十分に上回ります。よって、帰無仮説$H_0$は棄却されず、<strong>ロジック3は理論値と集計結果の間に統計的有意差は見られません</strong>。</p>\n<h3 data-sourcepos=\"128:1-128:10\">\n<span id=\"考察\" class=\"fragment\"></span><a href=\"#%E8%80%83%E5%AF%9F\"><i class=\"fa fa-link\"></i></a>考察</h3>\n<p data-sourcepos=\"130:1-131:340\">以上の結果から、<strong>ロジック3のみが集計結果と統計的に矛盾しない</strong>と判断されます。<br>\nしたがって、「<strong>初手で引く5枚に1枚以上たねポケが入る</strong>」ときに使用されるロジックは、ロジック3の「<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></ins>」であると統計的に裏付けられました。</p>\n<hr data-sourcepos=\"133:1-134:0\">\n<h2 data-sourcepos=\"135:1-135:49\">\n<span id=\"検証2ネッコアラのみを引く確率\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC2%E3%83%8D%E3%83%83%E3%82%B3%E3%82%A2%E3%83%A9%E3%81%AE%E3%81%BF%E3%82%92%E5%BC%95%E3%81%8F%E7%A2%BA%E7%8E%87\"><i class=\"fa fa-link\"></i></a>検証2：ネッコアラのみを引く確率</h2>\n<h3 data-sourcepos=\"137:1-137:25\">\n<span id=\"使用したデッキ-1\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%83%87%E3%83%83%E3%82%AD-1\"><i class=\"fa fa-link\"></i></a>使用したデッキ</h3>\n<p data-sourcepos=\"138:1-138:271\">次に、前シーズン（A3）にXで話題になった、ダークライギラティナデッキにネッコアラを1枚入れたとき、最初に「ネッコアラのみを引く確率」について検証します。使用したデッキは以下の通りです。</p>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fbed2bcb1-01b3-47fb-9e46-23ba0de1e7d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8311bf0beefce9b1b51f6aeabc34b210\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fbed2bcb1-01b3-47fb-9e46-23ba0de1e7d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8311bf0beefce9b1b51f6aeabc34b210\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fbed2bcb1-01b3-47fb-9e46-23ba0de1e7d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=be01c82dc994d6633ab2469bff245169 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4102743/bed2bcb1-01b3-47fb-9e46-23ba0de1e7d3.png\" loading=\"lazy\"></a>\n<p>\n    図2. 検証2で使用したデッキ（ネッコアラ1枚、ダークライ2枚、ギラティナ2枚、その他15枚）\n</p>\n<h3 data-sourcepos=\"145:1-145:16\">\n<span id=\"集計結果-1\" class=\"fragment\"></span><a href=\"#%E9%9B%86%E8%A8%88%E7%B5%90%E6%9E%9C-1\"><i class=\"fa fa-link\"></i></a>集計結果</h3>\n<p data-sourcepos=\"146:1-146:252\">以下の表は、1,000回の対戦において手札に含まれていたたねポケの組み合わせ別の出現回数をまとめたものです。ネッコアラのみを引いた回数は<strong>128回</strong>で、全体の<b>12.8%</b>となりました。</p>\n<table data-sourcepos=\"148:1-156:37\">\n<thead>\n<tr data-sourcepos=\"148:1-148:64\">\n<th data-sourcepos=\"148:2-148:18\">ネッコアラ</th>\n<th data-sourcepos=\"148:20-148:36\">ダークライ</th>\n<th data-sourcepos=\"148:38-148:54\">ギラティナ</th>\n<th data-sourcepos=\"148:56-148:63\">回数</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"150:1-150:36\">\n<td data-sourcepos=\"150:2-150:8\">なし</td>\n<td data-sourcepos=\"150:10-150:21\">1枚以上</td>\n<td data-sourcepos=\"150:23-150:30\">なし</td>\n<td data-sourcepos=\"150:32-150:35\">294</td>\n</tr>\n<tr data-sourcepos=\"151:1-151:36\">\n<td data-sourcepos=\"151:2-151:8\">なし</td>\n<td data-sourcepos=\"151:10-151:17\">なし</td>\n<td data-sourcepos=\"151:19-151:30\">1枚以上</td>\n<td data-sourcepos=\"151:32-151:35\">285</td>\n</tr>\n<tr data-sourcepos=\"152:1-152:40\">\n<td data-sourcepos=\"152:2-152:8\">なし</td>\n<td data-sourcepos=\"152:10-152:21\">1枚以上</td>\n<td data-sourcepos=\"152:23-152:34\">1枚以上</td>\n<td data-sourcepos=\"152:36-152:39\">130</td>\n</tr>\n<tr data-sourcepos=\"153:1-153:30\">\n<td data-sourcepos=\"153:2-153:6\">1枚</td>\n<td data-sourcepos=\"153:8-153:15\">なし</td>\n<td data-sourcepos=\"153:17-153:24\">なし</td>\n<td data-sourcepos=\"153:26-153:29\">128</td>\n</tr>\n<tr data-sourcepos=\"154:1-154:33\">\n<td data-sourcepos=\"154:2-154:6\">1枚</td>\n<td data-sourcepos=\"154:8-154:19\">1枚以上</td>\n<td data-sourcepos=\"154:21-154:28\">なし</td>\n<td data-sourcepos=\"154:30-154:32\">72</td>\n</tr>\n<tr data-sourcepos=\"155:1-155:33\">\n<td data-sourcepos=\"155:2-155:6\">1枚</td>\n<td data-sourcepos=\"155:8-155:15\">なし</td>\n<td data-sourcepos=\"155:17-155:28\">1枚以上</td>\n<td data-sourcepos=\"155:30-155:32\">68</td>\n</tr>\n<tr data-sourcepos=\"156:1-156:37\">\n<td data-sourcepos=\"156:2-156:6\">1枚</td>\n<td data-sourcepos=\"156:8-156:19\">1枚以上</td>\n<td data-sourcepos=\"156:21-156:32\">1枚以上</td>\n<td data-sourcepos=\"156:34-156:36\">23</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"158:1-158:19\">\n<span id=\"理論値計算-1\" class=\"fragment\"></span><a href=\"#%E7%90%86%E8%AB%96%E5%80%A4%E8%A8%88%E7%AE%97-1\"><i class=\"fa fa-link\"></i></a>理論値計算</h3>\n<p data-sourcepos=\"160:1-160:114\">それぞれのロジックについて、「ネッコアラのみを引く確率」を理論的に求めます。</p>\n<p data-sourcepos=\"162:1-164:300\"><strong>ロジック1</strong><br>\n<ins><strong>初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く</strong></ins><br>\nこの場合は、「初めのたねポケとしてネッコアラを引き、残った19枚から4枚を引いた時にたねポケが含まれない確率」で考えることができます。このロジックの場合、「ネッコアラのみを引く確率」は<b>7.04%</b>となります。</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"166:1-172:3\"><div class=\"highlight\"><pre><code>\\begin{align}\np_1 &amp;= 初めにネッコアラを引く確率 \\times \\frac{カード4枚中たねポケが含まれない組み合わせ}{カード4枚の組み合わせ} \\\\\n&amp;= \\frac{1}{5} \\times \\frac{_{15}C_4}{_{19}C_4} \\\\\n&amp;= 0.07043\n\\end{align}\n</code></pre></div></div>\n<p data-sourcepos=\"174:1-176:286\"><strong>ロジック2</strong><br>\n<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す</strong></ins><br>\nこの場合は、「山札20枚から5枚引いてたねポケを1枚以上引いた場合に、ネッコアラのみを引いている確率」で考えることができます。このロジックの場合、「ネッコアラのみを引く確率」は<b>10.9%</b>となります。</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"178:1-184:3\"><div class=\"highlight\"><pre><code>\\begin{align}\np_2 &amp;= \\frac{カード4枚中たねポケが含まれない組み合わせ}{カード5枚中たねポケが1枚以上含まれる組み合わせ} \\\\\n&amp;= \\frac{_{15}C_4}{_{20}C_5 - {}_{15}C_5} \\\\\n&amp;= 0.10919\n\\end{align}\n</code></pre></div></div>\n<p data-sourcepos=\"186:1-188:327\"><strong>ロジック3</strong><br>\n<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></ins><br>\nこの場合は、「山札20枚から5枚引いてネッコアラのみを引く確率と、たねポケが引けなかったときにネッコアラを引く確率を足したもの」と考えることができます。このロジックの場合、「ネッコアラのみを引く確率」は<b>12.7%</b>となります。</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"190:1-196:3\"><div class=\"highlight\"><pre><code>\\begin{align}\np_3 &amp;= \\frac{カード4枚中たねポケが含まれない組み合わせ}{カード5枚の組み合わせ} + \\frac{カード5枚中たねポケが含まれない組み合わせ}{カード5枚の組み合わせ} \\times 入れ替えるときにネッコアラを引く確率 \\\\\n&amp;= \\frac{_{15}C_4}{_{20}C_5} + \\frac{_{15}C_5}{_{20}C_5} \\times\\frac{1}{5} \\\\\n&amp;= 0.12678\n\\end{align}\n</code></pre></div></div>\n<h3 data-sourcepos=\"198:1-198:19\">\n<span id=\"統計的検定-1\" class=\"fragment\"></span><a href=\"#%E7%B5%B1%E8%A8%88%E7%9A%84%E6%A4%9C%E5%AE%9A-1\"><i class=\"fa fa-link\"></i></a>統計的検定</h3>\n<p data-sourcepos=\"200:1-201:372\">検証2についても、集計結果と理論値との間に統計的に有意な差が存在するかを検定します。<br>\nここでは、1回の試行で「ネッコアラのみを引く」確率を$p$とし、このとき成功を$1$、失敗を$0$とする確率変数$X \\in \\lbrace 0, 1 \\rbrace$を定義します。この試行を独立に$n$回繰り返すと、成功回数$K= \\sum_{j=1}^{n} X_j$は二項分布$Bin(n, p)$に従います。$n$が十分大きい場合、統計量$z$は、</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"202:1-204:3\"><div class=\"highlight\"><pre><code>z = \\frac{K - np}{\\sqrt{np(1-p)}}\n</code></pre></div></div>\n<p data-sourcepos=\"205:1-205:104\">と導出でき、標準正規分布$N(0,1)$に従う確率変数として扱うことができます。</p>\n<p data-sourcepos=\"207:1-207:347\">検証2では、帰無仮説$H_0$を「ネッコアラのみを引く確率が$p$である」、対立仮説を「ネッコアラのみを引く確率が$p$ではない」と定義し、有意水準$\\alpha=0.05$の両側検定を行います。計算された$z$に対応する$p$値が$\\alpha$より小さい場合は、$H_0$を棄却します。</p>\n<p data-sourcepos=\"209:1-209:133\">以下は、集計結果に基づいて検定を行った結果です。試行回数は$n = 1000$、成功回数は$K = 128$です。</p>\n<p data-sourcepos=\"211:1-212:25\"><strong>ロジック1</strong><br>\n理論値：$p = 0.07043$</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"213:1-215:3\"><div class=\"highlight\"><pre><code>z = \\frac{128 - 70.43}{\\sqrt{70.43(1-0.07043)}} = 7.114\n</code></pre></div></div>\n<p data-sourcepos=\"216:1-216:224\">このときの$p$値は$p \\approx 0.0000000\\%$となり、有意水準$\\alpha=5\\%$を大きく下回ります。よって、帰無仮説$H_0$は棄却され、<strong>ロジック1は有意に異なると判断できます</strong>。</p>\n<p data-sourcepos=\"218:1-219:25\"><strong>ロジック2</strong><br>\n理論値：$p = 0.10919$</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"220:1-222:3\"><div class=\"highlight\"><pre><code>z = \\frac{128 - 109.19}{\\sqrt{109.19(1-0.10919)}} = 1.907\n</code></pre></div></div>\n<p data-sourcepos=\"223:1-223:280\">このときの$p$値は$p \\approx 5.651\\%$となり、有意水準$\\alpha=5\\%$をわずかに上回ります。よって、帰無仮説$H_0$はぎりぎり棄却できない範囲に収まりますが、<strong>ロジック2は有意差の境界上にあると評価できます</strong>。</p>\n<p data-sourcepos=\"225:1-226:25\"><strong>ロジック3</strong><br>\n理論値：$p = 0.12678$</p>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"227:1-229:3\"><div class=\"highlight\"><pre><code>z = \\frac{128 - 126.78}{\\sqrt{126.78(1-0.12678)}} = 0.116\n</code></pre></div></div>\n<p data-sourcepos=\"230:1-230:256\">このときの$p$値は$p \\approx 90.77\\%$となり、有意水準$\\alpha=5\\%$を十分に上回ります。よって、帰無仮説$H_0$は棄却されず、<strong>ロジック3は理論値と集計結果の間に統計的有意差は見られません</strong>。</p>\n<h3 data-sourcepos=\"233:1-233:10\">\n<span id=\"考察-1\" class=\"fragment\"></span><a href=\"#%E8%80%83%E5%AF%9F-1\"><i class=\"fa fa-link\"></i></a>考察</h3>\n<p data-sourcepos=\"235:1-236:383\">以上の結果から、ロジック2とロジック3はいずれも統計的に有意差が見られず、帰無仮説は棄却されませんでした。しかし、検定結果の$p$値の大きさを踏まえると、<strong>ロジック3のほうがより実際の挙動と近い</strong>と判断できます。<br>\nしたがって、2つの検証結果を総合的に踏まえると、「<strong>初手で引く5枚に1枚以上たねポケが入る</strong>」ときに使用されるロジックは、ロジック3の「<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></ins>」と統計的に裏付けられました。</p>\n<hr data-sourcepos=\"238:1-239:0\">\n<h2 data-sourcepos=\"240:1-240:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<p data-sourcepos=\"242:1-243:58\">本記事では、『Pokémon Trading Card Game Pocket（ポケポケ）』において、「<strong>初手で引く5枚に1枚以上たねポケが入る</strong>」という仕様について、実際にどのようなロジックが使われているのかを、<strong>統計的な手法</strong>（<strong>Z検定</strong>）を用いて検証しました。<br>\n検証対象としたロジックは以下の3つです。</p>\n<ol data-sourcepos=\"245:1-248:0\">\n<li data-sourcepos=\"245:1-245:114\"><strong>初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く</strong></li>\n<li data-sourcepos=\"246:1-246:123\"><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す</strong></li>\n<li data-sourcepos=\"247:1-248:0\"><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></li>\n</ol>\n<p data-sourcepos=\"249:1-249:148\">この3つのロジックについて、以下の2つの観点から実データ（各1,000回の試行）と理論値の比較を行いました。</p>\n<ul data-sourcepos=\"251:1-253:0\">\n<li data-sourcepos=\"251:1-251:47\"><strong>検証1：たねポケを2枚引く確率</strong></li>\n<li data-sourcepos=\"252:1-253:0\"><strong>検証2：ネッコアラのみを引く確率</strong></li>\n</ul>\n<p data-sourcepos=\"254:1-254:423\">両方の検証結果から共通してわかったことは、<strong>ロジック3</strong>の「<ins><strong>山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える</strong></ins>」が最も近いということです。特に、検証1では、ロジック1、2が大きく乖離する一方で、ロジック3のみが理論値と非常に近い値を示しました。</p>\n<p data-sourcepos=\"256:1-256:288\">この結果は、本家『Pokémon Trading Card Game（ポケカ）』で採用されているマリガン（ロジック2）とは異なる結果となりました。ポケポケでは、よりスムーズにゲームを開始できるような仕様になっていると言えます。</p>\n<hr data-sourcepos=\"259:1-260:0\">\n<h2 data-sourcepos=\"261:1-261:30\">\n<span id=\"使用したプログラム\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\"><i class=\"fa fa-link\"></i></a>使用したプログラム</h2>\n<p data-sourcepos=\"263:1-263:75\">それぞれの手順で用いたプログラムを載せておきます。</p>\n<h3 data-sourcepos=\"265:1-265:46\">\n<span id=\"手順1pyautoguiによる自動対戦\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%861pyautogui%E3%81%AB%E3%82%88%E3%82%8B%E8%87%AA%E5%8B%95%E5%AF%BE%E6%88%A6\"><i class=\"fa fa-link\"></i></a>手順1：<code>pyautogui</code>による自動対戦</h3>\n<p data-sourcepos=\"266:1-266:543\"><code>pyautogui</code>を用いてBlueStacks上の「ひとりで」モード対戦を自動化させ、2種類のデッキで1,000回ずつ、合計2,000回実行しました。1回の対戦に要する時間は約36秒であるため、約20時間にわたって実行を行いました。また、処理が正しく進んでいるかを確認するために、<code>OpenCV</code>の画像マッチングを用いて対戦画面の左下に表示されるメニューアイコン（三本線）が映っているかどうかを随時チェックしています。</p>\n<ul data-sourcepos=\"267:1-270:0\">\n<li data-sourcepos=\"267:1-267:154\">\n<code>run_cycle()</code>：1回分の対戦を行い、終了までの一連の操作（デッキ選択・バトル開始・降参など）を自動で実行する</li>\n<li data-sourcepos=\"268:1-268:163\">\n<code>check_image_similarity()</code>：スクリーンショット内にメニューアイコンが含まれているかをテンプレートマッチングで確認する</li>\n<li data-sourcepos=\"269:1-270:0\">\n<code>main()</code>：これらの処理を1,000回繰り返して実行する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"271:1-359:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">pyautogui</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n\n<span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"n\">FAILSAFE</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>  <span class=\"c1\"># 緊急停止用（マウスを左上に移動）\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_cycle</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">対戦デッキ選択</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">942</span><span class=\"p\">,</span> <span class=\"mi\">499</span><span class=\"p\">)</span>  <span class=\"c1\"># 対戦デッキ選択\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">バトル開始</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">942</span><span class=\"p\">,</span> <span class=\"mi\">883</span><span class=\"p\">)</span>  <span class=\"c1\"># バトル開始\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">スクリーンショット</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">hotkey</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ctrl</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">shift</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">s</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># スクリーンショット\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">メニュー</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">705</span><span class=\"p\">,</span> <span class=\"mi\">862</span><span class=\"p\">)</span>  <span class=\"c1\"># メニュー\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">降参ボタン1回目</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">904</span><span class=\"p\">,</span> <span class=\"mi\">686</span><span class=\"p\">)</span>  <span class=\"c1\"># 降参ボタン1回目\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">降参ボタン2回目</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">942</span><span class=\"p\">,</span> <span class=\"mi\">606</span><span class=\"p\">)</span>  <span class=\"c1\"># 降参ボタン2回目\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">タップ</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">942</span><span class=\"p\">,</span> <span class=\"mi\">974</span><span class=\"p\">)</span>  <span class=\"c1\"># タップ\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">次へ</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pyautogui</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">(</span><span class=\"mi\">942</span><span class=\"p\">,</span> <span class=\"mi\">974</span><span class=\"p\">)</span>  <span class=\"c1\"># 次へ\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">check_image_similarity</span><span class=\"p\">():</span>\n    <span class=\"n\">image_pattern</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./pictures/*</span><span class=\"sh\">\"</span>\n    <span class=\"n\">template_path</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./templates/menu.png</span><span class=\"sh\">\"</span>\n\n    <span class=\"c1\"># 名前が一番下の画像を取得\n</span>    <span class=\"n\">png_files</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"n\">image_pattern</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">png_files</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">画像ファイルが見つかりませんでした。</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    \n    <span class=\"n\">latest_image_path</span> <span class=\"o\">=</span> <span class=\"n\">png_files</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">basename</span><span class=\"p\">(</span><span class=\"n\">latest_image_path</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">比較対象画像: </span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 画像を読み込み\n</span>    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">latest_image_path</span><span class=\"p\">)</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">template_path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">img</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"ow\">or</span> <span class=\"n\">template</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">画像の読み込みに失敗しました。</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"c1\"># テンプレートマッチングを実行\n</span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">matchTemplate</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">TM_CCOEFF_NORMED</span><span class=\"p\">)</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">max_val</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">minMaxLoc</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">テンプレートマッチスコア: </span><span class=\"si\">{</span><span class=\"n\">max_val</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 閾値未満なら停止（類似度が低い）\n</span>    <span class=\"k\">if</span> <span class=\"n\">max_val</span> <span class=\"o\">&lt;=</span> <span class=\"mf\">0.95</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">テンプレートが画像にマッチしませんでした。自動操作を停止します。</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nf\">exit</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>  <span class=\"c1\"># 対戦回数\n</span>    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># 開始までの猶予時間\n</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">--- </span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\"> 回目の実行 ---</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">run_cycle</span><span class=\"p\">()</span>  <span class=\"c1\"># 対戦実行\n</span>        <span class=\"nf\">check_image_similarity</span><span class=\"p\">()</span>  <span class=\"c1\"># スクリーンショットにメニューの3本線があるか\n</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s\">回の自動操作が完了しました。</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">main</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<hr data-sourcepos=\"360:1-360:3\">\n<h3 data-sourcepos=\"361:1-361:65\">\n<span id=\"手順2画像マッチングによるカード枚数判定\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%862%E7%94%BB%E5%83%8F%E3%83%9E%E3%83%83%E3%83%81%E3%83%B3%E3%82%B0%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AB%E3%83%BC%E3%83%89%E6%9E%9A%E6%95%B0%E5%88%A4%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>手順2：画像マッチングによるカード枚数判定</h3>\n<p data-sourcepos=\"362:1-362:444\">当初はOCR（光学文字認識）によってスクリーンショットからカード名を読み取ろうとしましたが、文字認識の精度が足りませんでした。そこで、手順1と同様に、カードの左側の一部分をテンプレート画像として用意し、<code>OpenCV</code>の画像マッチングでスクリーンショット内に該当部分が何箇所あるかを検出する方法に切り替えました。</p>\n<ul data-sourcepos=\"363:1-366:0\">\n<li data-sourcepos=\"363:1-363:197\">\n<code>suppress_close_matches(points, distance_thresh=10)</code>：画像マッチングによって得られた候補点<code>points</code>のうち、近すぎて重複しているものをまとめて１つにする</li>\n<li data-sourcepos=\"364:1-364:454\">\n<code>process_images(image_pattern, templates, output_dir, anomaly_dir)</code>：スクリーンショットを読み込み、各テンプレートについて一致箇所を検出する。各カードの枚数が0～2枚の範囲に収まっている、かつカードの合計が5枚になっているかを確認し、問題なければ<code>output_dir</code>へ、異常があれば<code>anomaly_dir</code>へ検出結果を保存する。最後に全データをCSVに保存する</li>\n<li data-sourcepos=\"365:1-366:0\">\n<code>main()</code>：ディレクトリを定義して実行する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"367:1-482:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">csv</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">suppress_close_matches</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">distance_thresh</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">filtered</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">pt</span> <span class=\"ow\">in</span> <span class=\"n\">points</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nf\">all</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"nf\">norm</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"n\">distance_thresh</span> <span class=\"k\">for</span> <span class=\"n\">other</span> <span class=\"ow\">in</span> <span class=\"n\">filtered</span><span class=\"p\">):</span>\n            <span class=\"n\">filtered</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">filtered</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_images</span><span class=\"p\">(</span><span class=\"n\">image_pattern</span><span class=\"p\">,</span> <span class=\"n\">templates</span><span class=\"p\">,</span> <span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">anomaly_dir</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 入力画像一覧\n</span>    <span class=\"n\">image_paths</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"n\">image_pattern</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">image_paths</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">画像が見つかりませんでした。</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">画像枚数: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">image_paths</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 出力ディレクトリ\n</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"n\">anomaly_dir</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 全体結果を格納\n</span>    <span class=\"n\">all_results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">template_names</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">templates</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># 各画像の処理\n</span>    <span class=\"k\">for</span> <span class=\"n\">main_path</span> <span class=\"ow\">in</span> <span class=\"n\">image_paths</span><span class=\"p\">:</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">basename</span><span class=\"p\">(</span><span class=\"n\">main_path</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">画像処理中: </span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 入力画像を読み込み\n</span>        <span class=\"n\">main_img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">main_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">main_img</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">読み込み失敗: </span><span class=\"si\">{</span><span class=\"n\">main_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">main_color</span> <span class=\"o\">=</span> <span class=\"n\">main_img</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"c1\"># 各テンプレート画像で探索\n</span>        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">templates</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">template_path</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">path</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">threshold</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">template_path</span><span class=\"p\">):</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">: テンプレートが見つかりません</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">continue</span>\n            \n            <span class=\"c1\"># テンプレート画像を読み込み\n</span>            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">template_path</span><span class=\"p\">)</span>\n            <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># テンプレートマッチング実行\n</span>            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">matchTemplate</span><span class=\"p\">(</span><span class=\"n\">main_color</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">TM_CCOEFF_NORMED</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># 指定された閾値以上の座標を抽出\n</span>            <span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">&gt;=</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n            <span class=\"n\">raw_points</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">loc</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n            <span class=\"c1\"># 近すぎるマッチを除去\n</span>            <span class=\"n\">filtered_pts</span> <span class=\"o\">=</span> <span class=\"nf\">suppress_close_matches</span><span class=\"p\">(</span><span class=\"n\">raw_points</span><span class=\"p\">,</span> <span class=\"n\">distance_thresh</span><span class=\"o\">=</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># 有効な検出数を記録\n</span>            <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">filtered_pts</span><span class=\"p\">)</span>\n            <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span>\n\n            <span class=\"c1\"># 検出箇所に赤い矩形を描画\n</span>            <span class=\"k\">for</span> <span class=\"n\">pt</span> <span class=\"ow\">in</span> <span class=\"n\">filtered_pts</span><span class=\"p\">:</span>\n                <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">rectangle</span><span class=\"p\">(</span><span class=\"n\">main_img</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 合計数\n</span>        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># 保存先フォルダに画像保存\n</span>        <span class=\"n\">card_counts_valid</span> <span class=\"o\">=</span> <span class=\"nf\">all</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">v</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span>  <span class=\"c1\"># 各カードの枚数が0〜2枚の範囲にあるか確認\n</span>        <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"o\">==</span> <span class=\"mi\">5</span> <span class=\"ow\">and</span> <span class=\"n\">card_counts_valid</span><span class=\"p\">:</span>  <span class=\"c1\"># 合計枚数が5枚かを確認\n</span>            <span class=\"n\">save_dir</span> <span class=\"o\">=</span> <span class=\"n\">output_dir</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">save_dir</span> <span class=\"o\">=</span> <span class=\"n\">anomaly_dir</span>\n            <span class=\"n\">summary_line</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"sh\">\"</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()])</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">バグ検出: </span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s\"> | カード種類: </span><span class=\"si\">{</span><span class=\"n\">summary_line</span><span class=\"si\">}</span><span class=\"s\">, 合計: </span><span class=\"si\">{</span><span class=\"n\">total</span><span class=\"si\">}</span><span class=\"s\"> 枚</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result_img_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s\">_result.png</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imwrite</span><span class=\"p\">(</span><span class=\"n\">result_img_path</span><span class=\"p\">,</span> <span class=\"n\">main_img</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 結果をall_resultsに追加\n</span>        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">filename</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">template_names</span><span class=\"p\">]</span>\n        <span class=\"n\">all_results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 最後にCSV出力\n</span>    <span class=\"n\">summary_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">summary.csv</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">summary_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"sh\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nf\">writer</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n        <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">template_names</span>\n        <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"nf\">writerow</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"nf\">writerows</span><span class=\"p\">(</span><span class=\"n\">all_results</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># テンプレート画像\n</span>    <span class=\"n\">templates</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">hoge</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">path</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">./templates/hoge.png</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">threshold</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">0.7</span><span class=\"p\">},</span>\n        <span class=\"sh\">\"</span><span class=\"s\">fuga</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">path</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">./templates/fuga.png</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">threshold</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mf\">0.8</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">image_pattern</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./pictures/*</span><span class=\"sh\">\"</span>  <span class=\"c1\"># 手札画像\n</span>    <span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./output</span><span class=\"sh\">\"</span>  <span class=\"c1\"># 成功した画像を出力\n</span>    <span class=\"n\">anomaly_dir</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./anomaly</span><span class=\"sh\">\"</span>  <span class=\"c1\"># バグ検出した画像を出力\n</span>    <span class=\"nf\">process_images</span><span class=\"p\">(</span><span class=\"n\">image_pattern</span><span class=\"p\">,</span> <span class=\"n\">templates</span><span class=\"p\">,</span> <span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">anomaly_dir</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">main</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p data-sourcepos=\"484:1-484:162\">以下は、画像マッチングによりカードを検出した結果です。テンプレートに一致した領域には赤枠が描画されています。</p>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fcd6585e4-5fbd-4bff-83df-2d6872cd3d30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c8cd8038ed0f9da93f2f9cea6323ed1d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fcd6585e4-5fbd-4bff-83df-2d6872cd3d30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c8cd8038ed0f9da93f2f9cea6323ed1d\" width=\"50%\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4102743%2Fcd6585e4-5fbd-4bff-83df-2d6872cd3d30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cb4bff4c4ba6ca3f36389696266c79bc 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4102743/cd6585e4-5fbd-4bff-83df-2d6872cd3d30.png\" loading=\"lazy\"></a>\n<p>\n    図3. カード検出の結果（赤枠は各カードに対応するテンプレートが一致した領域）\n</p>\n<hr data-sourcepos=\"491:1-492:0\">\n<h3 data-sourcepos=\"493:1-493:48\">\n<span id=\"手順3z検定による有意差の検証\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%863z%E6%A4%9C%E5%AE%9A%E3%81%AB%E3%82%88%E3%82%8B%E6%9C%89%E6%84%8F%E5%B7%AE%E3%81%AE%E6%A4%9C%E8%A8%BC\"><i class=\"fa fa-link\"></i></a>手順3：Z検定による有意差の検証</h3>\n<p data-sourcepos=\"494:1-494:141\">手順2で得られた集計結果をもとに、3つのロジックについて、Z検定を用いて有意差の有無を判定します。</p>\n<ul data-sourcepos=\"496:1-499:0\">\n<li data-sourcepos=\"496:1-496:138\">\n<code>perform_z_test(n, k, p0, alpha=0.05)</code>：試行回数<code>n</code>、成功回数<code>k</code>、仮説となる理論確率<code>p0</code>から両側Z検定を行う</li>\n<li data-sourcepos=\"497:1-497:78\">\n<code>main1()</code>：「たねポケを2枚引く確率」について検定を行う</li>\n<li data-sourcepos=\"498:1-499:0\">\n<code>main2()</code>：「ネッコアラのみを引く確率」について検定を行う</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"500:1-575:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">perform_z_test</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Z検定を行い結果を表示する</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">erf</span><span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">p_hat</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"n\">n</span>\n    <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">p0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">p0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">n</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p_hat</span> <span class=\"o\">-</span> <span class=\"n\">p0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">p_value</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"nf\">phi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nf\">phi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">p = </span><span class=\"si\">{</span><span class=\"n\">p0</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Z値 = </span><span class=\"si\">{</span><span class=\"n\">z</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">p値(両側) = </span><span class=\"si\">{</span><span class=\"n\">p_value</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">10</span><span class=\"o\">%</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">p_value</span> <span class=\"o\">&lt;</span> <span class=\"n\">alpha</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">有意差あり (H0を棄却)</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">有意差なし (H0を棄却できない)</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main1</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">検証1：たねポケを2枚引く確率</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># CSVを読み込み\n</span>    <span class=\"n\">csv_path</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./deck1/summary.csv</span><span class=\"sh\">\"</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 試行回数と成功回数を取得\n</span>    <span class=\"n\">n_trials</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"n\">k_success</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">tane</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"nf\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># たねポケが2枚出現した行数をカウント\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">n = </span><span class=\"si\">{</span><span class=\"n\">n_trials</span><span class=\"si\">}</span><span class=\"s\">, K = </span><span class=\"si\">{</span><span class=\"n\">k_success</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ロジックごとの理論確率を定義\n</span>    <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># ロジック1\n</span>    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>  <span class=\"c1\"># ロジック2\n</span>    <span class=\"n\">p3</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># ロジック3\n</span>\n    <span class=\"c1\"># 各ロジックに対して検定を実行\n</span>    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p0</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">([</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">]):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">ロジック</span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">perform_z_test</span><span class=\"p\">(</span><span class=\"n\">n_trials</span><span class=\"p\">,</span> <span class=\"n\">k_success</span><span class=\"p\">,</span> <span class=\"n\">p0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main2</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">検証2：ネッコアラのみを引く確率</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># CSVを読み込み\n</span>    <span class=\"n\">csv_path</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">./deck2/summary.csv</span><span class=\"sh\">\"</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Only_koara 列を追加（koaraが1枚、他が0枚のとき1、それ以外は0）\n</span>    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Only_koara</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">koara</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">koara</span><span class=\"sh\">\"</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nf\">all</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 試行回数と成功回数を取得\n</span>    <span class=\"n\">n_trials</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"n\">k_success</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Only_koara</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">sum</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">n = </span><span class=\"si\">{</span><span class=\"n\">n_trials</span><span class=\"si\">}</span><span class=\"s\">, K = </span><span class=\"si\">{</span><span class=\"n\">k_success</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ロジックごとの理論確率を定義\n</span>    <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>  <span class=\"c1\"># ロジック1\n</span>    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>  <span class=\"c1\"># ロジック2\n</span>    <span class=\"n\">p3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># ロジック3\n</span>\n    <span class=\"c1\"># 各ロジックに対して検定を実行\n</span>    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p0</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">([</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">]):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">ロジック</span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">perform_z_test</span><span class=\"p\">(</span><span class=\"n\">n_trials</span><span class=\"p\">,</span> <span class=\"n\">k_success</span><span class=\"p\">,</span> <span class=\"n\">p0</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">main1</span><span class=\"p\">()</span>\n    <span class=\"nf\">main2</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"577:1-577:16\">\n<span id=\"実行環境\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>実行環境</h3>\n<ul data-sourcepos=\"578:1-582:0\">\n<li data-sourcepos=\"578:1-578:39\">アプリ：Pokémon TCG Pocket 1.2.5</li>\n<li data-sourcepos=\"579:1-579:35\">エミュレータ：BlueStacks 5</li>\n<li data-sourcepos=\"580:1-580:17\">OS：Windows 11</li>\n<li data-sourcepos=\"581:1-582:0\">Python：3.10.12</li>\n</ul>\n<h3 data-sourcepos=\"583:1-583:16\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h3>\n<p data-sourcepos=\"584:1-585:132\">ここまで読んでいただきありがとうございました。<br>\nもしご意見やご指摘、改善点などございましたら、ぜひコメントで教えていただけると幸いです！</p>\n",
        "body": "## 背景\n\n『Pokémon Trading Card Game Pocket（ポケポケ）』では、ゲームの開始時に手札として5枚のカードが配られます。その際、手札には必ず「たねポケが1枚以上含まれる」ようになっています。しかし、実際にどのようなロジックでこの処理が行われているかはユーザーに公開されていません。[@Davoiさんの記事](https://qiita.com/Davoi/items/8e6393f6833c9492da4e)ではこの処理について以下の3つが考察されています。\n1. **初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く**\n2. **山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す**\n3. **山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**\n\nこれら3つのどれを採用していても、最初に「たねポケが1枚以上含まれる」という点は同じですが、「たねポケを2枚引く確率」や「ある特定のたねポケのみを引く確率」などはロジックごとに異なります。[@Davoiさんの記事](https://qiita.com/Davoi/items/8e6393f6833c9492da4e)では、これら3つのロジックについての検証が行われていましたが、試行回数がやや少なく、統計的有意性を判断するには不十分でした。\n\n\nそこで本記事では、**対戦操作を自動化**することで大量の対戦データを収集し、**Z検定による統計的な仮説検定**を通じて、**どのロジックが実際の挙動に最も近いか**を明らかにすることを目的とします。具体的には、ロジックごとに確率が異なる以下の2点を検証対象とします。\n\n- **検証1：たねポケを2枚引く確率**\n- **検証2：ネッコアラのみを引く確率**\n\n各検証にはそれぞれ1,000回の対戦データを収集し、分析を行いました。\n\n\n## 方法\n以下の手順に従って検証を行いました。各手順で用いたプログラムは記事末尾の「**使用したプログラム**」に掲載しています。\n1. 手順1：`pyautogui`により、2種類のデッキで各1,000回の対戦を自動実行\n2. 手順2：画像マッチングにより、スクリーンショットからカードの種類と枚数を自動で判定\n3. 手順3：Z検定により、集計結果と理論値に統計的な有意差があるかどうかを評価\n\n---\n\n## 検証1：たねポケを2枚引く確率\n### 使用したデッキ\nまず、[@Davoiさんの記事](https://qiita.com/Davoi/items/8e6393f6833c9492da4e)を参考に、たねポケが2枚のみのデッキを用いて、最初に「たねポケを2枚引く確率」について検証します。使用したデッキは以下の通りです。\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4102743/b0350d76-f149-4437-bf99-e10f29518d69.png\" width=50%>\n<p style=\"text-align: center; font-size: 0.9em; color: #666;\">\n    図1. 検証1で使用したデッキ（たねポケ2枚、その他18枚）\n</p>\n\n### 集計結果\n以下の表は、1,000回の対戦において、手札に含まれていた各カードの枚数別出現回数をまとめたものです。たねポケを2枚引いた回数は**62回**で、全体の<b>6.2%</b>となりました。\n\n| カード名 | 0枚 | 1枚 | 2枚 | 枚数期待値 |\n|---------|-----|-----|-----|---------|\n| コイキング | 0 | 938 | 62 | 1.062 |\n| きずぐすり | 604 | 352 | 44 | 0.440 |\n| スピーダー | 605 | 353 | 42 | 0.437 |\n| モンスターボール | 590 | 370 | 40 | 0.450 |\n| ハンドスコープ | 571 | 388 | 41 | 0.470 |\n| ポケモン図鑑 | 610 | 347 | 43 | 0.433 |\n| レッドカード | 644 | 325 | 31 | 0.387 |\n| 幻の石板 | 628 | 331 | 41 | 0.413 |\n| ポケモンの笛 | 593 | 365 | 42 | 0.449 |\n| 博士の研究 | 588 | 365 | 47 | 0.459 |\n\n\n### 理論値計算\n続いて、3つのロジックについて、「たねポケを2枚引く確率」を理論的に求めます。\n\n**ロジック1**\n<INS>**初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く**</INS>\nこの場合は、「山札20枚からたねポケ1枚を除き、残った19枚から4枚を引いた時にもう1枚のたねポケを引く確率」で考えることができます。このロジックの場合、「たねポケを2枚引く確率」は<b>21.1%</b>となります。\n\n```math\n\\begin{align}\np_1 &= \\frac{たねポケ2枚以外のカード3枚の組み合わせ}{カード4枚の組み合わせ} \\\\\n&= \\frac{_{18}C_3}{_{19}C_4} \\\\\n&= 0.21053\n\\end{align}\n```\n\n**ロジック2**\n<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す**</INS>\nこの場合は、「山札20枚から5枚引いてたねポケを1枚以上引いた場合に、たねポケを2枚とも引いている確率」で考えることができます。このロジックの場合、「たねポケを2枚引く確率」は<b>11.8%</b>となります。\n\n```math\n\\begin{align}\np_2 &= \\frac{たねポケ2枚以外のカード3枚の組み合わせ}{カード5枚中たねポケが1枚以上含まれる組み合わせ} \\\\\n&= \\frac{_{18}C_3}{_{20}C_5 - {}_{18}C_5} \\\\\n&= 0.11765\n\\end{align}\n```\n\n**ロジック3**\n<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**</INS>\nこの場合は、「山札20枚から5枚引いて、たねポケを2枚とも引いている確率」と考えることができます。このロジックの場合、「たねポケを2枚引く確率」は<b>5.26%</b>となります。\n\n```math\n\\begin{align}\np_3 &= \\frac{たねポケ2枚以外のカード3枚の組み合わせ}{カード5枚の組み合わせ} \\\\\n&= \\frac{_{18}C_3}{_{20}C_5} \\\\\n&= 0.05263\n\\end{align}\n```\n\n### 統計的検定\n\n集計結果と各ロジックによって導かれた理論値との間に、統計的に有意な差が存在するかを検定します。\n\nまず、1回の試行で「たねポケを2枚引く」確率を$p$とし、このとき成功（たねポケを2枚引く）を$1$、失敗（それ以外）を$0$とする確率変数$X \\in \\lbrace 0, 1 \\rbrace$を定義します。この試行を独立に$n$回繰り返すと、成功回数$K= \\sum_{j=1}^{n} X_j$は二項分布$Bin(n, p)$に従います。\nここで、$n$が十分大きい場合、二項分布はその期待値$\\mu=np$, 分散$\\sigma^2=np(1-p)$に基づいて正規分布に近似できます。つまり、$K$を標準正規分布に変換した統計量$z$は、\n```math\nz = \\frac{K - np}{\\sqrt{np(1-p)}}\n```\nと導出でき、この$z$は近似的に標準正規分布$N(0,1)$に従うと考えられます。\n\nここで、帰無仮説$H_0$を「たねポケを2枚引く確率が理論通り$p$である」とし、対立仮説を「たねポケを2枚引く確率が$p$ではない」と定義します。有意水準は$\\alpha=0.05$（両側検定）とし、計算された$z$に対応する$p$値が$\\alpha$より小さい場合は、$H_0$を棄却します。\n\n以下は、集計結果に基づいて検定を行った結果です。試行回数は$n = 1000$、成功回数は$K = 62$です。\n\n**ロジック1**\n理論値：$p = 0.21053$\n```math\nz = \\frac{62 - 210.53}{\\sqrt{210.53(1-0.21053)}} = -11.521\n```\nこのときの$p$値は$p \\approx 0.0000000\\\\%$となり、有意水準$\\alpha=5\\\\%$を大きく下回ります。よって、帰無仮説$H_0$は棄却され、**ロジック1は有意に異なると判断できます**。\n\n**ロジック2**\n理論値：$p = 0.11765$\n```math\nz = \\frac{62 - 117.65}{\\sqrt{117.65(1-0.11765)}} = -5.462\n```\nこのときの$p$値は$p \\approx 0.0000047\\\\%$となり、有意水準$\\alpha=5\\\\%$を大きく下回ります。よって、帰無仮説$H_0$は棄却され、**ロジック2は有意に異なると判断できます**。\n\n**ロジック3**\n理論値：$p = 0.05263$\n```math\nz = \\frac{62 - 52.63}{\\sqrt{52.63(1-0.05263)}} = 1.327\n```\nこのときの$p$値は$p \\approx 18.46\\\\%$となり、有意水準$\\alpha=5\\\\%$を十分に上回ります。よって、帰無仮説$H_0$は棄却されず、**ロジック3は理論値と集計結果の間に統計的有意差は見られません**。\n\n### 考察\n\n以上の結果から、**ロジック3のみが集計結果と統計的に矛盾しない**と判断されます。\nしたがって、「**初手で引く5枚に1枚以上たねポケが入る**」ときに使用されるロジックは、ロジック3の「<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**</INS>」であると統計的に裏付けられました。\n\n---\n\n## 検証2：ネッコアラのみを引く確率\n\n### 使用したデッキ\n次に、前シーズン（A3）にXで話題になった、ダークライギラティナデッキにネッコアラを1枚入れたとき、最初に「ネッコアラのみを引く確率」について検証します。使用したデッキは以下の通りです。\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4102743/bed2bcb1-01b3-47fb-9e46-23ba0de1e7d3.png\" width=50%>\n<p style=\"text-align: center; font-size: 0.9em; color: #666;\">\n    図2. 検証2で使用したデッキ（ネッコアラ1枚、ダークライ2枚、ギラティナ2枚、その他15枚）\n</p>\n\n### 集計結果\n以下の表は、1,000回の対戦において手札に含まれていたたねポケの組み合わせ別の出現回数をまとめたものです。ネッコアラのみを引いた回数は**128回**で、全体の<b>12.8%</b>となりました。\n\n| ネッコアラ | ダークライ | ギラティナ | 回数 |\n|-----------|-----------|-----------|------|\n|なし | 1枚以上 | なし | 294|\n|なし | なし | 1枚以上 | 285|\n|なし | 1枚以上 | 1枚以上 | 130|\n|1枚 | なし | なし | 128|\n|1枚 | 1枚以上 | なし | 72|\n|1枚 | なし | 1枚以上 | 68|\n|1枚 | 1枚以上 | 1枚以上 | 23|\n\n### 理論値計算\n\nそれぞれのロジックについて、「ネッコアラのみを引く確率」を理論的に求めます。\n\n**ロジック1**\n<INS>**初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く**</INS>\nこの場合は、「初めのたねポケとしてネッコアラを引き、残った19枚から4枚を引いた時にたねポケが含まれない確率」で考えることができます。このロジックの場合、「ネッコアラのみを引く確率」は<b>7.04%</b>となります。\n\n```math\n\\begin{align}\np_1 &= 初めにネッコアラを引く確率 \\times \\frac{カード4枚中たねポケが含まれない組み合わせ}{カード4枚の組み合わせ} \\\\\n&= \\frac{1}{5} \\times \\frac{_{15}C_4}{_{19}C_4} \\\\\n&= 0.07043\n\\end{align}\n```\n\n**ロジック2**\n<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す**</INS>\nこの場合は、「山札20枚から5枚引いてたねポケを1枚以上引いた場合に、ネッコアラのみを引いている確率」で考えることができます。このロジックの場合、「ネッコアラのみを引く確率」は<b>10.9%</b>となります。\n\n```math\n\\begin{align}\np_2 &= \\frac{カード4枚中たねポケが含まれない組み合わせ}{カード5枚中たねポケが1枚以上含まれる組み合わせ} \\\\\n&= \\frac{_{15}C_4}{_{20}C_5 - {}_{15}C_5} \\\\\n&= 0.10919\n\\end{align}\n```\n\n**ロジック3**\n<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**</INS>\nこの場合は、「山札20枚から5枚引いてネッコアラのみを引く確率と、たねポケが引けなかったときにネッコアラを引く確率を足したもの」と考えることができます。このロジックの場合、「ネッコアラのみを引く確率」は<b>12.7%</b>となります。\n\n```math\n\\begin{align}\np_3 &= \\frac{カード4枚中たねポケが含まれない組み合わせ}{カード5枚の組み合わせ} + \\frac{カード5枚中たねポケが含まれない組み合わせ}{カード5枚の組み合わせ} \\times 入れ替えるときにネッコアラを引く確率 \\\\\n&= \\frac{_{15}C_4}{_{20}C_5} + \\frac{_{15}C_5}{_{20}C_5} \\times\\frac{1}{5} \\\\\n&= 0.12678\n\\end{align}\n```\n\n### 統計的検定\n\n検証2についても、集計結果と理論値との間に統計的に有意な差が存在するかを検定します。\nここでは、1回の試行で「ネッコアラのみを引く」確率を$p$とし、このとき成功を$1$、失敗を$0$とする確率変数$X \\in \\lbrace 0, 1 \\rbrace$を定義します。この試行を独立に$n$回繰り返すと、成功回数$K= \\sum_{j=1}^{n} X_j$は二項分布$Bin(n, p)$に従います。$n$が十分大きい場合、統計量$z$は、\n```math\nz = \\frac{K - np}{\\sqrt{np(1-p)}}\n```\nと導出でき、標準正規分布$N(0,1)$に従う確率変数として扱うことができます。\n\n検証2では、帰無仮説$H_0$を「ネッコアラのみを引く確率が$p$である」、対立仮説を「ネッコアラのみを引く確率が$p$ではない」と定義し、有意水準$\\alpha=0.05$の両側検定を行います。計算された$z$に対応する$p$値が$\\alpha$より小さい場合は、$H_0$を棄却します。\n\n以下は、集計結果に基づいて検定を行った結果です。試行回数は$n = 1000$、成功回数は$K = 128$です。\n\n**ロジック1**\n理論値：$p = 0.07043$\n```math\nz = \\frac{128 - 70.43}{\\sqrt{70.43(1-0.07043)}} = 7.114\n```\nこのときの$p$値は$p \\approx 0.0000000\\\\%$となり、有意水準$\\alpha=5\\\\%$を大きく下回ります。よって、帰無仮説$H_0$は棄却され、**ロジック1は有意に異なると判断できます**。\n\n**ロジック2**\n理論値：$p = 0.10919$\n```math\nz = \\frac{128 - 109.19}{\\sqrt{109.19(1-0.10919)}} = 1.907\n```\nこのときの$p$値は$p \\approx 5.651\\\\%$となり、有意水準$\\alpha=5\\\\%$をわずかに上回ります。よって、帰無仮説$H_0$はぎりぎり棄却できない範囲に収まりますが、**ロジック2は有意差の境界上にあると評価できます**。\n\n**ロジック3**\n理論値：$p = 0.12678$\n```math\nz = \\frac{128 - 126.78}{\\sqrt{126.78(1-0.12678)}} = 0.116\n```\nこのときの$p$値は$p \\approx 90.77\\\\%$となり、有意水準$\\alpha=5\\\\%$を十分に上回ります。よって、帰無仮説$H_0$は棄却されず、**ロジック3は理論値と集計結果の間に統計的有意差は見られません**。\n\n\n### 考察\n\n以上の結果から、ロジック2とロジック3はいずれも統計的に有意差が見られず、帰無仮説は棄却されませんでした。しかし、検定結果の$p$値の大きさを踏まえると、**ロジック3のほうがより実際の挙動と近い**と判断できます。\nしたがって、2つの検証結果を総合的に踏まえると、「**初手で引く5枚に1枚以上たねポケが入る**」ときに使用されるロジックは、ロジック3の「<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**</INS>」と統計的に裏付けられました。\n\n---\n\n## まとめ\n\n本記事では、『Pokémon Trading Card Game Pocket（ポケポケ）』において、「**初手で引く5枚に1枚以上たねポケが入る**」という仕様について、実際にどのようなロジックが使われているのかを、**統計的な手法**（**Z検定**）を用いて検証しました。\n検証対象としたロジックは以下の3つです。\n\n1. **初めにたねポケの中から1枚引き、残り4枚をたねポケ含めた全ての山札から引く**\n2. **山札から5枚引き、その中にたねポケが含まれなかった場合、再度山札から5枚引き直す**\n3. **山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**\n\nこの3つのロジックについて、以下の2つの観点から実データ（各1,000回の試行）と理論値の比較を行いました。\n\n- **検証1：たねポケを2枚引く確率**\n- **検証2：ネッコアラのみを引く確率**\n\n両方の検証結果から共通してわかったことは、**ロジック3**の「<INS>**山札から5枚引き、その中にたねポケが含まれなかった場合、うち1枚をたねポケ1枚と入れ替える**</INS>」が最も近いということです。特に、検証1では、ロジック1、2が大きく乖離する一方で、ロジック3のみが理論値と非常に近い値を示しました。\n\nこの結果は、本家『Pokémon Trading Card Game（ポケカ）』で採用されているマリガン（ロジック2）とは異なる結果となりました。ポケポケでは、よりスムーズにゲームを開始できるような仕様になっていると言えます。\n\n\n---\n\n## 使用したプログラム\n\nそれぞれの手順で用いたプログラムを載せておきます。\n\n### 手順1：`pyautogui`による自動対戦\n`pyautogui`を用いてBlueStacks上の「ひとりで」モード対戦を自動化させ、2種類のデッキで1,000回ずつ、合計2,000回実行しました。1回の対戦に要する時間は約36秒であるため、約20時間にわたって実行を行いました。また、処理が正しく進んでいるかを確認するために、`OpenCV`の画像マッチングを用いて対戦画面の左下に表示されるメニューアイコン（三本線）が映っているかどうかを随時チェックしています。\n- `run_cycle()`：1回分の対戦を行い、終了までの一連の操作（デッキ選択・バトル開始・降参など）を自動で実行する\n- `check_image_similarity()`：スクリーンショット内にメニューアイコンが含まれているかをテンプレートマッチングで確認する\n- `main()`：これらの処理を1,000回繰り返して実行する\n\n```python\nimport pyautogui\nimport time\nimport glob\nimport os\nimport sys\nimport cv2\n\npyautogui.FAILSAFE = True  # 緊急停止用（マウスを左上に移動）\n\ndef run_cycle():\n    print('対戦デッキ選択')\n    pyautogui.click(942, 499)  # 対戦デッキ選択\n    time.sleep(4)\n\n    print('バトル開始')\n    pyautogui.click(942, 883)  # バトル開始\n    time.sleep(14)\n\n    print('スクリーンショット')\n    pyautogui.hotkey('ctrl', 'shift', 's')  # スクリーンショット\n    time.sleep(2)\n\n    print('メニュー')\n    pyautogui.click(705, 862)  # メニュー\n    time.sleep(1)\n\n    print('降参ボタン1回目')\n    pyautogui.click(904, 686)  # 降参ボタン1回目\n    time.sleep(1)\n\n    print('降参ボタン2回目')\n    pyautogui.click(942, 606)  # 降参ボタン2回目\n    time.sleep(8)\n\n    print('タップ')\n    pyautogui.click(942, 974)  # タップ\n    time.sleep(2)\n\n    print('次へ')\n    pyautogui.click(942, 974)  # 次へ\n    time.sleep(4)\n\n\ndef check_image_similarity():\n    image_pattern = \"./pictures/*\"\n    template_path = \"./templates/menu.png\"\n\n    # 名前が一番下の画像を取得\n    png_files = sorted(glob.glob(image_pattern))\n    if not png_files:\n        print(\"画像ファイルが見つかりませんでした。\")\n        return\n    \n    latest_image_path = png_files[-1]\n    filename = os.path.splitext(os.path.basename(latest_image_path))[0]\n    print(f\"比較対象画像: {filename}\")\n\n    # 画像を読み込み\n    img = cv2.imread(latest_image_path)\n    template = cv2.imread(template_path)\n    if img is None or template is None:\n        print(\"画像の読み込みに失敗しました。\")\n        return\n\n    # テンプレートマッチングを実行\n    result = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)\n    _, max_val, _, _ = cv2.minMaxLoc(result)\n    print(f\"テンプレートマッチスコア: {max_val:.3f}\")\n\n    # 閾値未満なら停止（類似度が低い）\n    if max_val <= 0.95:\n        print(\"テンプレートが画像にマッチしませんでした。自動操作を停止します。\")\n        sys.exit()\n\ndef main():\n    n = 1000  # 対戦回数\n    time.sleep(3)  # 開始までの猶予時間\n\n    for i in range(n):\n        print(f\"\\n--- {i + 1} 回目の実行 ---\")\n        run_cycle()  # 対戦実行\n        check_image_similarity()  # スクリーンショットにメニューの3本線があるか\n\n    print(f\"\\n{n}回の自動操作が完了しました。\")\n\nif __name__ == '__main__':\n    main()\n```\n---\n### 手順2：画像マッチングによるカード枚数判定\n当初はOCR（光学文字認識）によってスクリーンショットからカード名を読み取ろうとしましたが、文字認識の精度が足りませんでした。そこで、手順1と同様に、カードの左側の一部分をテンプレート画像として用意し、`OpenCV`の画像マッチングでスクリーンショット内に該当部分が何箇所あるかを検出する方法に切り替えました。\n- `suppress_close_matches(points, distance_thresh=10)`：画像マッチングによって得られた候補点`points`のうち、近すぎて重複しているものをまとめて１つにする\n- `process_images(image_pattern, templates, output_dir, anomaly_dir)`：スクリーンショットを読み込み、各テンプレートについて一致箇所を検出する。各カードの枚数が0～2枚の範囲に収まっている、かつカードの合計が5枚になっているかを確認し、問題なければ`output_dir`へ、異常があれば`anomaly_dir`へ検出結果を保存する。最後に全データをCSVに保存する\n- `main()`：ディレクトリを定義して実行する\n\n```python\nimport cv2\nimport numpy as np\nimport os\nimport glob\nimport csv\n\ndef suppress_close_matches(points, distance_thresh=10):\n    filtered = []\n    for pt in points:\n        if all(np.linalg.norm(np.array(pt) - np.array(other)) > distance_thresh for other in filtered):\n            filtered.append(pt)\n    return filtered\n\ndef process_images(image_pattern, templates, output_dir, anomaly_dir):\n    # 入力画像一覧\n    image_paths = glob.glob(image_pattern)\n    if not image_paths:\n        print(\"画像が見つかりませんでした。\")\n        return\n    print(f\"画像枚数: {len(image_paths)}\")\n\n    # 出力ディレクトリ\n    os.makedirs(output_dir, exist_ok=True)\n    os.makedirs(anomaly_dir, exist_ok=True)\n\n    # 全体結果を格納\n    all_results = []\n    template_names = list(templates.keys())\n\n    # 各画像の処理\n    for main_path in image_paths:\n        filename = os.path.splitext(os.path.basename(main_path))[0]\n        print(f\"\\n画像処理中: {filename}\")\n\n        # 入力画像を読み込み\n        main_img = cv2.imread(main_path)\n        if main_img is None:\n            print(f\"読み込み失敗: {main_path}\")\n            continue\n        main_color = main_img.copy()\n        counts = {}\n\n        # 各テンプレート画像で探索\n        for name, data in templates.items():\n            template_path = data[\"path\"]\n            threshold = data[\"threshold\"]\n\n            if not os.path.exists(template_path):\n                print(f\"{name}: テンプレートが見つかりません\")\n                counts[name] = 0\n                continue\n            \n            # テンプレート画像を読み込み\n            template = cv2.imread(template_path)\n            h, w = template.shape[:2]\n\n            # テンプレートマッチング実行\n            res = cv2.matchTemplate(main_color, template, cv2.TM_CCOEFF_NORMED)\n\n            # 指定された閾値以上の座標を抽出\n            loc = np.where(res >= threshold)\n            raw_points = list(zip(*loc[::-1]))\n\n            # 近すぎるマッチを除去\n            filtered_pts = suppress_close_matches(raw_points, distance_thresh=max(w, h) * 0.5)\n\n            # 有効な検出数を記録\n            count = len(filtered_pts)\n            counts[name] = count\n\n            # 検出箇所に赤い矩形を描画\n            for pt in filtered_pts:\n                cv2.rectangle(main_img, pt, (pt[0] + w, pt[1] + h), (0, 0, 255), 2)\n\n        # 合計数\n        total = sum(counts.values())\n\n        # 保存先フォルダに画像保存\n        card_counts_valid = all(0 <= v <= 2 for v in counts.values())  # 各カードの枚数が0〜2枚の範囲にあるか確認\n        if total == 5 and card_counts_valid:  # 合計枚数が5枚かを確認\n            save_dir = output_dir\n        else:\n            save_dir = anomaly_dir\n            summary_line = ', '.join([f\"{k}: {v}\" for k, v in counts.items()])\n            print(f\"バグ検出: {filename} | カード種類: {summary_line}, 合計: {total} 枚\")\n\n        result_img_path = os.path.join(save_dir, f\"{filename}_result.png\")\n        cv2.imwrite(result_img_path, main_img)\n\n        # 結果をall_resultsに追加\n        row = [filename] + [counts.get(name, 0) for name in template_names]\n        all_results.append(row)\n\n    # 最後にCSV出力\n    summary_path = os.path.join(output_dir, \"summary.csv\")\n    with open(summary_path, \"w\", newline=\"\", encoding=\"utf-8\") as f:\n        writer = csv.writer(f)\n        header = [\"name\"] + template_names\n        writer.writerow(header)\n        writer.writerows(all_results)\n\ndef main():\n    # テンプレート画像\n    templates = {\n        \"hoge\": {\"path\": \"./templates/hoge.png\", \"threshold\": 0.7},\n        \"fuga\": {\"path\": \"./templates/fuga.png\", \"threshold\": 0.8},\n    }\n    image_pattern = \"./pictures/*\"  # 手札画像\n    output_dir = \"./output\"  # 成功した画像を出力\n    anomaly_dir = \"./anomaly\"  # バグ検出した画像を出力\n    process_images(image_pattern, templates, output_dir, anomaly_dir)\n\nif __name__ == '__main__':\n    main()\n```\n\n以下は、画像マッチングによりカードを検出した結果です。テンプレートに一致した領域には赤枠が描画されています。\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4102743/cd6585e4-5fbd-4bff-83df-2d6872cd3d30.png\" width=50%>\n<p style=\"text-align: center; font-size: 0.9em; color: #666;\">\n    図3. カード検出の結果（赤枠は各カードに対応するテンプレートが一致した領域）\n</p>\n\n---\n\n### 手順3：Z検定による有意差の検証\n手順2で得られた集計結果をもとに、3つのロジックについて、Z検定を用いて有意差の有無を判定します。\n\n- `perform_z_test(n, k, p0, alpha=0.05)`：試行回数`n`、成功回数`k`、仮説となる理論確率`p0`から両側Z検定を行う\n- `main1()`：「たねポケを2枚引く確率」について検定を行う\n- `main2()`：「ネッコアラのみを引く確率」について検定を行う\n\n```python\nimport pandas as pd\nimport math\n\ndef perform_z_test(n, k, p0, alpha=0.05):\n    \"\"\"Z検定を行い結果を表示する\"\"\"\n    def phi(z):\n        return 0.5 * (1 + math.erf(z / math.sqrt(2)))\n\n    p_hat = k / n\n    var = p0 * (1 - p0) / n\n    z = (p_hat - p0) / math.sqrt(var)\n    \n    p_value = 2 * min(phi(z), 1 - phi(z))\n\n    print(f\"p = {p0:.5f}\")\n    print(f\"Z値 = {z:.3f}\")\n    print(f\"p値(両側) = {p_value:.10%}\")\n\n    if p_value < alpha:\n        print(f\"有意差あり (H0を棄却)\\n\")\n    else:\n        print(f\"有意差なし (H0を棄却できない)\\n\")\n\ndef main1():\n    \"\"\"検証1：たねポケを2枚引く確率\"\"\"\n\n    # CSVを読み込み\n    csv_path = \"./deck1/summary.csv\"\n    df = pd.read_csv(csv_path)\n\n    # 試行回数と成功回数を取得\n    n_trials = len(df)\n    k_success = (df[\"tane\"] == 2).sum()  # たねポケが2枚出現した行数をカウント\n    print(f\"n = {n_trials}, K = {k_success}\\n\")\n\n    # ロジックごとの理論確率を定義\n    p1 = math.comb(18, 3) / math.comb(19, 4)  # ロジック1\n    p2 = math.comb(18, 3) / (math.comb(20, 5) - math.comb(18, 5))  # ロジック2\n    p3 = math.comb(18, 3) / math.comb(20, 5)  # ロジック3\n\n    # 各ロジックに対して検定を実行\n    for i, p0 in enumerate([p1, p2, p3]):\n        print(f\"ロジック{i + 1}\")\n        perform_z_test(n_trials, k_success, p0)\n\n\ndef main2():\n    \"\"\"検証2：ネッコアラのみを引く確率\"\"\"\n\n    # CSVを読み込み\n    csv_path = \"./deck2/summary.csv\"\n    df = pd.read_csv(csv_path)\n\n    # Only_koara 列を追加（koaraが1枚、他が0枚のとき1、それ以外は0）\n    df[\"Only_koara\"] = ((df[\"koara\"] == 1) & (df.drop(columns=[\"name\", \"koara\"]) == 0).all(axis=1)).astype(int)\n\n    # 試行回数と成功回数を取得\n    n_trials = len(df)\n    k_success = df[\"Only_koara\"].sum()\n    print(f\"n = {n_trials}, K = {k_success}\\n\")\n\n    # ロジックごとの理論確率を定義\n    p1 = (1 / 5) * (math.comb(15, 4) / math.comb(19, 4))  # ロジック1\n    p2 = math.comb(15, 4) / (math.comb(20, 5) - math.comb(15, 5))  # ロジック2\n    p3 = (math.comb(15, 4) / math.comb(20, 5)) + (math.comb(15, 5) / math.comb(20, 5)) * (1 / 5)  # ロジック3\n\n    # 各ロジックに対して検定を実行\n    for i, p0 in enumerate([p1, p2, p3]):\n        print(f\"ロジック{i + 1}\")\n        perform_z_test(n_trials, k_success, p0)\n\nif __name__ == '__main__':\n    main1()\n    main2()\n```\n\n### 実行環境\n- アプリ：Pokémon TCG Pocket 1.2.5\n- エミュレータ：BlueStacks 5\n- OS：Windows 11\n- Python：3.10.12\n\n### おわりに\nここまで読んでいただきありがとうございました。\nもしご意見やご指摘、改善点などございましたら、ぜひコメントで教えていただけると幸いです！\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-06-02T09:21:15+09:00",
        "group": null,
        "id": "a4d3b09d1b369c123e85",
        "likes_count": 1,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "自動化",
            "versions": []
          },
          {
            "name": "統計学",
            "versions": []
          },
          {
            "name": "確率",
            "versions": []
          },
          {
            "name": "ポケモン",
            "versions": []
          }
        ],
        "title": "【ポケポケ】初期手札の「たねポケが1枚以上含まれる」ロジックを「統計的仮説検定」で徹底検証！",
        "updated_at": "2025-06-03T02:56:18+09:00",
        "url": "https://qiita.com/machapin/items/a4d3b09d1b369c123e85",
        "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 2,
          "followers_count": 0,
          "github_login_name": null,
          "id": "machapin",
          "items_count": 1,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 4102743,
          "profile_image_url": "https://lh3.googleusercontent.com/a/ACg8ocJhCVfCqOGd2eU2odIlVH1YuH0G72vQvq9iKe2GaISllo0b59w=s96-c",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7392488718032837,
        "quality_score": 20,
        "python_code_score": 7,
        "python_code_blocks": 3
      },
      {
        "rendered_body": "<p data-sourcepos=\"1:1-1:269\">OCR（Optical Character Recognition）というのは、手書きや印刷された文字を読み取り、デジタルデータに変換する技術です。スキャナーや、スマホアプリなどで使ってみた経験がある方も多いかと思います。</p>\n<p data-sourcepos=\"3:1-3:246\">OCRはさまざまな場面で利用されていますが、たとえば既存の紙データのデジタル化であったり、ビジネス上やり取りされる帳票を使ったシステムの自動処理などで活用されています。</p>\n<p data-sourcepos=\"5:1-5:203\"><a href=\"https://github.com/kotaro-kinoshita/yomitoku\" rel=\"nofollow noopener\" target=\"_blank\">YomiToku</a>もそんなOCRソフトウェアの一つです。日本語に特化しており、複雑な表組みなども読み取れるのが特徴です。</p>\n<p data-sourcepos=\"7:1-7:62\">今回は、YomiTokuの簡単な使い方を紹介します。</p>\n<h2 data-sourcepos=\"9:1-9:20\">\n<span id=\"yomitokuの特徴\" class=\"fragment\"></span><a href=\"#yomitoku%E3%81%AE%E7%89%B9%E5%BE%B4\"><i class=\"fa fa-link\"></i></a>YomiTokuの特徴</h2>\n<p data-sourcepos=\"11:1-11:47\">YomiTokuの特徴は、以下の通りです。</p>\n<h3 data-sourcepos=\"13:1-13:15\">\n<span id=\"aiを活用\" class=\"fragment\"></span><a href=\"#ai%E3%82%92%E6%B4%BB%E7%94%A8\"><i class=\"fa fa-link\"></i></a>AIを活用</h3>\n<p data-sourcepos=\"15:1-15:74\">YomiTokuでは、以下の4種類のAIモデルを搭載しています。</p>\n<ul data-sourcepos=\"17:1-21:0\">\n<li data-sourcepos=\"17:1-17:23\">文字位置の検知</li>\n<li data-sourcepos=\"18:1-18:17\">文字列認識</li>\n<li data-sourcepos=\"19:1-19:23\">レイアウト解析</li>\n<li data-sourcepos=\"20:1-21:0\">表の構造認識</li>\n</ul>\n<p data-sourcepos=\"22:1-22:66\">いずれも日本語データセットで学習しています。</p>\n<h3 data-sourcepos=\"24:1-24:31\">\n<span id=\"日本語英語に対応\" class=\"fragment\"></span><a href=\"#%E6%97%A5%E6%9C%AC%E8%AA%9E%E8%8B%B1%E8%AA%9E%E3%81%AB%E5%AF%BE%E5%BF%9C\"><i class=\"fa fa-link\"></i></a>日本語、英語に対応</h3>\n<p data-sourcepos=\"26:1-26:245\">日本語の文書画像に特化して学習しており、日本の商習慣で使われる複雑な表であったり、縦書き文書にも対応しています。7,000文字を超える大規模な日本語文書でも利用できます。</p>\n<h3 data-sourcepos=\"28:1-28:46\">\n<span id=\"レイアウト解析表の構造認識\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E8%A7%A3%E6%9E%90%E8%A1%A8%E3%81%AE%E6%A7%8B%E9%80%A0%E8%AA%8D%E8%AD%98\"><i class=\"fa fa-link\"></i></a>レイアウト解析・表の構造認識</h3>\n<p data-sourcepos=\"30:1-30:168\">段組や、帳票や書面の中で使われている表の構造認識ができ、レイアウトの意味的構造を正しく認識、情報を抜き出します。</p>\n<h3 data-sourcepos=\"32:1-32:37\">\n<span id=\"多様な出力フォーマット\" class=\"fragment\"></span><a href=\"#%E5%A4%9A%E6%A7%98%E3%81%AA%E5%87%BA%E5%8A%9B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>多様な出力フォーマット</h3>\n<p data-sourcepos=\"34:1-34:64\">出力は以下の4フォーマットに対応しています。</p>\n<ul data-sourcepos=\"36:1-40:0\">\n<li data-sourcepos=\"36:1-36:10\">Markdown</li>\n<li data-sourcepos=\"37:1-37:6\">JSON</li>\n<li data-sourcepos=\"38:1-38:6\">HTML</li>\n<li data-sourcepos=\"39:1-40:0\">CSV</li>\n</ul>\n<p data-sourcepos=\"41:1-41:174\">システム連携も容易なJSON、見やすいMarkdown、表計算ソフトでの利用に便利なCSVなど、用途に合わせて使い分けることができます。</p>\n<h3 data-sourcepos=\"43:1-43:22\">\n<span id=\"セキュリティ\" class=\"fragment\"></span><a href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3\"><i class=\"fa fa-link\"></i></a>セキュリティ</h3>\n<p data-sourcepos=\"45:1-45:186\">クラウドサービスではないので、自社サーバー内に閉じた環境下で解析できます。請求データなど、機密情報を取り扱う上でも安心です。</p>\n<h3 data-sourcepos=\"47:1-47:13\">\n<span id=\"gpu利用\" class=\"fragment\"></span><a href=\"#gpu%E5%88%A9%E7%94%A8\"><i class=\"fa fa-link\"></i></a>GPU利用</h3>\n<p data-sourcepos=\"49:1-49:142\">GPU環境下で高速に動作します。VRAMは8GB以内で動作しますので、ハイエンドなGPUでなくても利用できます。</p>\n<h2 data-sourcepos=\"51:1-51:23\">\n<span id=\"yomitokuの使い方\" class=\"fragment\"></span><a href=\"#yomitoku%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>YomiTokuの使い方</h2>\n<p data-sourcepos=\"53:1-53:51\">YomiTokuは <code>pip</code> でインストールします。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"55:1-57:3\"><div class=\"highlight\"><pre><code>pip <span class=\"nb\">install </span>yomitoku\n</code></pre></div></div>\n<p data-sourcepos=\"59:1-59:93\">ONNX Runtimeの実行にGPUを利用する場合は、以下のコマンドになります。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"61:1-63:3\"><div class=\"highlight\"><pre><code>pip <span class=\"nb\">install </span>yomitoku[gpu]\n</code></pre></div></div>\n<h3 data-sourcepos=\"65:1-65:13\">\n<span id=\"注意点\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\"><i class=\"fa fa-link\"></i></a>注意点</h3>\n<p data-sourcepos=\"67:1-67:324\">pytorchはCUDAのバージョンに合わせて選択してください。デフォルトではCUDA12.4以上を想定してインストールされます。また、pytorch自身は2.5以上のバージョンが必要です。<a href=\"https://github.com/kotaro-kinoshita/yomitoku/blob/main/dockerfile\" rel=\"nofollow noopener\" target=\"_blank\">Dockerfile</a>もあります。</p>\n<h3 data-sourcepos=\"69:1-69:31\">\n<span id=\"解析対象を用意する\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%9E%90%E5%AF%BE%E8%B1%A1%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>解析対象を用意する</h3>\n<p data-sourcepos=\"71:1-71:308\">解析対象になる画像ファイルを用意します。今回は例として、<a href=\"https://template.the-board.jp/invoice_templates/article/invoice_template_001/\" rel=\"nofollow noopener\" target=\"_blank\">請求書エクセルテンプレート(無料)_タテ型_001</a>よりダウンロードした請求書を使わせてもらっています。</p>\n<p data-sourcepos=\"73:1-73:125\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F239909f4-a2a3-443a-94cb-e231ac73d5cb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ffa68feb1738d8ebfbb6131d4a29b9af\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F239909f4-a2a3-443a-94cb-e231ac73d5cb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ffa68feb1738d8ebfbb6131d4a29b9af\" alt=\"invoice.jpg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F239909f4-a2a3-443a-94cb-e231ac73d5cb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0067d953d3743973c7bd1cda773c5824 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/239909f4-a2a3-443a-94cb-e231ac73d5cb.jpeg\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"76:1-76:267\">請求書のテンプレートをダウンロードしたら、PDFファイルに変換しています。YomiTokuでは、PDFや画像ファイルを解析対象として利用できます。そのファイルを <code>images</code> ディレクトリに格納しています。</p>\n<h3 data-sourcepos=\"78:1-78:25\">\n<span id=\"解析を実行する\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%9E%90%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>解析を実行する</h3>\n<p data-sourcepos=\"80:1-80:51\">以下のコマンドで解析を実行します。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"82:1-91:3\"><div class=\"highlight\"><pre><code><span class=\"c\"># HTMLファイルを出力</span>\nyomitoku ./images <span class=\"nt\">-f</span> html\n<span class=\"c\"># JSONファイルを出力</span>\nyomitoku ./images <span class=\"nt\">-f</span> json\n<span class=\"c\"># Markdownファイルを出力</span>\nyomitoku ./images <span class=\"nt\">-f</span> md\n<span class=\"c\"># CSVファイルを出力</span>\nyomitoku ./images <span class=\"nt\">-f</span> csv\n</code></pre></div></div>\n<p data-sourcepos=\"93:1-93:138\">コマンドを実行すると、最初にモデルをダウンロードします。これは自動的に行われ、初回のみです。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"95:1-100:3\"><div class=\"highlight\"><pre><code>model.safetensors: 100% 102M/102M <span class=\"o\">[</span>00:02&lt;00:00, 42.4MB/s]\nmodel.safetensors: 100% 200M/200M <span class=\"o\">[</span>00:04&lt;00:00, 42.7MB/s]\nmodel.safetensors: 100% 172M/172M <span class=\"o\">[</span>00:04&lt;00:00, 37.0MB/s]\nmodel.safetensors: 100% 172M/172M <span class=\"o\">[</span>00:04&lt;00:00, 41.2MB/s]\n</code></pre></div></div>\n<p data-sourcepos=\"102:1-102:176\">そして解析を実行し、 <code>results</code> ディレクトリに結果が出力されます。出力先フォルダは変更可能で、なければ自動で作成されます。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"104:1-106:3\"><div class=\"highlight\"><pre><code>yomitoku.cli.main - INFO - Total Processing <span class=\"nb\">time</span>: 4.81 sec\n</code></pre></div></div>\n<h3 data-sourcepos=\"108:1-108:28\">\n<span id=\"実行時間について\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>実行時間について</h3>\n<p data-sourcepos=\"110:1-110:233\">実行時間はGPUによって異なりますが、 Google ColabのA100で実行した場合は2.5〜3.5秒程度でした。T4 GPUなどにしても高速になる訳ではないので、低価格帯のGPUで問題ありません。</p>\n<h2 data-sourcepos=\"112:1-112:15\">\n<span id=\"実行結果\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>実行結果</h2>\n<p data-sourcepos=\"114:1-114:21\">実行結果です。</p>\n<h3 data-sourcepos=\"116:1-116:29\">\n<span id=\"htmlファイルの場合\" class=\"fragment\"></span><a href=\"#html%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>HTMLファイルの場合</h3>\n<p data-sourcepos=\"118:1-118:64\">HTMLでは、表部分が <code>table</code> タグで出力されます。</p>\n<p data-sourcepos=\"120:1-120:164\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2Fd7105f76-200c-4f9c-8af4-2b655446be9c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=850911c8f8cc5480728cbcf7424958db\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2Fd7105f76-200c-4f9c-8af4-2b655446be9c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=850911c8f8cc5480728cbcf7424958db\" alt=\"スクリーンショット 2025-02-15 16.13.12.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2Fd7105f76-200c-4f9c-8af4-2b655446be9c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5b617fda26371bdefa9c1626680aa6d0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/d7105f76-200c-4f9c-8af4-2b655446be9c.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"html\" data-sourcepos=\"122:1-153:3\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;p/&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>サンプル株式会社 御中<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>下記のとおり、御請求申し上げます。<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;p/&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>請 求 書<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;--</span> <span class=\"na\">略</span>  <span class=\"na\">--</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;table</span> <span class=\"na\">border=</span><span class=\"s\">\"1\"</span> <span class=\"na\">style=</span><span class=\"s\">\"border-collapse: collapse\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;tr&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>摘要<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>数量<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>単位<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>単価<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>税率<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>金額<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;/tr&gt;</span>\n      <span class=\"nt\">&lt;tr&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>サンプル1<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>式<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>10,000<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>10%<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;td</span> <span class=\"na\">rowspan=</span><span class=\"s\">\"1\"</span> <span class=\"na\">colspan=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>10,000<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;/tr&gt;</span>\n      <span class=\"c\">&lt;!-- 以下略 --&gt;</span>\n    <span class=\"nt\">&lt;/table&gt;</span>\n    <span class=\"c\">&lt;!-- 以下略 --&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"155:1-155:29\">\n<span id=\"jsonファイルの場合\" class=\"fragment\"></span><a href=\"#json%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>JSONファイルの場合</h3>\n<p data-sourcepos=\"157:1-157:224\">JSONファイルの場合です。表になっている部分は <code>table</code> キー以下にあるので、システム連携する際にはこの部分を利用します。 <code>box</code> は認識された座標を示しています。</p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"159:1-216:3\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"figures\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">\n    </span><span class=\"nl\">\"paragraphs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"box\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"mi\">197</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"mi\">490</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"mi\">1043</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"mi\">581</span><span class=\"w\">\n            </span><span class=\"p\">],</span><span class=\"w\">\n            </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"サンプル株式会社 御中\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"direction\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"horizontal\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"order\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"role\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"section_headings\"</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">略</span><span class=\"w\">\n    </span><span class=\"p\">],</span><span class=\"w\">\n    </span><span class=\"nl\">\"tables\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"box\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"mi\">182</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"mi\">830</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"mi\">1369</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"mi\">1206</span><span class=\"w\">\n            </span><span class=\"p\">],</span><span class=\"w\">\n            </span><span class=\"nl\">\"cells\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"box\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                        </span><span class=\"mi\">185</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"mi\">834</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"mi\">523</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"mi\">926</span><span class=\"w\">\n                    </span><span class=\"p\">],</span><span class=\"w\">\n                    </span><span class=\"nl\">\"col\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"col_span\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"件名\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"row\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"row_span\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">\n                </span><span class=\"p\">},</span><span class=\"w\">\n                </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"box\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                        </span><span class=\"mi\">523</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"mi\">831</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"mi\">1368</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"mi\">926</span><span class=\"w\">\n                    </span><span class=\"p\">],</span><span class=\"w\">\n                    </span><span class=\"nl\">\"col\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"col_span\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"サンプルプロジェクト\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"row\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"row_span\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">\n                </span><span class=\"p\">},</span><span class=\"w\">\n                </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">以下略</span><span class=\"w\">\n            </span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n</span><span class=\"err\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<h3 data-sourcepos=\"218:1-218:21\">\n<span id=\"markdownの場合\" class=\"fragment\"></span><a href=\"#markdown%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>Markdownの場合</h3>\n<p data-sourcepos=\"220:1-220:88\">Markdownの場合、表の部分はMarkdownのテーブル形式で出力されます。</p>\n<div class=\"code-frame\" data-lang=\"markdown\" data-sourcepos=\"222:1-248:3\"><div class=\"highlight\"><pre><code><span class=\"gh\"># サンプル株式会社 御中</span>\n\n下記のとおり、御請求申し上げます。\n\n<span class=\"gh\"># 請 求 書</span>\n\n|件名|サンプルプロジェクト|\n|-|-|\n|支払期限|2022/5/31|\n|振込先|サンプル銀行 本店 普通 1111111<span class=\"nt\">&lt;br&gt;</span>サンプル<span class=\"se\">\\(</span>カ|\n\n合計\n\n140,600 円<span class=\"se\">\\(</span>税込<span class=\"se\">\\)</span>\n\n|No<span class=\"se\">\\.</span>|1001|\n|-|-|\n|請求日|2022/4/30|\n\nサンプル株式会社<span class=\"nt\">&lt;br&gt;</span>〒100<span class=\"se\">\\-</span>0001<span class=\"nt\">&lt;br&gt;</span>東京都千代田区千代田1<span class=\"se\">\\-</span>1<span class=\"se\">\\-</span>1<span class=\"nt\">&lt;br&gt;</span>サンプルビル3階<span class=\"nt\">&lt;br&gt;</span>TEL : 03<span class=\"se\">\\-</span>0000<span class=\"se\">\\-</span>0000<span class=\"nt\">&lt;br&gt;</span>担当:サンプル太郎<span class=\"nt\">&lt;br&gt;</span>登録番号:T1234567890123\n\n|摘要|数量|単位|単価|税率|金額|\n|-|-|-|-|-|-|\n|サンプル1|1|式|10,000|10%|10,000|\n: 以下略\n</code></pre></div></div>\n<h3 data-sourcepos=\"250:1-250:16\">\n<span id=\"csvの場合\" class=\"fragment\"></span><a href=\"#csv%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>CSVの場合</h3>\n<p data-sourcepos=\"252:1-252:176\">CSVの場合、表の部分はCSV形式で出力されます。Excelなどで開いた際にも、レイアウトが維持されているので確認しやすいはずです。</p>\n<div class=\"code-frame\" data-lang=\"csv\" data-sourcepos=\"254:1-261:3\"><div class=\"highlight\"><pre><code>サンプル株式会社 御中\n  : 省略\n登録番号:T1234567890123\"\n\"\"\n摘要,数量,単位,単価,税率,金額\nサンプル1,1,式,\"10,000\",10%,\"10,000\"\n</code></pre></div></div>\n<p data-sourcepos=\"263:1-263:164\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2Faee31624-8c4f-4f7a-a292-f99cdaa24fb2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=235e6b15eba7a6ef50fb4113f2008966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2Faee31624-8c4f-4f7a-a292-f99cdaa24fb2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=235e6b15eba7a6ef50fb4113f2008966\" alt=\"スクリーンショット 2025-02-15 16.14.05.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2Faee31624-8c4f-4f7a-a292-f99cdaa24fb2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cac274e020c672fdee3261a02625343c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/aee31624-8c4f-4f7a-a292-f99cdaa24fb2.png\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"266:1-266:33\">\n<span id=\"解析内容を可視化する\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%9E%90%E5%86%85%E5%AE%B9%E3%82%92%E5%8F%AF%E8%A6%96%E5%8C%96%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>解析内容を可視化する</h2>\n<p data-sourcepos=\"268:1-268:108\">コマンドオプション <code>-v</code> を付けると、解析結果を可視化した画像を出力します。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"270:1-272:3\"><div class=\"highlight\"><pre><code>yomitoku ./images <span class=\"nt\">-f</span> html <span class=\"nt\">-v</span>\n</code></pre></div></div>\n<p data-sourcepos=\"274:1-274:221\">認識された箇所をボックスで囲み、その認識された文字列も合わせて出力されるので、YomiTokuがどういった箇所をどう認識しているのかを確認することができます。</p>\n<p data-sourcepos=\"276:1-276:133\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F18fbe992-745d-4d31-a6ea-2dd69e55d948.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=545026124809da61e5602bc6ec117503\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F18fbe992-745d-4d31-a6ea-2dd69e55d948.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=545026124809da61e5602bc6ec117503\" alt=\"_invoice_p1_ocr.jpg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F18fbe992-745d-4d31-a6ea-2dd69e55d948.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4a88c05a2c6cc3f1f3c50d9260fbcce2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/18fbe992-745d-4d31-a6ea-2dd69e55d948.jpeg\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"278:1-278:12\">\n<span id=\"注意点-1\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9-1\"><i class=\"fa fa-link\"></i></a>注意点</h2>\n<h3 data-sourcepos=\"280:1-280:31\">\n<span id=\"cpuでの利用について\" class=\"fragment\"></span><a href=\"#cpu%E3%81%A7%E3%81%AE%E5%88%A9%E7%94%A8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>CPUでの利用について</h3>\n<p data-sourcepos=\"282:1-282:170\">YomiTokuはGPUでの利用を推奨していますが、CPU環境下でも実行は可能です。ただし、解析には数分かかるので注意してください。</p>\n<h3 data-sourcepos=\"284:1-284:31\">\n<span id=\"手書き文字について\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E6%9B%B8%E3%81%8D%E6%96%87%E5%AD%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>手書き文字について</h3>\n<p data-sourcepos=\"286:1-288:143\"><del>2025年2月現在のYomiTokuでは、活字のみサポートしています。手書き文字については、公式にはサポートしておりません。また、看板など紙以外にプリントされた情景OCRについては、最適化されていません。</del><br>\nYomiTokuのv0.8.1から手書き文字認識がサポートされました。例えば、ホワイトボードの文字を下記のように読み取ることができました。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F59402cc5-c28a-448a-bf92-18c8dc3b6851.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e0208daa55d00f4eb60f4f3883b36bc4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F59402cc5-c28a-448a-bf92-18c8dc3b6851.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e0208daa55d00f4eb60f4f3883b36bc4\" alt=\"inputs_white-board_p1_ocr.jpg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F4009607%2F59402cc5-c28a-448a-bf92-18c8dc3b6851.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8c1a57ceb5ebdb8ccfac7ffb3d608ad5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/59402cc5-c28a-448a-bf92-18c8dc3b6851.jpeg\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"290:1-290:31\">\n<span id=\"画像サイズについて\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>画像サイズについて</h3>\n<p data-sourcepos=\"292:1-292:137\">低解像度画像では識別精度が低下します。画像の短辺を720px以上の画像で解析することを推奨します。</p>\n<h2 data-sourcepos=\"294:1-294:18\">\n<span id=\"ライセンス\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9\"><i class=\"fa fa-link\"></i></a>ライセンス</h2>\n<p data-sourcepos=\"296:1-296:266\">YomiTokuは、非商用での個人利用、研究目的での利用は自由に利用可能ですが、商用目的での利用に関しては、別途、商用ライセンスが必要で、<a href=\"https://relic.co.jp/services/yomitoku/\" rel=\"nofollow noopener\" target=\"_blank\">問い合わせ</a>が必要です。</p>\n<h2 data-sourcepos=\"298:1-298:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<p data-sourcepos=\"300:1-300:202\">YomiTokuを使えば、これまでは難しかった帳票や、複雑なレイアウトの文書もデジタル化できます。既存資産のDX化や、業務効率化に役立ててください。</p>\n<ul data-sourcepos=\"302:1-303:80\">\n<li data-sourcepos=\"302:1-302:67\"><a href=\"https://github.com/kotaro-kinoshita/yomitoku\" rel=\"nofollow noopener\" target=\"_blank\">YomiToku - GitHub</a></li>\n<li data-sourcepos=\"303:1-303:80\"><a href=\"https://relic.co.jp/services/yomitoku/\" rel=\"nofollow noopener\" target=\"_blank\">商用ライセンス問い合わせ</a></li>\n</ul>\n",
        "body": "OCR（Optical Character Recognition）というのは、手書きや印刷された文字を読み取り、デジタルデータに変換する技術です。スキャナーや、スマホアプリなどで使ってみた経験がある方も多いかと思います。\n\nOCRはさまざまな場面で利用されていますが、たとえば既存の紙データのデジタル化であったり、ビジネス上やり取りされる帳票を使ったシステムの自動処理などで活用されています。\n\n[YomiToku](https://github.com/kotaro-kinoshita/yomitoku)もそんなOCRソフトウェアの一つです。日本語に特化しており、複雑な表組みなども読み取れるのが特徴です。\n\n今回は、YomiTokuの簡単な使い方を紹介します。\n\n## YomiTokuの特徴\n\nYomiTokuの特徴は、以下の通りです。\n\n### AIを活用\n\nYomiTokuでは、以下の4種類のAIモデルを搭載しています。\n\n- 文字位置の検知\n- 文字列認識\n- レイアウト解析\n- 表の構造認識\n\nいずれも日本語データセットで学習しています。\n\n### 日本語、英語に対応\n\n日本語の文書画像に特化して学習しており、日本の商習慣で使われる複雑な表であったり、縦書き文書にも対応しています。7,000文字を超える大規模な日本語文書でも利用できます。\n\n### レイアウト解析・表の構造認識\n\n段組や、帳票や書面の中で使われている表の構造認識ができ、レイアウトの意味的構造を正しく認識、情報を抜き出します。\n\n### 多様な出力フォーマット\n\n出力は以下の4フォーマットに対応しています。\n\n- Markdown\n- JSON\n- HTML\n- CSV\n\nシステム連携も容易なJSON、見やすいMarkdown、表計算ソフトでの利用に便利なCSVなど、用途に合わせて使い分けることができます。\n\n### セキュリティ\n\nクラウドサービスではないので、自社サーバー内に閉じた環境下で解析できます。請求データなど、機密情報を取り扱う上でも安心です。\n\n### GPU利用\n\nGPU環境下で高速に動作します。VRAMは8GB以内で動作しますので、ハイエンドなGPUでなくても利用できます。\n\n## YomiTokuの使い方\n\nYomiTokuは `pip` でインストールします。\n\n```bash\npip install yomitoku\n```\n\nONNX Runtimeの実行にGPUを利用する場合は、以下のコマンドになります。\n\n```bash\npip install yomitoku[gpu]\n```\n\n### 注意点\n\npytorchはCUDAのバージョンに合わせて選択してください。デフォルトではCUDA12.4以上を想定してインストールされます。また、pytorch自身は2.5以上のバージョンが必要です。[Dockerfile](https://github.com/kotaro-kinoshita/yomitoku/blob/main/dockerfile)もあります。\n\n### 解析対象を用意する\n\n解析対象になる画像ファイルを用意します。今回は例として、[請求書エクセルテンプレート\\(無料\\)\\_タテ型\\_001](https://template.the-board.jp/invoice_templates/article/invoice_template_001/)よりダウンロードした請求書を使わせてもらっています。\n\n![invoice.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/239909f4-a2a3-443a-94cb-e231ac73d5cb.jpeg)\n\n\n請求書のテンプレートをダウンロードしたら、PDFファイルに変換しています。YomiTokuでは、PDFや画像ファイルを解析対象として利用できます。そのファイルを `images` ディレクトリに格納しています。\n\n### 解析を実行する\n\n以下のコマンドで解析を実行します。\n\n```bash\n# HTMLファイルを出力\nyomitoku ./images -f html\n# JSONファイルを出力\nyomitoku ./images -f json\n# Markdownファイルを出力\nyomitoku ./images -f md\n# CSVファイルを出力\nyomitoku ./images -f csv\n```\n\nコマンドを実行すると、最初にモデルをダウンロードします。これは自動的に行われ、初回のみです。\n\n```bash\nmodel.safetensors: 100% 102M/102M [00:02<00:00, 42.4MB/s]\nmodel.safetensors: 100% 200M/200M [00:04<00:00, 42.7MB/s]\nmodel.safetensors: 100% 172M/172M [00:04<00:00, 37.0MB/s]\nmodel.safetensors: 100% 172M/172M [00:04<00:00, 41.2MB/s]\n```\n\nそして解析を実行し、 `results` ディレクトリに結果が出力されます。出力先フォルダは変更可能で、なければ自動で作成されます。\n\n```bash\nyomitoku.cli.main - INFO - Total Processing time: 4.81 sec\n```\n\n### 実行時間について\n\n実行時間はGPUによって異なりますが、 Google ColabのA100で実行した場合は2.5〜3.5秒程度でした。T4 GPUなどにしても高速になる訳ではないので、低価格帯のGPUで問題ありません。\n\n## 実行結果\n\n実行結果です。\n\n### HTMLファイルの場合\n\nHTMLでは、表部分が `table` タグで出力されます。\n\n![スクリーンショット 2025-02-15 16.13.12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/d7105f76-200c-4f9c-8af4-2b655446be9c.png)\n\n```html\n<html>\n  <body>\n    <p/>\n    <h1>サンプル株式会社 御中</h1>\n    <p>下記のとおり、御請求申し上げます。</p>\n    <p/>\n    <h1>請 求 書</h1>\n    <-- 略  -->\n    <table border=\"1\" style=\"border-collapse: collapse\">\n      <tr>\n        <td rowspan=\"1\" colspan=\"1\">摘要</td>\n        <td rowspan=\"1\" colspan=\"1\">数量</td>\n        <td rowspan=\"1\" colspan=\"1\">単位</td>\n        <td rowspan=\"1\" colspan=\"1\">単価</td>\n        <td rowspan=\"1\" colspan=\"1\">税率</td>\n        <td rowspan=\"1\" colspan=\"1\">金額</td>\n      </tr>\n      <tr>\n        <td rowspan=\"1\" colspan=\"1\">サンプル1</td>\n        <td rowspan=\"1\" colspan=\"1\">1</td>\n        <td rowspan=\"1\" colspan=\"1\">式</td>\n        <td rowspan=\"1\" colspan=\"1\">10,000</td>\n        <td rowspan=\"1\" colspan=\"1\">10%</td>\n        <td rowspan=\"1\" colspan=\"1\">10,000</td>\n      </tr>\n      <!-- 以下略 -->\n    </table>\n    <!-- 以下略 -->\n  </body>\n</html>\n```\n\n### JSONファイルの場合\n\nJSONファイルの場合です。表になっている部分は `table` キー以下にあるので、システム連携する際にはこの部分を利用します。 `box` は認識された座標を示しています。\n\n```json\n{\n    \"figures\": [],\n    \"paragraphs\": [\n        {\n            \"box\": [\n                197,\n                490,\n                1043,\n                581\n            ],\n            \"contents\": \"サンプル株式会社 御中\",\n            \"direction\": \"horizontal\",\n            \"order\": 0,\n            \"role\": \"section_headings\"\n        },\n        // 略\n    ],\n    \"tables\": [\n        {\n            \"box\": [\n                182,\n                830,\n                1369,\n                1206\n            ],\n            \"cells\": [\n                {\n                    \"box\": [\n                        185,\n                        834,\n                        523,\n                        926\n                    ],\n                    \"col\": 1,\n                    \"col_span\": 1,\n                    \"contents\": \"件名\",\n                    \"row\": 1,\n                    \"row_span\": 1\n                },\n                {\n                    \"box\": [\n                        523,\n                        831,\n                        1368,\n                        926\n                    ],\n                    \"col\": 2,\n                    \"col_span\": 1,\n                    \"contents\": \"サンプルプロジェクト\",\n                    \"row\": 1,\n                    \"row_span\": 1\n                },\n                // 以下略\n            ],\n        },\n}\n```\n\n### Markdownの場合\n\nMarkdownの場合、表の部分はMarkdownのテーブル形式で出力されます。\n\n```markdown\n# サンプル株式会社 御中\n\n下記のとおり、御請求申し上げます。\n\n# 請 求 書\n\n|件名|サンプルプロジェクト|\n|-|-|\n|支払期限|2022/5/31|\n|振込先|サンプル銀行 本店 普通 1111111<br>サンプル\\(カ|\n\n合計\n\n140,600 円\\(税込\\)\n\n|No\\.|1001|\n|-|-|\n|請求日|2022/4/30|\n\nサンプル株式会社<br>〒100\\-0001<br>東京都千代田区千代田1\\-1\\-1<br>サンプルビル3階<br>TEL : 03\\-0000\\-0000<br>担当:サンプル太郎<br>登録番号:T1234567890123\n\n|摘要|数量|単位|単価|税率|金額|\n|-|-|-|-|-|-|\n|サンプル1|1|式|10,000|10%|10,000|\n: 以下略\n```\n\n### CSVの場合\n\nCSVの場合、表の部分はCSV形式で出力されます。Excelなどで開いた際にも、レイアウトが維持されているので確認しやすいはずです。\n\n```csv\nサンプル株式会社 御中\n  : 省略\n登録番号:T1234567890123\"\n\"\"\n摘要,数量,単位,単価,税率,金額\nサンプル1,1,式,\"10,000\",10%,\"10,000\"\n```\n\n![スクリーンショット 2025-02-15 16.14.05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/aee31624-8c4f-4f7a-a292-f99cdaa24fb2.png)\n\n\n## 解析内容を可視化する\n\nコマンドオプション `-v` を付けると、解析結果を可視化した画像を出力します。\n\n```bash\nyomitoku ./images -f html -v\n```\n\n認識された箇所をボックスで囲み、その認識された文字列も合わせて出力されるので、YomiTokuがどういった箇所をどう認識しているのかを確認することができます。\n\n![_invoice_p1_ocr.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/18fbe992-745d-4d31-a6ea-2dd69e55d948.jpeg)\n\n## 注意点\n\n### CPUでの利用について\n\nYomiTokuはGPUでの利用を推奨していますが、CPU環境下でも実行は可能です。ただし、解析には数分かかるので注意してください。\n\n### 手書き文字について\n\n~~2025年2月現在のYomiTokuでは、活字のみサポートしています。手書き文字については、公式にはサポートしておりません。また、看板など紙以外にプリントされた情景OCRについては、最適化されていません。~~\nYomiTokuのv0.8.1から手書き文字認識がサポートされました。例えば、ホワイトボードの文字を下記のように読み取ることができました。\n![inputs_white-board_p1_ocr.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4009607/59402cc5-c28a-448a-bf92-18c8dc3b6851.jpeg)\n\n### 画像サイズについて\n\n低解像度画像では識別精度が低下します。画像の短辺を720px以上の画像で解析することを推奨します。\n\n## ライセンス\n\nYomiTokuは、非商用での個人利用、研究目的での利用は自由に利用可能ですが、商用目的での利用に関しては、別途、商用ライセンスが必要で、[問い合わせ](https://relic.co.jp/services/yomitoku/)が必要です。\n\n## まとめ\n\nYomiTokuを使えば、これまでは難しかった帳票や、複雑なレイアウトの文書もデジタル化できます。既存資産のDX化や、業務効率化に役立ててください。\n\n* [YomiToku - GitHub](https://github.com/kotaro-kinoshita/yomitoku)\n* [商用ライセンス問い合わせ](https://relic.co.jp/services/yomitoku/)\n",
        "coediting": false,
        "comments_count": 2,
        "created_at": "2025-02-20T00:23:59+09:00",
        "group": null,
        "id": "9d382fe4ec991a7eacd2",
        "likes_count": 210,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 218,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "AI",
            "versions": []
          },
          {
            "name": "OCR",
            "versions": []
          },
          {
            "name": "YomiToku",
            "versions": []
          }
        ],
        "title": "日本語に特化したAI OCR「YomiToku」の紹介",
        "updated_at": "2025-07-03T21:06:18+09:00",
        "url": "https://qiita.com/kanzoo/items/9d382fe4ec991a7eacd2",
        "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 1,
          "followers_count": 14,
          "github_login_name": null,
          "id": "kanzoo",
          "items_count": 8,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 4009607,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/4009607/c4c311fea27d4d2761f39f731385210c03894eae/x_large.png?1739381550",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7947169542312622,
        "quality_score": 19,
        "python_code_score": 1,
        "python_code_blocks": 0
      },
      {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:36\">\n<span id=\"確定申告で毎回思うこと\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E5%AE%9A%E7%94%B3%E5%91%8A%E3%81%A7%E6%AF%8E%E5%9B%9E%E6%80%9D%E3%81%86%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>確定申告で毎回思うこと</h2>\n<p data-sourcepos=\"2:1-3:80\">今年も確定申告の時期が終わりましたね。毎年領収書を溜めていますが、電子帳簿も試したい！<br>\n現在は様々なサービスがあり OCR も非常に性能が良いです。</p>\n<p data-sourcepos=\"5:1-5:40\"><iframe id=\"qiita-embed-content__ad12a03e61dad544dffa63dd2ca63ead\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ad12a03e61dad544dffa63dd2ca63ead\" data-content=\"https%3A%2F%2Fwww.freee.co.jp%2Felectronic-book%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"7:1-7:42\"><iframe id=\"qiita-embed-content__9b20572784efdf6eb6e0f4941f83054c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9b20572784efdf6eb6e0f4941f83054c\" data-content=\"https%3A%2F%2Fbiz.moneyforward.com%2Fdenshi-hozon%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"9:1-10:82\">と思いつつも、中々気が進まない...。<br>\nというのも、<strong>レシートごとに画像を用意するのが面倒...</strong>。</p>\n<h2 data-sourcepos=\"12:1-12:24\">\n<span id=\"つくりたいもの\" class=\"fragment\"></span><a href=\"#%E3%81%A4%E3%81%8F%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>つくりたいもの</h2>\n<p data-sourcepos=\"14:1-14:174\">そこで、パノラマ写真で領収書をバーっと撮影した画像を、一つ一つの領収書データに分けてくれるアプリをつくってみました。</p>\n<p data-sourcepos=\"16:1-16:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=313dd8e965e90641fb0fecc000f1a0d7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=313dd8e965e90641fb0fecc000f1a0d7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e4b321cdd2d803d0116edd75f17eaf04 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/ff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"18:1-18:117\">こんな感じで複数の領収書が入った画像を分割して日付と店名をファイル名にします。</p>\n<p data-sourcepos=\"20:1-20:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fdc0419b6-2946-4c55-873a-7d814e973b01.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=78dc21d67ef221500f2c3b267f8939c9\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fdc0419b6-2946-4c55-873a-7d814e973b01.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=78dc21d67ef221500f2c3b267f8939c9\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fdc0419b6-2946-4c55-873a-7d814e973b01.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e25258acd01184e9a769a38ce0eab039 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/dc0419b6-2946-4c55-873a-7d814e973b01.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"22:1-22:30\">流れは次の通りです。</p>\n<div data-sourcepos=\"24:1-28:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<ol data-sourcepos=\"25:1-27:102\">\n<li data-sourcepos=\"25:1-25:73\">複数の領収書が撮影された1つの画像をアップロード</li>\n<li data-sourcepos=\"26:1-26:42\">一つ一つの領収書画像に分割</li>\n<li data-sourcepos=\"27:1-27:102\">それぞれの領収書の「日付」「店名」を抽出し、ファイル名に入れて保存</li>\n</ol>\n</div>\n</div>\n<h2 data-sourcepos=\"30:1-30:18\">\n<span id=\"つくりかた\" class=\"fragment\"></span><a href=\"#%E3%81%A4%E3%81%8F%E3%82%8A%E3%81%8B%E3%81%9F\"><i class=\"fa fa-link\"></i></a>つくりかた</h2>\n<p data-sourcepos=\"32:1-32:84\"><a href=\"https://cloud.google.com/vision/docs?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">Cloud Vision API</a> を使いました。</p>\n<p data-sourcepos=\"34:1-34:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F199ae68f-4538-43ac-894d-7c8441d93179.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ddb84580cabb03ecc6e765d3231c9dac\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F199ae68f-4538-43ac-894d-7c8441d93179.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ddb84580cabb03ecc6e765d3231c9dac\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F199ae68f-4538-43ac-894d-7c8441d93179.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6f5f7d90e77cf62b1d53bfd94d86ad12 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/199ae68f-4538-43ac-894d-7c8441d93179.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"36:1-36:80\">フロントエンドは React 、バックエンドは Flask (Python) です。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"38:1-54:3\"><div class=\"highlight\"><pre><code>receipt-ocr-app/\n├── backend/\n│   ├── app.py              ←OCR処理\n│   ├── requirements.txt\n│   ├── uploads/            ←使用する画像\n│   └── output/             ←処理後の画像 \n├── frontend/\n│   ├── src/\n│   │   ├── App.jsx         ←メインのUI\n│   │   ├── App.css\n│   │   ├── index.js        \n│   │   └── index.css  \n│   ├── tailwind.config.js\n│   ├── package.json\n│   └── package-lock.json\n</code></pre></div></div>\n<p data-sourcepos=\"55:1-55:100\">※プロジェクト作成時の React の細々としたファイル群は省略しています。</p>\n<h3 data-sourcepos=\"57:1-57:25\">\n<span id=\"フロントエンド\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89\"><i class=\"fa fa-link\"></i></a>フロントエンド</h3>\n<details><summary>初期化等</summary>\n<p data-sourcepos=\"61:1-61:54\"><code>frontend/</code> ディレクトリで準備をします。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"63:1-68:3\"><div class=\"highlight\"><pre><code>npx create-react-app <span class=\"nb\">.</span>\nnpm <span class=\"nb\">install</span> <span class=\"nt\">-D</span> tailwindcss postcss autoprefixer axios\nnpm <span class=\"nb\">install</span>              <span class=\"c\"># 念のためこの順番にしました</span>\nnpx tailwindcss init <span class=\"nt\">-p</span>  <span class=\"c\"># tailwind.config.js を生成</span>\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"js\" data-sourcepos=\"70:1-81:3\">\n<div class=\"code-lang\"><span class=\"bold\">tailwind.config.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">./src/**/*.{js,jsx,ts,tsx}</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">theme</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">extend</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n<span class=\"p\">}</span>\n\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"css\" data-sourcepos=\"83:1-88:3\">\n<div class=\"code-lang\"><span class=\"bold\">src/index.css</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">@tailwind</span> <span class=\"n\">base</span><span class=\"p\">;</span>\n<span class=\"k\">@tailwind</span> <span class=\"n\">components</span><span class=\"p\">;</span>\n<span class=\"k\">@tailwind</span> <span class=\"n\">utilities</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"js\" data-sourcepos=\"90:1-102:3\">\n<div class=\"code-lang\"><span class=\"bold\">src/index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-dom/client</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./App.jsx</span><span class=\"dl\">'</span><span class=\"p\">;</span> <span class=\"c1\">// ← ここを .js → .jsx に変更</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./index.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nf\">createRoot</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">root</span><span class=\"dl\">'</span><span class=\"p\">));</span>\n<span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nf\">render</span><span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">StrictMode</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"sr\">/React.StrictMode</span><span class=\"err\">&gt;\n</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n</details>\n<p data-sourcepos=\"106:1-106:36\">デザインはシンプルです。</p>\n<p data-sourcepos=\"108:1-108:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F30d1485f-fbb7-4566-8cf2-2ac4d3c32168.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c90225989dd597c1efdd1d5127ba336d\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F30d1485f-fbb7-4566-8cf2-2ac4d3c32168.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c90225989dd597c1efdd1d5127ba336d\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F30d1485f-fbb7-4566-8cf2-2ac4d3c32168.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=43e1d0e8e730bc2208155b8cf9f653b3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/30d1485f-fbb7-4566-8cf2-2ac4d3c32168.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"jsx\" data-sourcepos=\"110:1-175:3\">\n<div class=\"code-lang\"><span class=\"bold\">App.jsx</span></div>\n<div class=\"highlight\"><pre><code>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">axios</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">setFile</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">result</span><span class=\"p\">,</span> <span class=\"nx\">setResult</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">handleUpload</span> <span class=\"o\">=</span> <span class=\"k\">async </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">formData</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FormData</span><span class=\"p\">();</span>\n    <span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">image</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">);</span>\n\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:5000/upload</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">formData</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">multipart/form-data</span><span class=\"dl\">\"</span> <span class=\"p\">},</span>\n      <span class=\"p\">});</span>\n      <span class=\"nf\">setResult</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n      <span class=\"nf\">setResult</span><span class=\"p\">({</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">アップロード失敗</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"min-h-screen bg-gray-50 p-6 flex flex-col items-center\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"text-2xl font-bold mb-4\"</span><span class=\"p\">&gt;</span>領収書OCRアップローダー<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"file\"</span>\n        <span class=\"na\">accept</span><span class=\"p\">=</span><span class=\"s\">\"image/*\"</span>\n        <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">setFile</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"si\">}</span>\n        <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"mb-4\"</span>\n      <span class=\"p\">/&gt;</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span>\n        <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleUpload</span><span class=\"si\">}</span>\n        <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"</span>\n      <span class=\"p\">&gt;</span>\n        アップロードして処理\n      <span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n\n      <span class=\"si\">{</span><span class=\"nx\">result</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"mt-6 text-left w-full max-w-2xl\"</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"font-semibold\"</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n          <span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"mt-4 space-y-2\"</span><span class=\"p\">&gt;</span>\n            <span class=\"si\">{</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">results</span> <span class=\"o\">&amp;&amp;</span>\n              <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">key</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">index</span><span class=\"si\">}</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">\"border p-2 rounded bg-white shadow\"</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>📄 <span class=\"p\">&lt;</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">strong</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>📅 日付: <span class=\"si\">{</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">date</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n                  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>🏪 店名: <span class=\"si\">{</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n              <span class=\"p\">))</span><span class=\"si\">}</span>\n          <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">)</span><span class=\"si\">}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n<p data-sourcepos=\"177:1-177:97\">バックエンド側で立ち上げる　<code>http://localhost:5000/</code> にポストしています。</p>\n<h3 data-sourcepos=\"179:1-179:22\">\n<span id=\"バックエンド\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89\"><i class=\"fa fa-link\"></i></a>バックエンド</h3>\n<details><summary>パッケージの準備</summary>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"183:1-188:3\">\n<div class=\"code-lang\"><span class=\"bold\">requirements.txt</span></div>\n<div class=\"highlight\"><pre><code>Flask\nflask-cors\ngoogle-cloud-vision\nopencv-python\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"190:1-192:3\"><div class=\"highlight\"><pre><code>pip install -r requirements.txt\n</code></pre></div></div>\n<p data-sourcepos=\"194:1-194:42\">Python バージョンは<code>3.12.2</code>です。</p>\n</details>\n<p data-sourcepos=\"198:1-198:105\">また、<strong>Cloud Vision API</strong> を有効化し、サービスアカウントのキーを取得します。</p>\n<p data-sourcepos=\"200:1-200:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F81ab5584-f236-45ae-918a-74b1ccdac13d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=02d53e440b85d244ce69e9b9e8dc9af7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F81ab5584-f236-45ae-918a-74b1ccdac13d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=02d53e440b85d244ce69e9b9e8dc9af7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F81ab5584-f236-45ae-918a-74b1ccdac13d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fcb3cf39c91f1eca365478f67d024a23 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/81ab5584-f236-45ae-918a-74b1ccdac13d.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"202:1-202:33\">手順は以下の通りです。</p>\n<div data-sourcepos=\"204:1-208:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<ol data-sourcepos=\"205:1-207:161\">\n<li data-sourcepos=\"205:1-205:92\">\n<a href=\"https://console.cloud.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">Google Cloud</a> でプロジェクトを立ち上げる</li>\n<li data-sourcepos=\"206:1-206:103\">\n<a href=\"https://console.cloud.google.com/apis/library/vision.googleapis.com\" rel=\"nofollow noopener\" target=\"_blank\">Cloud Vision API</a> を有効化</li>\n<li data-sourcepos=\"207:1-207:161\">\n<a href=\"https://console.cloud.google.com/iam-admin/serviceaccounts\" rel=\"nofollow noopener\" target=\"_blank\">サービスアカウント</a>を作成し、キーの json ファイルをダウンロードする</li>\n</ol>\n</div>\n</div>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"210:1-223:3\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"service_account\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"project_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"your-project-id\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"private_key_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"xxxxxxxxxxxxxxxxxxx\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"private_key\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"-----BEGIN PRIVATE KEY-----</span><span class=\"se\">\\n</span><span class=\"s2\">...</span><span class=\"se\">\\n</span><span class=\"s2\">-----END PRIVATE KEY-----</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"client_email\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"your-service-account@your-project-id.iam.gserviceaccount.com\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"client_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"123456789012345678901\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"auth_uri\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://accounts.google.com/o/oauth2/auth\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"token_uri\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://oauth2.googleapis.com/token\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"auth_provider_x509_cert_url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://www.googleapis.com/oauth2/v1/certs\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"client_x509_cert_url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://www.googleapis.com/robot/v1/metadata/x509/...\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p data-sourcepos=\"225:1-225:186\">ここまで準備ができたら、メインのコードを書いていきます。サービスアカウントのキーは配置したパスを以下の<code>PATH</code>に入れてください。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"227:1-331:3\">\n<div class=\"code-lang\"><span class=\"bold\">app.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n<span class=\"kn\">from</span> <span class=\"n\">flask_cors</span> <span class=\"kn\">import</span> <span class=\"n\">CORS</span>\n<span class=\"kn\">from</span> <span class=\"n\">google.cloud</span> <span class=\"kn\">import</span> <span class=\"n\">vision</span>\n<span class=\"kn\">from</span> <span class=\"n\">google.oauth2</span> <span class=\"kn\">import</span> <span class=\"n\">service_account</span>\n\n<span class=\"c1\"># Google Cloud Vision の認証設定\n</span><span class=\"n\">SERVICE_ACCOUNT_FILE</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">PATH</span><span class=\"sh\">'</span><span class=\"o\">+</span><span class=\"sh\">'</span><span class=\"s\">service_account_key.json</span><span class=\"sh\">'</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">service_account</span><span class=\"p\">.</span><span class=\"n\">Credentials</span><span class=\"p\">.</span><span class=\"nf\">from_service_account_file</span><span class=\"p\">(</span><span class=\"n\">SERVICE_ACCOUNT_FILE</span><span class=\"p\">)</span>\n<span class=\"n\">vision_client</span> <span class=\"o\">=</span> <span class=\"n\">vision</span><span class=\"p\">.</span><span class=\"nc\">ImageAnnotatorClient</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"nc\">CORS</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"n\">UPLOAD_FOLDER</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">uploads</span><span class=\"sh\">'</span>\n<span class=\"n\">OUTPUT_FOLDER</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">output</span><span class=\"sh\">'</span>\n\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"n\">UPLOAD_FOLDER</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"n\">OUTPUT_FOLDER</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">領収書OCRサーバーが起動しています。</span><span class=\"sh\">'</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/upload</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">upload</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">image</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">画像が見つかりませんでした</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">400</span>\n\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">files</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">image</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">filename</span> <span class=\"o\">==</span> <span class=\"sh\">''</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">ファイル名が空です</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">400</span>\n\n    <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">UPLOAD_FOLDER</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n    <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 処理実行\n</span>    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"nf\">split_and_ocr_receipts</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"nf\">jsonify</span><span class=\"p\">({</span>\n        <span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">処理完了：</span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> 件のレシートを出力しました。</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">results</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">results</span>\n    <span class=\"p\">})</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_and_ocr_receipts</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">):</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imread</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n    <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nc\">GaussianBlur</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">threshold</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">THRESH_BINARY</span> <span class=\"o\">+</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">THRESH_OTSU</span><span class=\"p\">)</span>\n\n    <span class=\"n\">contours</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">findContours</span><span class=\"p\">(</span><span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">RETR_EXTERNAL</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">CHAIN_APPROX_SIMPLE</span><span class=\"p\">)</span>\n    <span class=\"n\">contours</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">contours</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cnt</span><span class=\"p\">:</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">boundingRect</span><span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>  <span class=\"c1\"># 画像を左から右の順に処理する\n</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">contours</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">boundingRect</span><span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span> <span class=\"ow\">or</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">roi</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">]</span>\n        <span class=\"n\">roi</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">resize</span><span class=\"p\">(</span><span class=\"n\">roi</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"mi\">600</span> <span class=\"o\">*</span> <span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"n\">w</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># OpenCV画像を変換してCloud Visionへ\n</span>        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">encoded_image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imencode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.jpg</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">roi</span><span class=\"p\">)</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">encoded_image</span><span class=\"p\">.</span><span class=\"nf\">tobytes</span><span class=\"p\">()</span>\n        <span class=\"n\">vision_image</span> <span class=\"o\">=</span> <span class=\"n\">vision</span><span class=\"p\">.</span><span class=\"nc\">Image</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">vision_client</span><span class=\"p\">.</span><span class=\"nf\">text_detection</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">vision_image</span><span class=\"p\">)</span>\n        <span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">text_annotations</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">texts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">description</span> <span class=\"k\">if</span> <span class=\"n\">texts</span> <span class=\"k\">else</span> <span class=\"sh\">\"\"</span>\n\n        <span class=\"c1\"># 日付の抽出\n</span>        <span class=\"n\">date_match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">\\d{4}[/-]\\d{1,2}[/-]\\d{1,2}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"n\">date_str</span> <span class=\"o\">=</span> <span class=\"n\">date_match</span><span class=\"p\">.</span><span class=\"nf\">group</span><span class=\"p\">().</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">date_match</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">unknown</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"sh\">'</span>\n\n        <span class=\"c1\"># 店名の抽出\n</span>        <span class=\"n\">store_name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">unknown</span><span class=\"sh\">'</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">店</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">line</span> <span class=\"ow\">or</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">())</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n                <span class=\"n\">store_name</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"c1\"># ファイル名整形\n</span>        <span class=\"n\">safe_store</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">[\\\\/*?:</span><span class=\"sh\">\"</span><span class=\"s\">&lt;&gt;|]</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">store_name</span><span class=\"p\">)</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">date_str</span><span class=\"si\">}</span><span class=\"s\">_</span><span class=\"si\">{</span><span class=\"n\">safe_store</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span>\n\n        <span class=\"n\">output_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">OUTPUT_FOLDER</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"nf\">imwrite</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">roi</span><span class=\"p\">)</span>\n\n        <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n            <span class=\"sh\">'</span><span class=\"s\">file</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">filename</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">date</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">date_str</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">store</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">store_name</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">text</span>\n        <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">results</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n</code></pre></div>\n</div>\n<p data-sourcepos=\"333:1-333:139\">もし、文字化けなどがあれば <a href=\"https://docs.python.org/ja/3.13/library/unicodedata.html\" rel=\"nofollow noopener\" target=\"_blank\">unicodedata</a> を使ってください。</p>\n<details><summary>サンプルコード</summary>\nimport unicodedata\n<p data-sourcepos=\"338:1-343:23\">def normalize_filename(name):<br>\n# NFC正規化 + ファイル名禁止文字の除去 + 半角変換など<br>\nname = unicodedata.normalize('NFKC', name)<br>\nname = re.sub(r'[\\/*?:\"&lt;&gt;|]', '', name)  # 禁止文字を削除<br>\nname = name.encode('utf-8', 'ignore').decode('utf-8')  # 不正な文字を除外<br>\nreturn name.strip()</p>\n</details>\n<h3 data-sourcepos=\"347:1-347:16\">\n<span id=\"実行結果\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>実行結果</h3>\n<p data-sourcepos=\"349:1-349:106\"><code>sample.jpg</code> という画像データを入れると上手く、領収書を分割してくれました。</p>\n<p data-sourcepos=\"351:1-351:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=313dd8e965e90641fb0fecc000f1a0d7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=313dd8e965e90641fb0fecc000f1a0d7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e4b321cdd2d803d0116edd75f17eaf04 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/ff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"353:1-353:195\">ただし、店名が上手く抽出できるように以下の部分は独自にコードを変えています。この辺りはぜひご自身のデータに合わせて調整して下さい。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"356:1-367:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># 日付の抽出\n</span><span class=\"n\">date_match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">\\d{4}[/-]\\d{1,2}[/-]\\d{1,2}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"n\">date_str</span> <span class=\"o\">=</span> <span class=\"n\">date_match</span><span class=\"p\">.</span><span class=\"nf\">group</span><span class=\"p\">().</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">date_match</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">unknown</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"sh\">'</span>\n\n<span class=\"c1\"># 店名の抽出\n</span><span class=\"n\">store_name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">unknown</span><span class=\"sh\">'</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">店</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">line</span> <span class=\"ow\">or</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">())</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"n\">store_name</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">break</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"369:1-369:33\">\n<span id=\"上手くいかなかった例\" class=\"fragment\"></span><a href=\"#%E4%B8%8A%E6%89%8B%E3%81%8F%E3%81%84%E3%81%8B%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>上手くいかなかった例</h2>\n<p data-sourcepos=\"371:1-371:96\">床を領収書として判定したり、日付や店名が取れない場合があります。</p>\n<p data-sourcepos=\"373:1-373:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fe635e42f-04d0-4f03-9e32-8b229b71ea87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d13cda04a2fe4be8ea4751f0d648052c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fe635e42f-04d0-4f03-9e32-8b229b71ea87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d13cda04a2fe4be8ea4751f0d648052c\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2Fe635e42f-04d0-4f03-9e32-8b229b71ea87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=795e4f101a03cce8b6113b0ef4dd1f33 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/e635e42f-04d0-4f03-9e32-8b229b71ea87.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"375:1-375:121\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F3466554c-b2c1-435a-8305-ae6c3a28fd45.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1e90e51eca5dda6ccd61151da551d805\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F3466554c-b2c1-435a-8305-ae6c3a28fd45.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1e90e51eca5dda6ccd61151da551d805\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F986141%2F3466554c-b2c1-435a-8305-ae6c3a28fd45.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bc8cc0c2a0a4edaf48890ad73222243d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/3466554c-b2c1-435a-8305-ae6c3a28fd45.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"377:1-377:286\">性能に関しては、<strong>撮影した画像</strong>、<strong>抽出のルール</strong>、そもそも<strong>難易度の高い領収書</strong> (コンビニはやり易い) などの要素が関係してきます。黒い床や紙の上だとバウンディングボックスは作りやすいと思います。</p>\n<p data-sourcepos=\"379:1-379:139\">また、<code>Tesseract(pytesseract)</code> も試してみましたが、今回の課題では<strong>Cloud Vision API</strong> に軍配が上がりました。</p>\n<p data-sourcepos=\"381:1-381:37\"><iframe id=\"qiita-embed-content__4a80e3b0eb85e9e6c423a82759a760f6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__4a80e3b0eb85e9e6c423a82759a760f6\" data-content=\"https%3A%2F%2Fpypi.org%2Fproject%2Fpytesseract%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"383:1-383:42\"><iframe id=\"qiita-embed-content__dba61d1b0067b1955258e13cd1c08675\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__dba61d1b0067b1955258e13cd1c08675\" data-content=\"https%3A%2F%2Fgithub.com%2Ftesseract-ocr%2Ftesseract\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<div data-sourcepos=\"385:1-387:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"386:1-386:120\"><code>Tesseract(pytesseract)</code>のコードについても記事を書いて、こちらにリンクをつくる予定です。</p>\n</div>\n</div>\n<h2 data-sourcepos=\"389:1-389:9\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n<p data-sourcepos=\"391:1-391:114\">やはり領収書の特徴を掴む手間があるので、こういったものも使ってみたいですね。</p>\n<p data-sourcepos=\"393:1-393:51\"><iframe id=\"qiita-embed-content__a60372ec214e563855cac31f42f57e76\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a60372ec214e563855cac31f42f57e76\" data-content=\"https%3A%2F%2Fqiita.com%2Fkanzoo%2Fitems%2F9d382fe4ec991a7eacd2\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"395:1-395:91\">もし生成 AI でデータ構造化をしたい方はこちらが参考になります。</p>\n<p data-sourcepos=\"397:1-397:61\"><iframe id=\"qiita-embed-content__06b650d43d78316daf37dd0d80090ba0\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__06b650d43d78316daf37dd0d80090ba0\" data-content=\"https%3A%2F%2Fqiita.com%2Fwatanabe-tsubasa%2Fitems%2F12dc7ba9a6de55e8afd9\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n",
        "body": "## 確定申告で毎回思うこと\n今年も確定申告の時期が終わりましたね。毎年領収書を溜めていますが、電子帳簿も試したい！\n現在は様々なサービスがあり OCR も非常に性能が良いです。\n\nhttps://www.freee.co.jp/electronic-book/\n\nhttps://biz.moneyforward.com/denshi-hozon/\n\nと思いつつも、中々気が進まない...。\nというのも、**レシートごとに画像を用意するのが面倒...**。\n\n## つくりたいもの\n\nそこで、パノラマ写真で領収書をバーっと撮影した画像を、一つ一つの領収書データに分けてくれるアプリをつくってみました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/ff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png)\n\nこんな感じで複数の領収書が入った画像を分割して日付と店名をファイル名にします。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/dc0419b6-2946-4c55-873a-7d814e973b01.png)\n\n流れは次の通りです。\n\n:::note\n1. 複数の領収書が撮影された1つの画像をアップロード\n1. 一つ一つの領収書画像に分割\n1. それぞれの領収書の「日付」「店名」を抽出し、ファイル名に入れて保存\n:::\n\n## つくりかた\n\n[Cloud Vision API](https://cloud.google.com/vision/docs?hl=ja) を使いました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/199ae68f-4538-43ac-894d-7c8441d93179.png)\n\nフロントエンドは React 、バックエンドは Flask (Python) です。\n\n```\nreceipt-ocr-app/\n├── backend/\n│   ├── app.py              ←OCR処理\n│   ├── requirements.txt\n│   ├── uploads/            ←使用する画像\n│   └── output/             ←処理後の画像 \n├── frontend/\n│   ├── src/\n│   │   ├── App.jsx         ←メインのUI\n│   │   ├── App.css\n│   │   ├── index.js        \n│   │   └── index.css  \n│   ├── tailwind.config.js\n│   ├── package.json\n│   └── package-lock.json\n```\n※プロジェクト作成時の React の細々としたファイル群は省略しています。\n\n### フロントエンド\n\n<details><summary>初期化等</summary>\n\n`frontend/` ディレクトリで準備をします。\n\n```bash\nnpx create-react-app .\nnpm install -D tailwindcss postcss autoprefixer axios\nnpm install              # 念のためこの順番にしました\nnpx tailwindcss init -p  # tailwind.config.js を生成\n```\n\n```js:tailwind.config.js\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n\n```\n\n```css:src/index.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n```\n\n```js:src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.jsx'; // ← ここを .js → .jsx に変更\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n</details>\n\nデザインはシンプルです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/30d1485f-fbb7-4566-8cf2-2ac4d3c32168.png)\n\n```jsx:App.jsx\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(null);\n\n  const handleUpload = async () => {\n    if (!file) return;\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/upload\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n      setResult(res.data);\n    } catch (err) {\n      console.error(err);\n      setResult({ message: \"アップロード失敗\" });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6 flex flex-col items-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">領収書OCRアップローダー</h1>\n\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) => setFile(e.target.files[0])}\n        className=\"mb-4\"\n      />\n\n      <button\n        onClick={handleUpload}\n        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n      >\n        アップロードして処理\n      </button>\n\n      {result && (\n        <div className=\"mt-6 text-left w-full max-w-2xl\">\n          <p className=\"font-semibold\">{result.message}</p>\n\n          <ul className=\"mt-4 space-y-2\">\n            {result.results &&\n              result.results.map((r, index) => (\n                <li key={index} className=\"border p-2 rounded bg-white shadow\">\n                  <p>📄 <strong>{r.file}</strong></p>\n                  <p>📅 日付: {r.date}</p>\n                  <p>🏪 店名: {r.store}</p>\n                </li>\n              ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\nバックエンド側で立ち上げる　`http://localhost:5000/` にポストしています。\n\n### バックエンド\n\n<details><summary>パッケージの準備</summary>\n\n```bash:requirements.txt\nFlask\nflask-cors\ngoogle-cloud-vision\nopencv-python\n```\n\n```\npip install -r requirements.txt\n```\n\nPython バージョンは`3.12.2`です。\n\n</details>\n\nまた、**Cloud Vision API** を有効化し、サービスアカウントのキーを取得します。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/81ab5584-f236-45ae-918a-74b1ccdac13d.png)\n\n手順は以下の通りです。\n\n:::note\n1. [Google Cloud](https://console.cloud.google.com/) でプロジェクトを立ち上げる\n1. [Cloud Vision API](https://console.cloud.google.com/apis/library/vision.googleapis.com) を有効化\n1. [サービスアカウント](https://console.cloud.google.com/iam-admin/serviceaccounts)を作成し、キーの json ファイルをダウンロードする\n:::\n\n```json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"your-project-id\",\n  \"private_key_id\": \"xxxxxxxxxxxxxxxxxxx\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"your-service-account@your-project-id.iam.gserviceaccount.com\",\n  \"client_id\": \"123456789012345678901\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/...\"\n}\n```\n\nここまで準備ができたら、メインのコードを書いていきます。サービスアカウントのキーは配置したパスを以下の`PATH`に入れてください。\n\n```python:app.py\nimport os\nimport cv2\nimport re\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom google.cloud import vision\nfrom google.oauth2 import service_account\n\n# Google Cloud Vision の認証設定\nSERVICE_ACCOUNT_FILE = 'PATH'+'service_account_key.json'\ncredentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE)\nvision_client = vision.ImageAnnotatorClient(credentials=credentials)\n\napp = Flask(__name__)\nCORS(app)\n\nUPLOAD_FOLDER = 'uploads'\nOUTPUT_FOLDER = 'output'\n\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n\n@app.route('/')\ndef index():\n    return '領収書OCRサーバーが起動しています。'\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    if 'image' not in request.files:\n        return '画像が見つかりませんでした', 400\n\n    image = request.files['image']\n    if image.filename == '':\n        return 'ファイル名が空です', 400\n\n    filepath = os.path.join(UPLOAD_FOLDER, image.filename)\n    image.save(filepath)\n\n    # 処理実行\n    results = split_and_ocr_receipts(filepath)\n\n    return jsonify({\n        'message': f'処理完了：{len(results)} 件のレシートを出力しました。',\n        'results': results\n    })\n\ndef split_and_ocr_receipts(filepath):\n    img = cv2.imread(filepath)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    gray = cv2.GaussianBlur(gray, (5, 5), 0)\n    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n\n    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    contours = sorted(contours, key=lambda cnt: cv2.boundingRect(cnt)[0])  # 画像を左から右の順に処理する\n\n    results = []\n\n    for i, cnt in enumerate(contours):\n        x, y, w, h = cv2.boundingRect(cnt)\n        if w < 200 or h < 200:\n            continue\n\n        roi = img[y:y+h, x:x+w]\n        roi = cv2.resize(roi, (600, int(600 * h / w)))\n\n        # OpenCV画像を変換してCloud Visionへ\n        _, encoded_image = cv2.imencode('.jpg', roi)\n        content = encoded_image.tobytes()\n        vision_image = vision.Image(content=content)\n        response = vision_client.text_detection(image=vision_image)\n        texts = response.text_annotations\n        text = texts[0].description if texts else \"\"\n\n        # 日付の抽出\n        date_match = re.search(r'\\d{4}[/-]\\d{1,2}[/-]\\d{1,2}', text)\n        date_str = date_match.group().replace('/', '-') if date_match else f'unknown{i+1}'\n\n        # 店名の抽出\n        store_name = 'unknown'\n        for line in text.split('\\n'):\n            if '店' in line or len(line.strip()) >= 4:\n                store_name = line.strip()\n                break\n\n        # ファイル名整形\n        safe_store = re.sub(r'[\\\\/*?:\"<>|]', '', store_name)\n        filename = f'{date_str}_{safe_store}.png'\n\n        output_path = os.path.join(OUTPUT_FOLDER, filename)\n        cv2.imwrite(output_path, roi)\n\n        results.append({\n            'file': filename,\n            'date': date_str,\n            'store': store_name,\n            'text': text\n        })\n\n    return results\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n\nもし、文字化けなどがあれば [unicodedata](https://docs.python.org/ja/3.13/library/unicodedata.html) を使ってください。\n\n<details><summary>サンプルコード</summary>\nimport unicodedata\n\ndef normalize_filename(name):\n    # NFC正規化 + ファイル名禁止文字の除去 + 半角変換など\n    name = unicodedata.normalize('NFKC', name)\n    name = re.sub(r'[\\\\/*?:\"<>|]', '', name)  # 禁止文字を削除\n    name = name.encode('utf-8', 'ignore').decode('utf-8')  # 不正な文字を除外\n    return name.strip()\n    \n</details>\n\n### 実行結果\n\n`sample.jpg` という画像データを入れると上手く、領収書を分割してくれました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/ff72bdf3-24b0-4d4e-b5b3-b636611b65f7.png)\n\nただし、店名が上手く抽出できるように以下の部分は独自にコードを変えています。この辺りはぜひご自身のデータに合わせて調整して下さい。\n\n\n```python\n# 日付の抽出\ndate_match = re.search(r'\\d{4}[/-]\\d{1,2}[/-]\\d{1,2}', text)\ndate_str = date_match.group().replace('/', '-') if date_match else f'unknown{i+1}'\n\n# 店名の抽出\nstore_name = 'unknown'\nfor line in text.split('\\n'):\n    if '店' in line or len(line.strip()) >= 4:\n        store_name = line.strip()\n        break\n```\n\n## 上手くいかなかった例\n\n床を領収書として判定したり、日付や店名が取れない場合があります。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/e635e42f-04d0-4f03-9e32-8b229b71ea87.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/3466554c-b2c1-435a-8305-ae6c3a28fd45.png)\n\n性能に関しては、**撮影した画像**、**抽出のルール**、そもそも**難易度の高い領収書** (コンビニはやり易い) などの要素が関係してきます。黒い床や紙の上だとバウンディングボックスは作りやすいと思います。\n\nまた、`Tesseract(pytesseract)` も試してみましたが、今回の課題では**Cloud Vision API** に軍配が上がりました。\n\nhttps://pypi.org/project/pytesseract/\n\nhttps://github.com/tesseract-ocr/tesseract\n\n::: note warn\n`Tesseract(pytesseract)`のコードについても記事を書いて、こちらにリンクをつくる予定です。\n:::\n\n## 参考\n\nやはり領収書の特徴を掴む手間があるので、こういったものも使ってみたいですね。\n\nhttps://qiita.com/kanzoo/items/9d382fe4ec991a7eacd2\n\nもし生成 AI でデータ構造化をしたい方はこちらが参考になります。\n\nhttps://qiita.com/watanabe-tsubasa/items/12dc7ba9a6de55e8afd9\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-03-25T13:08:06+09:00",
        "group": null,
        "id": "5e2de76ecab11ccb755a",
        "likes_count": 4,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 2,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "Flask",
            "versions": []
          },
          {
            "name": "OCR",
            "versions": []
          },
          {
            "name": "React",
            "versions": []
          },
          {
            "name": "GoogleCloud",
            "versions": []
          }
        ],
        "title": "スムーズに電子帳簿保存するために複数の領収書を一気に処理する",
        "updated_at": "2025-03-25T13:08:06+09:00",
        "url": "https://qiita.com/yutowac/items/5e2de76ecab11ccb755a",
        "user": {
          "description": "フリーランス、データサイエンティスト、機械学習エンジニア\r\n得意なスクリプト言語：Python, JavaScript, C#\r\n記事にしたいもの：Python, ChatGPT, Unity, Docker, PowerShell, AWS, GAS, フリーランス",
          "facebook_id": "",
          "followees_count": 319,
          "followers_count": 63,
          "github_login_name": "yutowac",
          "id": "yutowac",
          "items_count": 63,
          "linkedin_id": "",
          "location": "",
          "name": "",
          "organization": "フリーランスエンジニア",
          "permanent_id": 986141,
          "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/986141/profile-images/1700024578",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": "tanitaco",
        "slide": false,
        "semantic_similarity": 0.7808929681777954,
        "quality_score": 19,
        "python_code_score": 5,
        "python_code_blocks": 2
      },
      {
        "rendered_body": "<p data-sourcepos=\"1:1-3:95\">こんにちは。<br>\nSIGNATEの「第3回金融データ活用チャレンジ」に参加して取組んだ内容について、その結果と手法を解説します。<br>\n取組みや記事作成は <a href=\"/SY122095\" class=\"user-mention js-hovercard\" title=\"SY122095\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"SY122095\">@SY122095</a> 氏を含むチームメンバーと取組みました。</p>\n<h1 data-sourcepos=\"5:1-5:20\">\n<span id=\"取組結果概要\" class=\"fragment\"></span><a href=\"#%E5%8F%96%E7%B5%84%E7%B5%90%E6%9E%9C%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>取組結果概要</h1>\n<table data-sourcepos=\"6:1-10:42\">\n<thead>\n<tr data-sourcepos=\"6:1-6:3\">\n<th data-sourcepos=\"6:2-6:1\"></th>\n<th data-sourcepos=\"6:3-6:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"8:1-8:18\">\n<td data-sourcepos=\"8:2-8:13\">チーム名</td>\n<td data-sourcepos=\"8:15-8:17\">FXD</td>\n</tr>\n<tr data-sourcepos=\"9:1-9:19\">\n<td data-sourcepos=\"9:2-9:13\">暫定評価</td>\n<td data-sourcepos=\"9:15-9:18\">0.52</td>\n</tr>\n<tr data-sourcepos=\"10:1-10:42\">\n<td data-sourcepos=\"10:2-10:25\">最終評価（順位）</td>\n<td data-sourcepos=\"10:27-10:41\">0.28(161/1,544)</td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"12:1-12:29\">\n<span id=\"ragシステム構築方針\" class=\"fragment\"></span><a href=\"#rag%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E7%AF%89%E6%96%B9%E9%87%9D\"><i class=\"fa fa-link\"></i></a>RAGシステム構築方針</h1>\n<p data-sourcepos=\"13:1-14:170\">私たちのチームでは、社員のRAGに関する知見を実践で蓄積すること目的として、本コンペティションに参加しました。<br>\nこれにあたり、以前開催されていた「RAG-1グランプリ」の知見共有会で共有された知見をもとにRAG構築の方針を決定しました。</p>\n<table data-sourcepos=\"16:1-21:77\">\n<thead>\n<tr data-sourcepos=\"16:1-16:27\">\n<th data-sourcepos=\"16:2-16:10\">タスク</th>\n<th data-sourcepos=\"16:12-16:26\">アプローチ</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"18:1-18:80\">\n<td data-sourcepos=\"18:2-18:6\">Store</td>\n<td data-sourcepos=\"18:8-18:79\">テキスト抽出、要約処理、チャンキング、ベクトル化</td>\n</tr>\n<tr data-sourcepos=\"19:1-19:56\">\n<td data-sourcepos=\"19:2-19:9\">Retrieve</td>\n<td data-sourcepos=\"19:11-19:55\">参照ファイル特定、ベクトル検索</td>\n</tr>\n<tr data-sourcepos=\"20:1-20:160\">\n<td data-sourcepos=\"20:2-20:8\">Augment</td>\n<td data-sourcepos=\"20:10-20:159\">プロンプト構築（マークダウン記法）、質問の分類と質問カテゴリ別プロンプト構築、生成結果のアンサンブル</td>\n</tr>\n<tr data-sourcepos=\"21:1-21:77\">\n<td data-sourcepos=\"21:2-21:9\">Generate</td>\n<td data-sourcepos=\"21:11-21:76\">パラメータチューニング、ハルシネーション対策</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"23:1-23:99\">上記の方針に基づき、目標スコアを「0.5」として取組みを実施しました。</p>\n<h1 data-sourcepos=\"25:1-25:38\">\n<span id=\"実際に構築したragシステム\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%9Frag%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\"><i class=\"fa fa-link\"></i></a>実際に構築したRAGシステム</h1>\n<h3 data-sourcepos=\"26:1-26:19\">\n<span id=\"イメージ図\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E5%9B%B3\"><i class=\"fa fa-link\"></i></a>イメージ図</h3>\n<h5 data-sourcepos=\"27:1-27:46\">\n<span id=\"図1ragシステムイメージ図\" class=\"fragment\"></span><a href=\"#%E5%9B%B31rag%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E5%9B%B3\"><i class=\"fa fa-link\"></i></a>（図1）RAGシステムイメージ図</h5>\n<p data-sourcepos=\"28:1-28:147\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F27ad0510-06cc-4a06-bab1-a8799ebd8fc7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=427ea66c7c1594521a2a468ffc9b9f2a\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F27ad0510-06cc-4a06-bab1-a8799ebd8fc7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=427ea66c7c1594521a2a468ffc9b9f2a\" alt=\"RAGシステムイメージ図.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F27ad0510-06cc-4a06-bab1-a8799ebd8fc7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9f4f93c73df30909cd9b45b5062e25a7 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/27ad0510-06cc-4a06-bab1-a8799ebd8fc7.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"30:1-30:137\">Azure OpenAI ServiceとAPI連携し、データの取得から生成結果の出力まで行えるPyhtonコードを構築しました。</p>\n<h5 data-sourcepos=\"31:1-31:43\">\n<span id=\"図2タスク別イメージ図\" class=\"fragment\"></span><a href=\"#%E5%9B%B32%E3%82%BF%E3%82%B9%E3%82%AF%E5%88%A5%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E5%9B%B3\"><i class=\"fa fa-link\"></i></a>（図2）タスク別イメージ図</h5>\n<p data-sourcepos=\"32:1-32:144\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fe27be200-e83f-45ff-a0b0-e0d5d58ab6a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c16a5b8b0af19606ea680ae64e0aca28\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fe27be200-e83f-45ff-a0b0-e0d5d58ab6a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c16a5b8b0af19606ea680ae64e0aca28\" alt=\"タスク別イメージ図.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fe27be200-e83f-45ff-a0b0-e0d5d58ab6a0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=435cabcfc522073854d4d5bb724a60ab 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/e27be200-e83f-45ff-a0b0-e0d5d58ab6a0.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"34:1-34:252\">今回の取組みでは、各工程において複数パターンに分岐させて生成を行いその結果をアンサンブルすることが有力ではないかと考え、上図のようなパターン分岐により生成を行いました。</p>\n<h2 data-sourcepos=\"36:1-36:21\">\n<span id=\"設定api連携\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9Aapi%E9%80%A3%E6%90%BA\"><i class=\"fa fa-link\"></i></a>設定・API連携</h2>\n<p data-sourcepos=\"37:1-37:72\">RAGシステムの構築のベースは、Azure OpenAIとしました。</p>\n<p data-sourcepos=\"39:1-39:21\">（使用したAPI）</p>\n<ol data-sourcepos=\"40:1-48:0\">\n<li data-sourcepos=\"40:1-45:50\">コンペ提供\n<ul data-sourcepos=\"41:5-45:50\">\n<li data-sourcepos=\"41:5-41:65\">endpoint :'<a href=\"https://apim-fdua-aoai-002.azure-api.net/model/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://apim-fdua-aoai-002.azure-api.net/model/</a>'</li>\n<li data-sourcepos=\"42:5-42:30\">llm_deployment :'4omini'</li>\n<li data-sourcepos=\"43:5-43:36\">embed_deployment : 'embedding'</li>\n<li data-sourcepos=\"44:5-44:32\">api_version : '2024-10-21'</li>\n<li data-sourcepos=\"45:5-45:50\">api_key : '6bc29179dbd7808aee7d3e1ef50145a4'</li>\n</ul>\n</li>\n<li data-sourcepos=\"46:1-48:0\">社内契約\n<ul data-sourcepos=\"47:5-48:0\">\n<li data-sourcepos=\"47:5-48:0\">4o, o1-mini</li>\n</ul>\n</li>\n</ol>\n<h2 data-sourcepos=\"49:1-49:36\">\n<span id=\"テキスト抽出並び替え\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E6%8A%BD%E5%87%BA%E4%B8%A6%E3%81%B3%E6%9B%BF%E3%81%88\"><i class=\"fa fa-link\"></i></a>テキスト抽出・並び替え</h2>\n<p data-sourcepos=\"50:1-50:253\">今回の検索対象とするデータは上場企業の統合報告書ですべてPDFファイルです。そのため、PDFファイルからテキスト情報の抽出が必要となります。考えられるアプローチは大きく2つです。</p>\n<ul data-sourcepos=\"51:1-53:0\">\n<li data-sourcepos=\"51:1-51:59\">AI-OCR : 「Azure Computer Vision」を使用します。</li>\n<li data-sourcepos=\"52:1-53:0\">PDF解析 : Pythonライブラリの「PyMuPDF」や「pdfplumber」などを使用し、テキスト抽出、表のhtml出力などを行います。</li>\n</ul>\n<h3 data-sourcepos=\"54:1-54:10\">\n<span id=\"ai-ocr\" class=\"fragment\"></span><a href=\"#ai-ocr\"><i class=\"fa fa-link\"></i></a>AI-OCR</h3>\n<p data-sourcepos=\"55:1-55:142\">AzurePortalにおいて画像認識可能なサービス(Azure Computer Vision)を用いてPDFファイルの文字起こしを行います。</p>\n<ol data-sourcepos=\"56:1-101:25\">\n<li data-sourcepos=\"56:1-57:0\">\n<p data-sourcepos=\"56:4-56:48\"><strong>使用サービス: Azure Computer Vision</strong></p>\n</li>\n<li data-sourcepos=\"58:1-61:0\">\n<p data-sourcepos=\"58:4-58:22\"><strong>インプット</strong></p>\n<ul data-sourcepos=\"59:5-61:0\">\n<li data-sourcepos=\"59:5-61:0\">統合報告書のPDFをそのまま入力します。<br>例: 株式会社4℃ホールディングス<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F3218520a-7727-45a8-a061-5d6523b1d515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=289fc3583cbff697ad6ec3e772132936\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F3218520a-7727-45a8-a061-5d6523b1d515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=289fc3583cbff697ad6ec3e772132936\" alt=\"pdf_sample.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F3218520a-7727-45a8-a061-5d6523b1d515.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f35baf07d4e8c9372a8035707eb9ef41 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/3218520a-7727-45a8-a061-5d6523b1d515.png\" loading=\"lazy\"></a>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"62:1-100:0\">\n<p data-sourcepos=\"62:4-62:25\"><strong>アウトプット</strong></p>\n<ul data-sourcepos=\"63:5-63:203\">\n<li data-sourcepos=\"63:5-63:203\">ACVからは以下のようにJSONでページごとにテキストと記載位置(boundingBox)が格納されている辞書のリストが返されるため、Pythonで加工していきます。</li>\n</ul>\n<details>\n  <summary>ACV返り値</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"67:7-98:9\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">3.7416</span><span class=\"p\">,</span>\n<span class=\"mf\">10.5305</span><span class=\"p\">,</span>\n<span class=\"mf\">3.9616</span><span class=\"p\">,</span>\n<span class=\"mf\">10.5305</span><span class=\"p\">,</span>\n<span class=\"mf\">3.9616</span><span class=\"p\">,</span>\n<span class=\"mf\">10.7541</span><span class=\"p\">,</span>\n<span class=\"mf\">3.7416</span><span class=\"p\">,</span>\n<span class=\"mf\">10.7541</span><span class=\"p\">],</span>\n<span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">笑</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"sh\">'</span><span class=\"s\">confidence</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">3.9791</span><span class=\"p\">,</span>\n<span class=\"mf\">10.5312</span><span class=\"p\">,</span>\n<span class=\"mf\">4.2046</span><span class=\"p\">,</span>\n<span class=\"mf\">10.5312</span><span class=\"p\">,</span>\n<span class=\"mf\">4.2046</span><span class=\"p\">,</span>\n<span class=\"mf\">10.7538</span><span class=\"p\">,</span>\n<span class=\"mf\">3.9791</span><span class=\"p\">,</span>\n<span class=\"mf\">10.7538</span><span class=\"p\">],</span>\n<span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">顔</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"sh\">'</span><span class=\"s\">confidence</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">4.223</span><span class=\"p\">,</span>\n<span class=\"mf\">10.5394</span><span class=\"p\">,</span>\n<span class=\"mf\">6.6824</span><span class=\"p\">,</span>\n<span class=\"mf\">10.5394</span><span class=\"p\">,</span>\n<span class=\"mf\">6.6824</span><span class=\"p\">,</span>\n<span class=\"mf\">10.7444</span><span class=\"p\">,</span>\n<span class=\"mf\">4.223</span><span class=\"p\">,</span>\n<span class=\"mf\">10.7444</span><span class=\"p\">],</span>\n<span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">”や“ときめき”のために</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"sh\">'</span><span class=\"s\">confidence</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}]}</span>\n</code></pre></div></div>\n</details>\n</li>\n<li data-sourcepos=\"101:1-101:25\">\n<p data-sourcepos=\"101:4-101:25\"><strong>テキスト作成</strong></p>\n</li>\n</ol>\n<ul data-sourcepos=\"102:3-166:0\">\n<li data-sourcepos=\"102:3-122:3\">\n<p data-sourcepos=\"102:5-102:167\">返されたJSONを順に結合していくと以下のようにPDFの段組みが考慮されず文章として成り立たない箇所が多数出てきます。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"105:6-120:8\"><div class=\"highlight\"><pre><code>4℃\nholdings group\n統合レポート\n４℃レポート2024\nすべては、お客様の“笑顔”や“ときめき”のために\n経営理念・ブランドコンセプト\n４℃ホールディングスグループの At a Glance\nCorporatePhilosophy経営理念\n業績（2024年2月期）\n株主情報（2024年2月29日現在）\n私達は、お客様に信頼される企業を目指します。\n売上高\n394.5億円\n私達は、社員に夢を与える企業を目指します。\n</code></pre></div></div>\n<br>\n</li>\n<li data-sourcepos=\"123:3-139:3\">\n<p data-sourcepos=\"123:5-123:139\">ルールベースで折り返し地点を設定し、返り値を結合していくことで以下のように改善されました。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"126:8-137:10\"><div class=\"highlight\"><pre><code>株式会社４℃ホールディングス\nCorporatePhilosophy経営理念\n私達は、お客様に信頼される企業を目指します。\n私達は、社員に夢を与える企業を目指します。\n私達は、社会に貢献できる企業を目指します。\n私達は、株主に期待される企業を目指します。\nCorporateMessage コーポレートメッセージ\n当グループは、4℃ブランドを中心とした\nグローバルファッション創造企業として、お客様の一歩先のニーズに\n応える、お客様の生活文化を向上させる企業であり続けます。\n</code></pre></div></div>\n <br>\n</li>\n<li data-sourcepos=\"140:3-166:0\">\n<p data-sourcepos=\"140:5-140:149\">また、図表部については以下のように表としての情報を保てていないためさらに改善が必要となります。<br></p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"143:8-163:10\"><div class=\"highlight\"><pre><code>4℃\n2℃未満\nシナリオ\nシナリオ\n大\n中\n炭素税の導入によるコストの増大\n脱炭素・低炭素エネルギーの利用促進\n開示業務の効率化\n小\n中\n情報開示義務拡大への対応による業務負荷、コストの増大\n商品のLCA（ライフサイクルアセスメント）評価義務化によ\n新たな業務範囲の精査および業務の効率化・\n-\n中\nるトレーサビリティの確保等必要な措置による業務負荷と\nRJCの継続\nコストの増大\n</code></pre></div></div>\n<p data-sourcepos=\"164:8-164:140\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F24cfd1a2-57a8-459c-bd34-fad4796ba49b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=db48d339953836e4984554c346e59c2c\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F24cfd1a2-57a8-459c-bd34-fad4796ba49b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=db48d339953836e4984554c346e59c2c\" alt=\"pdf_table_sample.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F24cfd1a2-57a8-459c-bd34-fad4796ba49b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1b5bfe366cb4730ab289f0784b08d129 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/24cfd1a2-57a8-459c-bd34-fad4796ba49b.png\" loading=\"lazy\"></a></p>\n</li>\n</ul>\n<details>\n <summary>AI-OCRコード</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"170:2-273:4\"><div class=\"highlight\"><pre><code>   <span class=\"c1\"># エンドポイントとAPIキーを設定\n</span>   <span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://xxxx/</span><span class=\"sh\">'</span>\n   <span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">xxxxxxxxxx</span><span class=\"sh\">'</span>\n\n   <span class=\"c1\"># PDFファイルが格納されているディレクトリを指定\n</span>   <span class=\"n\">pdf_dir</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./xxx/documents</span><span class=\"sh\">'</span>\n\n   <span class=\"c1\"># PDFをひとつずつ文字起こししていく\n</span>   <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"n\">pdf_dir</span><span class=\"p\">):</span>\n       <span class=\"c1\"># PDFファイルのパスを指定\n</span>       <span class=\"n\">pdf_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">pdf_dir</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n       \n       <span class=\"c1\"># エンドポイントからOCRのURLを指定\n</span>       <span class=\"n\">ocr_url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">endpoint</span><span class=\"si\">}</span><span class=\"s\">vision/v3.2/read/analyze</span><span class=\"sh\">'</span>\n\n       <span class=\"c1\"># PDFデータの読み込み\n</span>       <span class=\"n\">pdf_data</span> <span class=\"o\">=</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">pdf_path</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">rb</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n\n       <span class=\"c1\"># パラメータの設定\n</span>       <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n           <span class=\"sh\">'</span><span class=\"s\">Ocp-Apim-Subscription-Key</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n           <span class=\"sh\">'</span><span class=\"s\">Content-Type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">application/octet-stream</span><span class=\"sh\">'</span>\n       <span class=\"p\">}</span>\n\n       <span class=\"c1\"># APIを呼び出す\n</span>       <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">ocr_url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pdf_data</span><span class=\"p\">)</span>\n       \n       <span class=\"c1\"># 結果取得\n</span>       <span class=\"n\">operation_location</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Operation-Location</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n       <span class=\"n\">analysis</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n       <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"sh\">'</span><span class=\"s\">analyzeResult</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">analysis</span><span class=\"p\">:</span>\n           <span class=\"n\">response_final</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">operation_location</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">Ocp-Apim-Subscription-Key</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">})</span>\n           <span class=\"n\">analysis</span> <span class=\"o\">=</span> <span class=\"n\">response_final</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n       \n       <span class=\"c1\"># テキスト化(テキストとboundingBoxが返されるため、boundingBoxを参照して並び替える)\n</span>       <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n       <span class=\"c1\"># ページ数を取得してページごとに並び替え\n</span>       <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">analyzeResult</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">readResults</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n       <span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">):</span>\n           <span class=\"c1\"># 対象ページのboundingBoxとテキストのみ抽出\n</span>           <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">analyzeResult</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">readResults</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"n\">page</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">lines</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n           <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">]}</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">content</span><span class=\"p\">]</span>\n\n           <span class=\"c1\"># 左端x座標で並び替え\n</span>           <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)]</span>\n           <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n           <span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n           <span class=\"n\">content_xsorted</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">content</span><span class=\"p\">[</span><span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">]</span>\n\n           <span class=\"c1\"># どのくらいずれていれば違う段とみなすかの閾値を設定\n</span>           <span class=\"n\">x_threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span>\n           <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_pre</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_diff</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_pre</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n           <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">changepoint</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_diff</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">&gt;</span><span class=\"n\">x_threshold</span><span class=\"p\">)</span>\n           <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_group</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">changepoint</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">cumsum</span><span class=\"p\">()</span>\n\n           <span class=\"c1\"># 左端y座標で並び替え\n</span>           <span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">boundingBox</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)]</span>\n           <span class=\"n\">tmp2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">l2</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n           <span class=\"n\">tmp2</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n           <span class=\"n\">content_xsorted</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">content</span><span class=\"p\">[</span><span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">tmp2</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">]</span>\n\n           <span class=\"c1\"># どのくらいずれていれば違う段とみなすかの閾値を設定\n</span>           <span class=\"n\">y_threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>\n           <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_pre</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_diff</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_pre</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n           <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">changepoint</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_diff</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"o\">&gt;</span><span class=\"n\">y_threshold</span><span class=\"p\">)</span>\n           <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_group</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp2</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">changepoint</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">cumsum</span><span class=\"p\">()</span>\n\n           <span class=\"c1\"># ボックス作成\n</span>           <span class=\"n\">box_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n           <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n           <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_group</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">unique</span><span class=\"p\">()):</span>\n               <span class=\"n\">tmp_x</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x_group</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">x</span><span class=\"p\">]</span>\n               <span class=\"n\">tmp_x</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">tmp_x</span><span class=\"p\">,</span> <span class=\"n\">tmp2</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">left</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n               <span class=\"n\">tmp_x</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n               <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_pre</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n               <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_diff</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_pre</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n               <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">changepoint</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_diff</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"o\">&gt;</span><span class=\"n\">y_threshold</span><span class=\"p\">)</span>\n               <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_group</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">changepoint</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">cumsum</span><span class=\"p\">()</span>\n               <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span><span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_group</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">unique</span><span class=\"p\">()):</span>\n                   <span class=\"n\">tmp_xy</span> <span class=\"o\">=</span> <span class=\"n\">tmp_x</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">tmp_x</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">y_group</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">y</span><span class=\"p\">]</span>\n                   <span class=\"n\">tmp_xy</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n                   <span class=\"n\">box_dict</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                   <span class=\"n\">box_dict</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">x_group</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n                   <span class=\"n\">box_dict</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">y_group</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n                   <span class=\"n\">box_dict</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">indice</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">tmp_xy</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"n\">values</span><span class=\"p\">)</span>\n                   <span class=\"n\">box_dict</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">df</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp_xy</span>\n                   <span class=\"n\">cnt</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n\n           <span class=\"c1\"># テキスト作成\n</span>           <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">}</span><span class=\"s\">ページ目</span><span class=\"se\">\\n</span><span class=\"sh\">'</span>\n           <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">box_dict</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n               <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">indice</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n                   <span class=\"n\">tmp_txt</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n                   <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"n\">tmp_txt</span>\n                   <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span>\n           <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span>\n       \n       <span class=\"c1\"># 保存\n</span>       <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">保存先指定</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n           <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div></div>\n</details>\n<h3 data-sourcepos=\"276:1-276:13\">\n<span id=\"pdf解析\" class=\"fragment\"></span><a href=\"#pdf%E8%A7%A3%E6%9E%90\"><i class=\"fa fa-link\"></i></a>PDF解析</h3>\n<p data-sourcepos=\"277:1-277:244\">ページごとにPythonライブラリのPyMuPDFで文字起こしを実行後、PDFplumberで当該ページに記載されている表をpandas.DataFrame形式で取得してHTML形式に変換して文字起こし結果に結合します。</p>\n<ol data-sourcepos=\"279:1-287:22\">\n<li data-sourcepos=\"279:1-286:68\">\n<strong>使用ツール</strong>\n<ul data-sourcepos=\"280:5-286:68\">\n<li data-sourcepos=\"280:5-282:74\">\n<a href=\"https://pymupdf.readthedocs.io/ja/latest/\" title=\"公式ドキュメント\" rel=\"nofollow noopener\" target=\"_blank\">PyMuPDF</a>\n<ul data-sourcepos=\"281:7-282:74\">\n<li data-sourcepos=\"281:7-281:125\">PDFドキュメントからデータ抽出、解析、変換、操作を行うためのPythonライブラリです。</li>\n<li data-sourcepos=\"282:7-282:74\">今回は統合報告書中のテキスト抽出に用います。</li>\n</ul>\n</li>\n<li data-sourcepos=\"283:5-286:68\">\n<a href=\"https://github.com/jsvine/pdfplumber?tab=readme-ov-file\" title=\"公式ドキュメント\" rel=\"nofollow noopener\" target=\"_blank\">PDFplumber</a>\n<ul data-sourcepos=\"284:7-286:68\">\n<li data-sourcepos=\"284:7-284:101\">PDFドキュメントからテキストや画像を抽出するPythonライブラリです。</li>\n<li data-sourcepos=\"285:7-285:121\">PyMuPDFと比較して画像抽出の精度が高く、pandas.DataFrame型への変換が容易にできます。</li>\n<li data-sourcepos=\"286:7-286:68\">今回は統合報告書中の図表抽出に用います。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"287:1-287:22\"><strong>インプット</strong></li>\n</ol>\n<ul data-sourcepos=\"288:3-288:76\">\n<li data-sourcepos=\"288:3-288:76\">ACVのときと同様、PDFファイルをそのまま入力します。</li>\n</ul>\n<ol data-sourcepos=\"289:1-289:25\">\n<li data-sourcepos=\"289:1-289:25\"><strong>アウトプット</strong></li>\n</ol>\n<ul data-sourcepos=\"290:3-506:0\">\n<li data-sourcepos=\"290:3-311:8\">\n<p data-sourcepos=\"290:5-290:192\">PyMuPDFによるテキスト抽出では以下のようになり、文章としては成立していますが、順序がバラバラになっている箇所が見受けられます。<br></p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"292:8-310:10\"><div class=\"highlight\"><pre><code>水は自由奔放に、その姿を変えていきます。 \n時には繊細な光を放つ雪の結晶のように、また時には大きなうねりとなって大海原へ。 \nそして、岩や大地をも削り取る強い結束力さえもあります。\n水は平凡どころか、すこぶる非凡であり、シンプルにしてきわめて強固。\nそれは、地球上のあらゆる生命に潤いをもたらせています。\n「水のようでありたい」それが私たちのモノづくりの原点になっています。\n「４℃」それは氷が張った水面の底の温度をあらわします。\n唯一魚が生息できるいわば「安息の場」であり、\nきびしい環境にあっての潤いそのものを意味します。\n私たちは既存の価値に捉われることなく常に新しさと潤いをもたらす\n商品の提案を続けています\n1 \n  ４℃ホールディングスグループの \nAt a Glance\n2 \n  トップメッセージ\n価値創造ストーリー\n</code></pre></div></div>\n<br>\n</li>\n<li data-sourcepos=\"312:3-506:0\">\n<p data-sourcepos=\"312:5-312:290\">PDFplumberによる図表抽出は以下のようになります。<br>「当社の対応方針」が抽出できていないなどの課題はありますが、表としての意味を保つため、これをHTMLコードに変換してテキストデータに埋め込みます。<br></p>\n<table data-sourcepos=\"314:5-346:135\">\n<thead>\n<tr data-sourcepos=\"314:5-314:128\">\n<th style=\"text-align: left\" data-sourcepos=\"314:6-314:11\">0</th>\n<th style=\"text-align: left\" data-sourcepos=\"314:13-314:26\">1</th>\n<th style=\"text-align: left\" data-sourcepos=\"314:28-314:82\">2</th>\n<th style=\"text-align: left\" data-sourcepos=\"314:84-314:99\">3</th>\n<th style=\"text-align: left\" data-sourcepos=\"314:101-314:110\">4</th>\n<th style=\"text-align: left\" data-sourcepos=\"314:112-314:127\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"316:5-316:155\">\n<td style=\"text-align: left\" data-sourcepos=\"316:6-316:13\">区分</td>\n<td style=\"text-align: left\" data-sourcepos=\"316:15-316:28\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"316:30-316:95\">当社に可能性のある事項</td>\n<td style=\"text-align: left\" data-sourcepos=\"316:97-316:119\">当社への影響度</td>\n<td style=\"text-align: left\" data-sourcepos=\"316:121-316:130\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"316:132-316:154\">当社の対応方針</td>\n</tr>\n<tr data-sourcepos=\"317:5-317:134\">\n<td style=\"text-align: left\" data-sourcepos=\"317:6-317:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"317:13-317:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"317:28-317:82\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"317:84-317:101\">4℃</td>\n<td style=\"text-align: left\" data-sourcepos=\"317:103-317:116\">2℃未満</td>\n<td style=\"text-align: left\" data-sourcepos=\"317:118-317:133\"></td>\n</tr>\n<tr data-sourcepos=\"318:5-318:136\">\n<td style=\"text-align: left\" data-sourcepos=\"318:6-318:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"318:13-318:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"318:28-318:82\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"318:84-318:103\">シナリオ</td>\n<td style=\"text-align: left\" data-sourcepos=\"318:105-318:118\">シナリオ</td>\n<td style=\"text-align: left\" data-sourcepos=\"318:120-318:135\"></td>\n</tr>\n<tr data-sourcepos=\"319:5-319:148\">\n<td style=\"text-align: left\" data-sourcepos=\"319:6-319:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"319:13-319:29\">政策・</td>\n<td style=\"text-align: left\" data-sourcepos=\"319:31-319:100\">炭素税の導入によるコストの増大</td>\n<td style=\"text-align: left\" data-sourcepos=\"319:102-319:118\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"319:120-319:130\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"319:132-319:147\"></td>\n</tr>\n<tr data-sourcepos=\"320:5-320:131\">\n<td style=\"text-align: left\" data-sourcepos=\"320:6-320:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"320:13-320:29\">法規制</td>\n<td style=\"text-align: left\" data-sourcepos=\"320:31-320:85\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"320:87-320:102\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"320:104-320:113\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"320:115-320:130\"></td>\n</tr>\n<tr data-sourcepos=\"321:5-321:131\">\n<td style=\"text-align: left\" data-sourcepos=\"321:6-321:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"321:13-321:29\">リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"321:31-321:85\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"321:87-321:102\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"321:104-321:113\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"321:115-321:130\"></td>\n</tr>\n<tr data-sourcepos=\"322:5-322:156\">\n<td style=\"text-align: left\" data-sourcepos=\"322:6-322:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"322:13-322:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"322:28-322:108\">情報開示義務拡大への対応による業務負荷、コストの増大</td>\n<td style=\"text-align: left\" data-sourcepos=\"322:110-322:126\">小</td>\n<td style=\"text-align: left\" data-sourcepos=\"322:128-322:138\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"322:140-322:155\"></td>\n</tr>\n<tr data-sourcepos=\"323:5-323:154\">\n<td style=\"text-align: left\" data-sourcepos=\"323:6-323:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"323:13-323:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"323:28-323:107\">商品のLCA（ライフサイクルアセスメント）評価義務化によ</td>\n<td style=\"text-align: left\" data-sourcepos=\"323:109-323:124\">-</td>\n<td style=\"text-align: left\" data-sourcepos=\"323:126-323:136\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"323:138-323:153\"></td>\n</tr>\n<tr data-sourcepos=\"324:5-324:154\">\n<td style=\"text-align: left\" data-sourcepos=\"324:6-324:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"324:13-324:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"324:28-324:108\">るトレーサビリティの確保等必要な措置による業務負荷と</td>\n<td style=\"text-align: left\" data-sourcepos=\"324:110-324:125\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"324:127-324:136\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"324:138-324:153\"></td>\n</tr>\n<tr data-sourcepos=\"325:5-325:134\">\n<td style=\"text-align: left\" data-sourcepos=\"325:6-325:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"325:13-325:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"325:28-325:88\">コストの増大</td>\n<td style=\"text-align: left\" data-sourcepos=\"325:90-325:105\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"325:107-325:116\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"325:118-325:133\"></td>\n</tr>\n<tr data-sourcepos=\"326:5-326:154\">\n<td style=\"text-align: left\" data-sourcepos=\"326:6-326:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"326:13-326:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"326:28-326:107\">省エネ化の推進が進まないことによるコストの高止まり</td>\n<td style=\"text-align: left\" data-sourcepos=\"326:109-326:125\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"326:127-326:136\">-</td>\n<td style=\"text-align: left\" data-sourcepos=\"326:138-326:153\"></td>\n</tr>\n<tr data-sourcepos=\"327:5-327:160\">\n<td style=\"text-align: left\" data-sourcepos=\"327:6-327:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"327:13-327:31\">市場リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"327:33-327:112\">素材調達、物流等経費の上昇による経費の増大と利益率</td>\n<td style=\"text-align: left\" data-sourcepos=\"327:114-327:130\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"327:132-327:142\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"327:144-327:159\"></td>\n</tr>\n<tr data-sourcepos=\"328:5-328:131\">\n<td style=\"text-align: left\" data-sourcepos=\"328:6-328:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"328:13-328:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"328:28-328:85\">の低下</td>\n<td style=\"text-align: left\" data-sourcepos=\"328:87-328:102\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"328:104-328:113\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"328:115-328:130\"></td>\n</tr>\n<tr data-sourcepos=\"329:5-329:161\">\n<td style=\"text-align: left\" data-sourcepos=\"329:6-329:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"329:13-329:31\">評判リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"329:33-329:113\">消費者のサステナビリティ志向の変化による対応への遅れ</td>\n<td style=\"text-align: left\" data-sourcepos=\"329:115-329:131\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"329:133-329:143\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"329:145-329:160\"></td>\n</tr>\n<tr data-sourcepos=\"330:5-330:143\">\n<td style=\"text-align: left\" data-sourcepos=\"330:6-330:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"330:13-330:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"330:28-330:97\">と競争力の低下・競争機会の逸失</td>\n<td style=\"text-align: left\" data-sourcepos=\"330:99-330:114\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"330:116-330:125\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"330:127-330:142\"></td>\n</tr>\n<tr data-sourcepos=\"331:5-331:156\">\n<td style=\"text-align: left\" data-sourcepos=\"331:6-331:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"331:13-331:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"331:28-331:108\">環境への対応の遅れによるステークホルダーの評価・企業</td>\n<td style=\"text-align: left\" data-sourcepos=\"331:110-331:126\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"331:128-331:138\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"331:140-331:155\"></td>\n</tr>\n<tr data-sourcepos=\"332:5-332:135\">\n<td style=\"text-align: left\" data-sourcepos=\"332:6-332:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"332:13-332:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"332:28-332:89\">イメージの低下</td>\n<td style=\"text-align: left\" data-sourcepos=\"332:91-332:106\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"332:108-332:117\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"332:119-332:134\"></td>\n</tr>\n<tr data-sourcepos=\"333:5-333:161\">\n<td style=\"text-align: left\" data-sourcepos=\"333:6-333:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"333:13-333:31\">急性リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"333:33-333:113\">台風や大雨により店舗が営業できないことによる売上減少</td>\n<td style=\"text-align: left\" data-sourcepos=\"333:115-333:131\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"333:133-333:143\">小</td>\n<td style=\"text-align: left\" data-sourcepos=\"333:145-333:160\"></td>\n</tr>\n<tr data-sourcepos=\"334:5-334:131\">\n<td style=\"text-align: left\" data-sourcepos=\"334:6-334:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"334:13-334:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"334:28-334:85\">リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"334:87-334:102\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"334:104-334:113\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"334:115-334:130\"></td>\n</tr>\n<tr data-sourcepos=\"335:5-335:149\">\n<td style=\"text-align: left\" data-sourcepos=\"335:6-335:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"335:13-335:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"335:28-335:101\">物流プロセスの寸断による売上減少リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"335:103-335:119\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"335:121-335:131\">小</td>\n<td style=\"text-align: left\" data-sourcepos=\"335:133-335:148\"></td>\n</tr>\n<tr data-sourcepos=\"336:5-336:155\">\n<td style=\"text-align: left\" data-sourcepos=\"336:6-336:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"336:13-336:31\">慢性リスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"336:33-336:107\">冬物衣料の需要低下による売上減少のリスク</td>\n<td style=\"text-align: left\" data-sourcepos=\"336:109-336:125\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"336:127-336:137\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"336:139-336:154\"></td>\n</tr>\n<tr data-sourcepos=\"337:5-337:156\">\n<td style=\"text-align: left\" data-sourcepos=\"337:6-337:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"337:13-337:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"337:28-337:108\">温暖化による金属アレルギー発症者の増加とジュエリー離</td>\n<td style=\"text-align: left\" data-sourcepos=\"337:110-337:126\">小</td>\n<td style=\"text-align: left\" data-sourcepos=\"337:128-337:138\">小</td>\n<td style=\"text-align: left\" data-sourcepos=\"337:140-337:155\"></td>\n</tr>\n<tr data-sourcepos=\"338:5-338:129\">\n<td style=\"text-align: left\" data-sourcepos=\"338:6-338:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"338:13-338:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"338:28-338:83\">れ</td>\n<td style=\"text-align: left\" data-sourcepos=\"338:85-338:100\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"338:102-338:111\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"338:113-338:128\"></td>\n</tr>\n<tr data-sourcepos=\"339:5-339:161\">\n<td style=\"text-align: left\" data-sourcepos=\"339:6-339:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"339:13-339:32\">エネルギー源</td>\n<td style=\"text-align: left\" data-sourcepos=\"339:34-339:114\">将来コストの上昇が予想される化石燃料から低炭素エネル</td>\n<td style=\"text-align: left\" data-sourcepos=\"339:116-339:131\">-</td>\n<td style=\"text-align: left\" data-sourcepos=\"339:133-339:143\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"339:145-339:160\"></td>\n</tr>\n<tr data-sourcepos=\"340:5-340:151\">\n<td style=\"text-align: left\" data-sourcepos=\"340:6-340:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"340:13-340:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"340:28-340:105\">ギーへの転換と省エネ化によるコスト及びGHG排出量の</td>\n<td style=\"text-align: left\" data-sourcepos=\"340:107-340:122\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"340:124-340:133\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"340:135-340:150\"></td>\n</tr>\n<tr data-sourcepos=\"341:5-341:130\">\n<td style=\"text-align: left\" data-sourcepos=\"341:6-341:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"341:13-341:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"341:28-341:84\">削減</td>\n<td style=\"text-align: left\" data-sourcepos=\"341:86-341:101\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"341:103-341:112\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"341:114-341:129\"></td>\n</tr>\n<tr data-sourcepos=\"342:5-342:162\">\n<td style=\"text-align: left\" data-sourcepos=\"342:6-342:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"342:13-342:32\">製品サービス</td>\n<td style=\"text-align: left\" data-sourcepos=\"342:34-342:114\">低・脱炭素社会対応型のサステナビリティ商品に対する顧</td>\n<td style=\"text-align: left\" data-sourcepos=\"342:116-342:132\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"342:134-342:144\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"342:146-342:161\"></td>\n</tr>\n<tr data-sourcepos=\"343:5-343:134\">\n<td style=\"text-align: left\" data-sourcepos=\"343:6-343:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"343:13-343:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"343:28-343:88\">客の支持拡大</td>\n<td style=\"text-align: left\" data-sourcepos=\"343:90-343:105\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"343:107-343:116\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"343:118-343:133\"></td>\n</tr>\n<tr data-sourcepos=\"344:5-344:147\">\n<td style=\"text-align: left\" data-sourcepos=\"344:6-344:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"344:13-344:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"344:28-344:99\">気温上昇に対応し夏物商品の売上拡大</td>\n<td style=\"text-align: left\" data-sourcepos=\"344:101-344:117\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"344:119-344:129\">小</td>\n<td style=\"text-align: left\" data-sourcepos=\"344:131-344:146\"></td>\n</tr>\n<tr data-sourcepos=\"345:5-345:162\">\n<td style=\"text-align: left\" data-sourcepos=\"345:6-345:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"345:13-345:32\">レジリエンス</td>\n<td style=\"text-align: left\" data-sourcepos=\"345:34-345:114\">低炭素経済に対応するサプライチェーンの構築による企業</td>\n<td style=\"text-align: left\" data-sourcepos=\"345:116-345:132\">中</td>\n<td style=\"text-align: left\" data-sourcepos=\"345:134-345:144\">大</td>\n<td style=\"text-align: left\" data-sourcepos=\"345:146-345:161\"></td>\n</tr>\n<tr data-sourcepos=\"346:5-346:135\">\n<td style=\"text-align: left\" data-sourcepos=\"346:6-346:11\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"346:13-346:26\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"346:28-346:89\">イメージの向上</td>\n<td style=\"text-align: left\" data-sourcepos=\"346:91-346:106\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"346:108-346:117\"></td>\n<td style=\"text-align: left\" data-sourcepos=\"346:119-346:134\"></td>\n</tr>\n</tbody>\n</table>\n<details>\n  <summary>HTMLコード</summary>\n<div class=\"code-frame\" data-lang=\"html\" data-sourcepos=\"351:7-502:9\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;table</span> <span class=\"na\">border=</span><span class=\"s\">\"1\"</span> <span class=\"na\">class=</span><span class=\"s\">\"dataframe\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;thead&gt;</span>\n    <span class=\"nt\">&lt;tr</span> <span class=\"na\">style=</span><span class=\"s\">\"text-align: right;\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>0<span class=\"nt\">&lt;/th&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>1<span class=\"nt\">&lt;/th&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>2<span class=\"nt\">&lt;/th&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>3<span class=\"nt\">&lt;/th&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>4<span class=\"nt\">&lt;/th&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>5<span class=\"nt\">&lt;/th&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;/thead&gt;</span>\n  <span class=\"nt\">&lt;tbody&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>区分<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>当社に可能性のある事項<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>当社への影響度<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>当社の対応方針<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>4℃\\nシナリオ<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>2℃未満\\nシナリオ<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>政策・\\n法規制\\nリスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>炭素税の導入によるコストの増大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>情報開示義務拡大への対応による業務負荷、コストの増大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>小<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>商品のLCA（ライフサイクルアセスメント）評価義務化によ\\nるトレーサビリティの確保等必要な措置による業務負荷と\\nコストの増大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>-<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>省エネ化の推進が進まないことによるコストの高止まり<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>-<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>市場リスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>素材調達、物流等経費の上昇による経費の増大と利益率\\nの低下<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>評判リスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>消費者のサステナビリティ志向の変化による対応への遅れ\\nと競争力の低下・競争機会の逸失<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>環境への対応の遅れによるステークホルダーの評価・企業\\nイメージの低下<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>急性リスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>台風や大雨により店舗が営業できないことによる売上減少\\nリスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>小<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>物流プロセスの寸断による売上減少リスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>小<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>慢性リスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>冬物衣料の需要低下による売上減少のリスク<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>温暖化による金属アレルギー発症者の増加とジュエリー離\\nれ<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>小<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>小<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>エネルギー源<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>将来コストの上昇が予想される化石燃料から低炭素エネル\\nギーへの転換と省エネ化によるコスト及びGHG排出量の\\n削減<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>-<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>製品サービス<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>低・脱炭素社会対応型のサステナビリティ商品に対する顧\\n客の支持拡大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>気温上昇に対応し夏物商品の売上拡大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>小<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>レジリエンス<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>低炭素経済に対応するサプライチェーンの構築による企業\\nイメージの向上<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>中<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>大<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>None<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;/tbody&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div></div>\n</details>\n</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"Python\" data-sourcepos=\"507:1-547:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># PDFファイルが格納されているディレクトリを指定\n</span><span class=\"n\">pdf_dir</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./xxx/documents</span><span class=\"sh\">'</span>\n\n<span class=\"c1\"># PDFをひとつずつ文字起こししていく\n</span><span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"n\">pdf_dir</span><span class=\"p\">):</span>\n    <span class=\"c1\"># PDFファイルのパスを指定\n</span>    <span class=\"n\">pdf_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">pdf_dir</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># テキストを格納する変数\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n\n    <span class=\"c1\"># ページごとに表を取得する\n</span>    <span class=\"n\">table_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">with</span> <span class=\"n\">pdfplumber</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">pdf_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pdf</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">.</span><span class=\"n\">pages</span><span class=\"p\">):</span>\n            <span class=\"c1\"># データフレーム格納用リスト\n</span>            <span class=\"n\">table_dict</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n            <span class=\"c1\"># 表取得&amp;追加\n</span>            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">extract_table</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"n\">df_tmp</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n                <span class=\"n\">table_dict</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">df_tmp</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># テキストを取得し、表があるページには上記で取得したDataFrameをHTMLに変換して埋め込む\n</span>    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">fitz</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">pdf_path</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)):</span>\n        <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"n\">page</span><span class=\"p\">].</span><span class=\"nf\">get_text</span><span class=\"p\">()</span>\n        <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">統合報告書</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">}</span><span class=\"s\">ページ目</span><span class=\"se\">\\n</span><span class=\"sh\">'</span>\n        <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">tmp</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">'</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">table_dict</span><span class=\"p\">[</span><span class=\"n\">page</span><span class=\"p\">]):</span>\n            <span class=\"k\">for</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">table_dict</span><span class=\"p\">[</span><span class=\"n\">page</span><span class=\"p\">]:</span>\n                <span class=\"n\">table_html</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"nf\">to_html</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">table_html</span><span class=\"si\">}</span><span class=\"se\">\\n\\n</span><span class=\"sh\">'</span>\n    \n\n    <span class=\"c1\"># 保存\n</span>    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">保存先パス</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"549:1-549:24\">\n<span id=\"テキストの要約\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%84\"><i class=\"fa fa-link\"></i></a>テキストの要約</h2>\n<p data-sourcepos=\"0:0-0:0\">アンサンブルを想定し、テキストの要約パターンを考えました。</p>\n<table data-sourcepos=\"550:1-567:61\">\n<thead>\n<tr data-sourcepos=\"550:1-550:134\">\n<th data-sourcepos=\"550:90-550:98\">加工No.</th>\n<th data-sourcepos=\"550:100-550:117\">加工パターン</th>\n<th data-sourcepos=\"550:119-550:133\">文字数指定</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"553:1-553:26\">\n<td data-sourcepos=\"553:2-553:2\">1</td>\n<td data-sourcepos=\"553:4-553:18\">原文のまま</td>\n<td data-sourcepos=\"553:20-553:25\">なし</td>\n</tr>\n<tr data-sourcepos=\"554:1-554:27\">\n<td data-sourcepos=\"554:2-554:2\">2</td>\n<td data-sourcepos=\"554:4-554:15\">全文要約</td>\n<td data-sourcepos=\"554:17-554:26\">5万文字</td>\n</tr>\n<tr data-sourcepos=\"555:1-555:48\">\n<td data-sourcepos=\"555:2-555:2\">3</td>\n<td data-sourcepos=\"555:4-555:21\">単元ごと要約</td>\n<td data-sourcepos=\"555:23-555:47\">項目ごとに1万文字</td>\n</tr>\n<tr data-sourcepos=\"556:1-556:55\">\n<td data-sourcepos=\"556:2-556:2\">4</td>\n<td data-sourcepos=\"556:4-556:25\">1ページずつ要約</td>\n<td data-sourcepos=\"556:27-556:54\">ページごとに5000文字</td>\n</tr>\n<tr data-sourcepos=\"557:1-557:63\">\n<td data-sourcepos=\"557:2-557:2\">5</td>\n<td data-sourcepos=\"557:4-557:36\">事業活動に着目した要約</td>\n<td data-sourcepos=\"557:38-557:62\">事業ごとに3万文字</td>\n</tr>\n<tr data-sourcepos=\"558:1-558:69\">\n<td data-sourcepos=\"558:2-558:2\">6</td>\n<td data-sourcepos=\"558:4-558:36\">財務情報に着目した要約</td>\n<td data-sourcepos=\"558:38-558:68\">財務情報ごとに2万文字</td>\n</tr>\n<tr data-sourcepos=\"559:1-559:48\">\n<td data-sourcepos=\"559:2-559:2\">7</td>\n<td data-sourcepos=\"559:4-559:36\">企業理念に着目した要約</td>\n<td data-sourcepos=\"559:38-559:47\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"560:1-560:42\">\n<td data-sourcepos=\"560:2-560:2\">8</td>\n<td data-sourcepos=\"560:4-560:30\">人名に着目した要約</td>\n<td data-sourcepos=\"560:32-560:41\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"561:1-561:42\">\n<td data-sourcepos=\"561:2-561:2\">9</td>\n<td data-sourcepos=\"561:4-561:30\">実績に着目した要約</td>\n<td data-sourcepos=\"561:32-561:41\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"562:1-562:43\">\n<td data-sourcepos=\"562:2-562:3\">10</td>\n<td data-sourcepos=\"562:5-562:31\">計画に着目した要約</td>\n<td data-sourcepos=\"562:33-562:42\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"563:1-563:40\">\n<td data-sourcepos=\"563:2-563:3\">11</td>\n<td data-sourcepos=\"563:5-563:28\">ESGに着目した要約</td>\n<td data-sourcepos=\"563:30-563:39\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"564:1-564:43\">\n<td data-sourcepos=\"564:2-564:3\">12</td>\n<td data-sourcepos=\"564:5-564:31\">時期に着目した要約</td>\n<td data-sourcepos=\"564:33-564:42\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"565:1-565:43\">\n<td data-sourcepos=\"565:2-565:3\">13</td>\n<td data-sourcepos=\"565:5-565:31\">地域に着目した要約</td>\n<td data-sourcepos=\"565:33-565:42\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"566:1-566:49\">\n<td data-sourcepos=\"566:2-566:3\">14</td>\n<td data-sourcepos=\"566:5-566:37\">数値情報に着目した要約</td>\n<td data-sourcepos=\"566:39-566:48\">3万文字</td>\n</tr>\n<tr data-sourcepos=\"567:1-567:61\">\n<td data-sourcepos=\"567:2-567:3\">15</td>\n<td data-sourcepos=\"567:5-567:49\">前年度からの変化に着目した要約</td>\n<td data-sourcepos=\"567:51-567:60\">3万文字</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"569:1-569:189\">文字数については、統合報告書1つあたりの文字数が平均で約10万文字だったので、全文に対する要約はその3分の1である3万文字としました。</p>\n<h2 data-sourcepos=\"571:1-571:39\">\n<span id=\"チャンキングベクトル化\" class=\"fragment\"></span><a href=\"#%E3%83%81%E3%83%A3%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E5%8C%96\"><i class=\"fa fa-link\"></i></a>チャンキング・ベクトル化</h2>\n<ol data-sourcepos=\"572:1-594:0\">\n<li data-sourcepos=\"572:1-575:95\">\n<p data-sourcepos=\"572:4-572:22\"><strong>パラメータ</strong></p>\n<ul data-sourcepos=\"573:5-575:95\">\n<li data-sourcepos=\"573:5-575:95\">テキスト分割に必要な以下のパラメータを設定します。\n<ul data-sourcepos=\"574:7-575:95\">\n<li data-sourcepos=\"574:7-574:86\">chunk_size: テキストをどのくらいのサイズごとに分けるか。</li>\n<li data-sourcepos=\"575:7-575:95\">overlap: 隣接するチャンク間にどの程度共通の部分を持たせるか。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"576:1-591:6\">\n<p data-sourcepos=\"576:4-576:25\"><strong>チャンキング</strong></p>\n<ul data-sourcepos=\"577:5-591:6\">\n<li data-sourcepos=\"577:5-591:6\">\n<p data-sourcepos=\"577:7-577:131\">LangchainのTextSplitterを使用してテキストを分割します。<br>例: 株式会社4℃ホールディングス<br></p>\n<details>\n  <summary>チャンキング結果</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"581:9-589:10\"><div class=\"highlight\"><pre><code><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">統合報告書0ページ目</span><span class=\"se\">\\n</span><span class=\"s\">統合レポート</span><span class=\"se\">\\n</span><span class=\"s\">４℃ レポート 2024</span><span class=\"se\">\\n</span><span class=\"s\">すべては、お客様の“笑顔”や“ときめき”のために</span><span class=\"se\">\\n</span><span class=\"s\">統合報告書1ページ目</span><span class=\"se\">\\n</span><span class=\"s\">水は自由奔放に、その姿を変えていきます。 </span><span class=\"se\">\\n</span><span class=\"s\">時には繊細な光を放つ雪の結晶のように、また時には大きなう.....,\n</span><span class=\"sh\">'</span><span class=\"p\">.....</span><span class=\"sh\">'</span><span class=\"s\">,\n</span><span class=\"sh\">'</span><span class=\"p\">.....</span><span class=\"sh\">'</span><span class=\"s\">,\n</span><span class=\"gp\">...</span><span class=\"p\">..,</span>\n<span class=\"sh\">'</span><span class=\"s\">.....</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"sh\">'</span><span class=\"s\">.....</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"sh\">'</span><span class=\"s\">&lt;td&gt;19,727&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;/tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;販売費及び一般管理費（ 百万円）&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;22,171&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;21,804&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;18,527&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;17,884&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;17,748&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;/tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;営業利益（ 百万円）&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;4,984&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;3,975&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;2,767&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;1,788&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;1,979&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;/tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;経常利益（ 百万円）&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;6,804&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;4,312&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;3,195&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;2,293&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;2,342&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;/tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;親会社株主に帰属する当期純利益（ 百万円）&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;2,440&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;2,475&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;1,622&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;1,490&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">      &lt;td&gt;1,149&lt;/td&gt;</span><span class=\"se\">\\n</span><span class=\"s\">    &lt;/tr&gt;</span><span class=\"se\">\\n</span><span class=\"s\">  &lt;/tbody&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&lt;/table&gt;</span><span class=\"se\">\\n</span><span class=\"s\">統合報告書13ページ目</span><span class=\"se\">\\n</span><span class=\"s\">株式会社４℃ホールディングス</span><span class=\"se\">\\n</span><span class=\"s\">〒141-0021 東京都品川区上大崎2-19-10</span><span class=\"se\">\\n</span><span class=\"s\">TEL：03-5719-3429 FAX：03-5719-4462</span><span class=\"se\">\\n</span><span class=\"s\">https://yondoshi.co.jp/</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</details><br>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"592:1-594:0\">\n<p data-sourcepos=\"592:4-592:22\"><strong>ベクトル化</strong></p>\n<ul data-sourcepos=\"593:5-594:0\">\n<li data-sourcepos=\"593:5-594:0\">AzureOpenAIのEmbeddingモデルを使用します。</li>\n</ul>\n</li>\n</ol>\n<h3 data-sourcepos=\"595:1-595:10\">\n<span id=\"設定\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>設定</h3>\n<p data-sourcepos=\"596:1-597:101\">RAGに使用する各テキストをベクトル化するための設定をします。<br>\nここでは、例としてチャンクサイズ2,000、オーバーラップ500としています。</p>\n<div class=\"code-frame\" data-lang=\"Python\" data-sourcepos=\"598:1-629:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># チャンク設定\n</span><span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">overlap</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">chunk_type</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">standard</span><span class=\"sh\">'</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">python-lib</span><span class=\"sh\">'</span>\n\n<span class=\"c1\"># テキスト分割インスタンス\n</span><span class=\"n\">text_splitter</span> <span class=\"o\">=</span> <span class=\"nc\">CharacterTextSplitter</span><span class=\"p\">(</span>\n    <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"n\">chunk_size</span><span class=\"p\">,</span> \n    <span class=\"n\">chunk_overlap</span><span class=\"o\">=</span><span class=\"n\">overlap</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># AOAI設定\n</span><span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://xxxxx/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">xxxxxyyyyyyzzzzzzz</span><span class=\"sh\">'</span>\n<span class=\"n\">api_version</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">2024-03-01</span><span class=\"sh\">'</span>\n<span class=\"n\">embed_deployment</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">embeddings</span><span class=\"sh\">'</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">AzureOpenAI</span><span class=\"p\">(</span>\n  <span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>  \n  <span class=\"n\">api_version</span> <span class=\"o\">=</span> <span class=\"n\">api_version</span><span class=\"p\">,</span>\n  <span class=\"n\">azure_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">endpoint</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># 統合報告書のテキストファイルが格納されているディレクトリ\n</span><span class=\"n\">text_dir</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n\n<span class=\"c1\"># ベクトル化したファイルを保存するディレクトリ\n</span><span class=\"n\">save_dir</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"630:1-630:43\">\n<span id=\"参照ファイル統合報告書\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E7%85%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B5%B1%E5%90%88%E5%A0%B1%E5%91%8A%E6%9B%B8\"><i class=\"fa fa-link\"></i></a>参照ファイル（統合報告書）</h3>\n<div class=\"code-frame\" data-lang=\"Python\" data-sourcepos=\"631:1-657:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># テキストファイルを一つずつベクトル化\n</span><span class=\"k\">for</span> <span class=\"n\">text_file</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"n\">text_dir</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># テキストの読み込み\n</span>    <span class=\"n\">text_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">text_dir</span><span class=\"p\">,</span> <span class=\"n\">text_file</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">text_file</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n    \n    <span class=\"c1\"># 指定したチャンクサイズやオーバーラップをもとにテキストを分割\n</span>    <span class=\"n\">text_splitted</span> <span class=\"o\">=</span> <span class=\"n\">text_splitter</span><span class=\"p\">.</span><span class=\"nf\">split_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Embedding(ベクトル化)\n</span>    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">embeddings</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n                <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">text_splitted</span><span class=\"p\">,</span>\n                <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">embed_deployment</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"c1\"># numpy.arrayに変換\n</span>    <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">embedding</span> <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 分割したテキストとベクトルを保存(ベクトルの列番号をテキストの保存ファイル名とする)\n</span>    <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vector</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"n\">vec</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">tmp_txt</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">text_splitted</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">j</span><span class=\"si\">}</span><span class=\"s\">.txt</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">tmp_txt</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"658:1-658:13\">\n<span id=\"クエリ\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%82%A8%E3%83%AA\"><i class=\"fa fa-link\"></i></a>クエリ</h3>\n<p data-sourcepos=\"659:1-659:111\">参照ファイルの特定を類似度算出で行うため、クエリもベクトル化しておきます。</p>\n<div class=\"code-frame\" data-lang=\"Python\" data-sourcepos=\"660:1-677:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># クエリのcsvパスをpandasで読み込む\n</span><span class=\"n\">query_path</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">xxx.csv</span><span class=\"sh\">'</span>\n<span class=\"n\">query_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">query_path</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 100問分のクエリをnumpy.ndarrayに変換\n</span><span class=\"n\">query_list</span> <span class=\"o\">=</span> <span class=\"n\">query_df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"nf\">tolist</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Embedding(ベクトル化)\n</span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">embeddings</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">query_list</span><span class=\"p\">,</span>\n        <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">embed_deployment</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># numpy.ndarrayに変換して保存\n</span><span class=\"n\">queryvec</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">embedding</span> <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">query</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"n\">queryvec</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"679:1-679:45\">\n<span id=\"クエリの分類プロンプト構築\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E5%88%86%E9%A1%9E%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>クエリの分類・プロンプト構築</h2>\n<p data-sourcepos=\"680:1-680:180\">知見共有会の総括で共有された質問分類にクエリを分類し、基本のプロンプトに加えて質問カテゴリ別にプロンプトを用意しました。</p>\n<h4 data-sourcepos=\"682:1-682:26\">\n<span id=\"基本プロンプト\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>基本プロンプト</h4>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"683:1-711:3\"><div class=\"highlight\"><pre><code># 指示\n[# 質問]に対して[# 参照元]の情報のみで[# 出力項目]の内容を[# 出力形式]に沿って回答してください。\nこのとき、[# 注意事項]と[# 特記事項]にもしっかりと従ってください。\n\n# 出力項目\n・質問に対する回答を単語レベルで回答\n・回答の根拠となる本文の抜粋\n・回答に対する確信度（100点満点としたときの自己評価）\n・確信度に対する根拠\n\n# 出力形式\n回答：\n根拠となる本文：\n確信度：\n確信根拠：\n\n# 質問 \n{question}\n\n# 参照元 \n{context}\n\n# 注意事項\n・出力結果は改行しないでください。\n・出力項目の回答は各30文字以内としてください。\n・回答が見つからない場合は「わかりません」と回答してください。\n・Let’s think step by step.\n</code></pre></div></div>\n<h4 data-sourcepos=\"713:1-713:41\">\n<span id=\"質問カテゴリ別プロンプト\" class=\"fragment\"></span><a href=\"#%E8%B3%AA%E5%95%8F%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA%E5%88%A5%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>質問カテゴリ別プロンプト</h4>\n<table data-sourcepos=\"714:1-723:977\">\n<thead>\n<tr data-sourcepos=\"714:1-714:61\">\n<th data-sourcepos=\"714:2-714:16\">カテゴリNo.</th>\n<th data-sourcepos=\"714:18-714:35\">質問カテゴリ</th>\n<th data-sourcepos=\"714:37-714:60\">分類別プロンプト</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"716:1-716:284\">\n<td data-sourcepos=\"716:2-716:2\">1</td>\n<td data-sourcepos=\"716:4-716:15\">単純質問</td>\n<td data-sourcepos=\"716:17-716:283\"># 特記事項<br> この[# 質問]は「単純質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> トヨタ自動車の社長は誰ですか。<br> ## 例題の回答<br> 佐藤 恒治</td>\n</tr>\n<tr data-sourcepos=\"717:1-717:316\">\n<td data-sourcepos=\"717:2-717:2\">2</td>\n<td data-sourcepos=\"717:4-717:15\">比較質問</td>\n<td data-sourcepos=\"717:17-717:315\"># 特記事項<br> この[# 質問]は「比較質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> 東都銀行の預金量は2021年と2022年でどちらが大きいですか。<br> ## 例題の回答例<br> 2021年</td>\n</tr>\n<tr data-sourcepos=\"718:1-718:310\">\n<td data-sourcepos=\"718:2-718:2\">3</td>\n<td data-sourcepos=\"718:4-718:21\">条件付き質問</td>\n<td data-sourcepos=\"718:23-718:309\"># 特記事項<br> この[# 質問]は「条件付き質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> ヤマトの2023年2月期の従業員数は何名ですか。<br> ## 例題の回答例<br> 3043名</td>\n</tr>\n<tr data-sourcepos=\"719:1-719:345\">\n<td data-sourcepos=\"719:2-719:2\">4</td>\n<td data-sourcepos=\"719:4-719:15\">集計質問</td>\n<td data-sourcepos=\"719:17-719:344\"># 特記事項<br> この[# 質問]は「集計質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題 大阪不動産の2022年と2024年の不動産売買部門の売り上げ合計はいくらですか。<br> ## 例題の回答例<br> 171億5721万円</td>\n</tr>\n<tr data-sourcepos=\"720:1-720:384\">\n<td data-sourcepos=\"720:2-720:2\">5</td>\n<td data-sourcepos=\"720:4-720:27\">誤った前提の質問</td>\n<td data-sourcepos=\"720:29-720:383\"># 特記事項<br> この[# 質問]は「誤った前提の質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> マイクロソフトが提供するAIサービス「Gemini」は何年からサービスが開始されましたか。<br> ## 例題の回答例<br> 質問誤り</td>\n</tr>\n<tr data-sourcepos=\"721:1-721:497\">\n<td data-sourcepos=\"721:2-721:2\">6</td>\n<td data-sourcepos=\"721:4-721:18\">多段階質問</td>\n<td data-sourcepos=\"721:20-721:496\"># 特記事項<br> この[# 質問]は「多段階質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題1<br> アメイジングコンピューターの社員数は2020年度から2022年度にかけて何%増加しましたか。<br> ## 例題1の回答例<br> 17% ## 例題2<br> 2000年以降立川重工の退職者数が最大だった年は何年ですか。<br> ## 例題2の回答例<br> 2020年</td>\n</tr>\n<tr data-sourcepos=\"722:1-722:812\">\n<td data-sourcepos=\"722:2-722:2\">7</td>\n<td data-sourcepos=\"722:4-722:30\">後処理が必要な質問</td>\n<td data-sourcepos=\"722:32-722:811\"># 特記事項<br> この[# 質問]は「後処理が必要な質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題1<br> 東京自動社のアメリカ支社について、2021年から2024年までの3年間のガソリンの使用料はいくらになりますか。<br> ## 例題１の回答例<br> 3兆2000億円<br> ## 例題2<br> フルーツデリバリーの飲食部門の売上高は全体の何%ですか。小数点第一位以下を四捨五入して答えてください。<br> ## 例題2の回答例<br> 38%<br> ## 例題3<br> ハートシステムの2024年の営業部門の従業員数と経営企画部門の従業員数の差は何人ですか。<br> ## 例題3の回答例<br> 197人</td>\n</tr>\n<tr data-sourcepos=\"723:1-723:977\">\n<td data-sourcepos=\"723:2-723:2\">8</td>\n<td data-sourcepos=\"723:4-723:15\">集合質問</td>\n<td data-sourcepos=\"723:17-723:976\"># 特記事項<br> この[# 質問]は「集合質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題1<br> 昭和株式会社の社長が挙げている強みを全て挙げてください。<br> ## 例題1の回答例<br> 豊富な人材育成プログラム、グローバル展開によるリスクヘッジ、独自技術の特許を多数保有している<br> ## 例題2<br> 益子ラーメンの海外拠点を全てあげてください。<br> ## 例題2の回答例<br> 上海支社、カリフォルニアブランチ、マダガスカル研究センター、ジャカルタセントラルキッチン<br> ## 例題3<br> 2023年度に立川マンション建設が増益となった要因の上位3点を挙げてください。<br> ## 例題3の回答例<br> 海外投資家からの売上が増加、資材不足の終息、Z世代におけるマンション需要の増加</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"725:1-725:296\">質問カテゴリの分類は本来であれば、クエリを生成AIに与えることで分類させたかったのですが、RAGシステムの基本的な仕組みの構築やデータ加工にリソースを割きたかったので、クエリを目視で確認して分類しました。</p>\n<h2 data-sourcepos=\"727:1-727:15\">\n<span id=\"回答生成\" class=\"fragment\"></span><a href=\"#%E5%9B%9E%E7%AD%94%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>回答生成</h2>\n<p data-sourcepos=\"728:1-728:54\">回答生成に使用する関数を定義します。</p>\n<details>\n <summary>関数定義</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"732:2-776:4\"><div class=\"highlight\"><pre><code>   <span class=\"k\">def</span> <span class=\"nf\">get_response</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">deployment_id</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span>\n                   <span class=\"n\">api_version</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">2024-02-15-preview</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                   <span class=\"n\">temperature</span><span class=\"p\">:</span><span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                   <span class=\"n\">top_p</span><span class=\"p\">:</span><span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                   <span class=\"n\">max_tokens</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">):</span>\n   <span class=\"sh\">'''</span><span class=\"s\">Azureから直接生成結果を得る</span><span class=\"sh\">'''</span>\n   <span class=\"c1\"># Configuration\n</span>   <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n       <span class=\"sh\">'</span><span class=\"s\">Content-Type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">application/json</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n       <span class=\"sh\">'</span><span class=\"s\">api-key</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\"># Payload for the request\n</span>   <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"sh\">'</span><span class=\"s\">messages</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n       <span class=\"p\">{</span>\n       <span class=\"sh\">'</span><span class=\"s\">role</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">system</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n       <span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n           <span class=\"p\">{</span>\n           <span class=\"sh\">'</span><span class=\"s\">type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n           <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">prompt</span>\n           <span class=\"p\">}</span>\n       <span class=\"p\">]</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">],</span>\n   <span class=\"sh\">'</span><span class=\"s\">temperature</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">temperature</span><span class=\"p\">,</span>\n   <span class=\"sh\">'</span><span class=\"s\">top_p</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">top_p</span><span class=\"p\">,</span>\n   <span class=\"sh\">'</span><span class=\"s\">max_tokens</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">max_tokens</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"n\">ENDPOINT</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">endpoint</span><span class=\"si\">}</span><span class=\"s\">/openai/deployments/</span><span class=\"si\">{</span><span class=\"n\">deployment_id</span><span class=\"si\">}</span><span class=\"s\">/chat/completions?api-version=</span><span class=\"si\">{</span><span class=\"n\">api_version</span><span class=\"si\">}</span><span class=\"sh\">'</span>\n\n   <span class=\"c1\"># Send request\n</span>   <span class=\"k\">try</span><span class=\"p\">:</span>\n       <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">ENDPOINT</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n       <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">raise_for_status</span><span class=\"p\">()</span>  <span class=\"c1\"># Will raise an HTTPError if the HTTP request returned an unsuccessful status code\n</span>   <span class=\"k\">except</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">RequestException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n       <span class=\"k\">raise</span> <span class=\"nc\">SystemExit</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Failed to make the request. Error: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n   <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">cos_sim</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n   <span class=\"sh\">'''</span><span class=\"s\">ベクトル間の類似度を測る</span><span class=\"sh\">'''</span>\n   <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n</details>\n<p data-sourcepos=\"779:1-779:78\">100問それぞれのクエリに対して回答を生成していきます。</p>\n<ol data-sourcepos=\"781:1-941:0\">\n<li data-sourcepos=\"781:1-812:0\">\n<p data-sourcepos=\"781:4-781:46\"><strong>プロンプトテンプレート作成</strong></p>\n<ul data-sourcepos=\"782:5-782:75\">\n<li data-sourcepos=\"782:5-782:75\">カテゴリ別のプロンプトを共通部分に結合します。</li>\n</ul>\n <details>\n  <summary>プロンプトテンプレート作成</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"786:6-810:8\"><div class=\"highlight\"><pre><code> <span class=\"c1\"># 各種ベクトル格納先\n</span> <span class=\"n\">query_vec_path</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n <span class=\"n\">text_vec_dir</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n <span class=\"n\">queryvec</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">query_vec_path</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># プロンプト作成に必要な情報を読み込み\n</span> <span class=\"n\">query_dir</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n <span class=\"n\">query_type</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">query_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">query_分類.csv</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n <span class=\"n\">query_category</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">query_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">質問カテゴリ.csv</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n <span class=\"n\">query_category_val</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">query_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">質問カテゴリ.csv</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n <span class=\"n\">template_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">query_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">プロンプト_共通部分.txt</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">template_path</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n     <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n\n <span class=\"c1\"># クエリ情報読み込み\n</span> <span class=\"n\">query_array</span> <span class=\"o\">=</span> <span class=\"n\">query_type</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span>\n <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">query_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\">#クエリテキスト\n</span> <span class=\"n\">category_num</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">query_array</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\">#クエリタイプ\n</span> <span class=\"n\">query_vector</span> <span class=\"o\">=</span> <span class=\"n\">queryvec</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span> <span class=\"c1\">#クエリベクトル\n</span>\n <span class=\"c1\"># 該当するクエリタイプのプロンプトを読み込んでテンプレートに結合\n</span> <span class=\"n\">prompt_type</span> <span class=\"o\">=</span> <span class=\"n\">query_category</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">query_category</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">カテゴリNo.</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">category_num</span><span class=\"p\">].</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"n\">prompt_template</span> <span class=\"o\">=</span> <span class=\"n\">template</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">/n</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"n\">prompt_type</span>\n</code></pre></div></div>\n </details><br>\n</li>\n<li data-sourcepos=\"813:1-853:0\">\n<p data-sourcepos=\"813:4-813:43\"><strong>使用する統合報告書の特定</strong></p>\n<ul data-sourcepos=\"814:5-815:234\">\n<li data-sourcepos=\"814:5-814:147\">あらかじめ参照する統合報告書が特定できているものについては、特定済みの統合報告書を使用します。</li>\n<li data-sourcepos=\"815:5-815:234\">参照する統合報告書が特定できていない場合はすべての統合報告書についてクエリとの類似度を算出し、もっともクエリとの類似度が高かった統合報告書を使用します。</li>\n</ul>\n <details>\n  <summary>統合報告書特定</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"819:6-851:8\"><div class=\"highlight\"><pre><code><span class=\"c1\"># データソースの指定(あらかじめ特定できていないクエリについては類似度の高いドキュメントを使用)\n</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n     <span class=\"n\">doc_num</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">query_array</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n <span class=\"k\">except</span><span class=\"p\">:</span>\n     <span class=\"n\">doc_num</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">)]</span>\n <span class=\"k\">if</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">doc_num</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"nb\">list</span><span class=\"p\">:</span>\n     <span class=\"c1\"># 最も類似度の高いドキュメントを特定する\n</span>     <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">#インデックス(ドキュメント番号)\n</span>     <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">#類似度\n</span>     <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">doc_num</span><span class=\"p\">:</span>\n         <span class=\"c1\"># 統合報告書のベクトルパス\n</span>         <span class=\"n\">tmp_folder</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">text_vec_dir</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">j</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n         <span class=\"c1\"># 類似度上位k個のチャンクの平均類似度をスコアとする\n</span>         <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n         <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">tmp_vec</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">chunk_vector</span><span class=\"p\">):</span>\n             <span class=\"c1\"># チャンクごとにクエリとの類似度を算出(コサイン類似度)\n</span>             <span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"nf\">cos_sim</span><span class=\"p\">(</span><span class=\"n\">tmp_vec</span><span class=\"p\">,</span> <span class=\"n\">query_vector</span><span class=\"p\">)</span>\n             <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"p\">])</span>\n         <span class=\"c1\"># DataFrameにして類似度順に並び替え、上からk行を抽出\n</span>         <span class=\"n\">df_sim</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">idx</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">sim</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n         <span class=\"n\">df_sim</span> <span class=\"o\">=</span> <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sim</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n         <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"nf\">reset_index</span><span class=\"p\">(</span><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n         <span class=\"n\">df_sim</span> <span class=\"o\">=</span> <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"n\">k</span><span class=\"p\">,:]</span>\n         <span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">df_sim</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">sim</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"n\">values</span><span class=\"p\">)</span>\n         <span class=\"c1\"># 最大値より大きければ更新\n</span>         <span class=\"k\">if</span> <span class=\"n\">sim</span> <span class=\"o\">&gt;</span> <span class=\"n\">score</span><span class=\"p\">:</span>\n             <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">sim</span>\n     <span class=\"n\">doc_num</span> <span class=\"o\">=</span> <span class=\"n\">idx</span>\n\n <span class=\"c1\"># 使用する統合報告書のベクトルが格納されているパス\n</span> <span class=\"n\">report_folder</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">text_vec_dir</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">doc_num</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n </details><br>\n</li>\n<li data-sourcepos=\"854:1-890:0\">\n<p data-sourcepos=\"854:4-854:46\"><strong>類似度の高いチャンクを抽出</strong></p>\n<ul data-sourcepos=\"855:5-856:132\">\n<li data-sourcepos=\"855:5-855:93\">ベクトル化したチャンクごとにクエリとの類似度を算出します。</li>\n<li data-sourcepos=\"856:5-856:132\">指定した数だけ類似度上位のチャンクを抽出し、クエリとともにプロンプトに埋め込みます。</li>\n</ul>\n <details>\n  <summary>チャンク抽出</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"860:6-888:8\"><div class=\"highlight\"><pre><code><span class=\"c1\"># 作成したチャンクのうちクエリとの関連性上位何個まで採用するか\n</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"c1\"># チャンクごとにベクトルを読み込む\n</span> <span class=\"n\">chunk_vector</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">report_folder</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vector.npy</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n\n <span class=\"c1\"># クエリとの類似度を算出して上位k個だけ残す\n</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">tmp_vec</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">chunk_vector</span><span class=\"p\">):</span>\n     <span class=\"c1\"># チャンクごとにクエリとの類似度を算出(コサイン類似度)\n</span>     <span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"nf\">cos_sim</span><span class=\"p\">(</span><span class=\"n\">tmp_vec</span><span class=\"p\">,</span> <span class=\"n\">query_vector</span><span class=\"p\">)</span>\n     <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"p\">])</span>\n <span class=\"c1\"># DataFrameにして類似度順に並び替え、上からk行を抽出\n</span> <span class=\"n\">df_sim</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">idx</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">sim</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n <span class=\"n\">df_sim</span> <span class=\"o\">=</span> <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sim</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"nf\">reset_index</span><span class=\"p\">(</span><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n <span class=\"n\">df_sim</span> <span class=\"o\">=</span> <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"n\">k</span><span class=\"p\">,:]</span>\n\n <span class=\"c1\"># 類似度上位として残ったチャンクを結合\n</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df_sim</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n     <span class=\"n\">chunk_idx</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">idx</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n     <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">report_folder</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">chunk_idx</span><span class=\"si\">}</span><span class=\"s\">.txt</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n         <span class=\"n\">chunk_text</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n     <span class=\"n\">text</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">chunk_text</span><span class=\"si\">}</span><span class=\"se\">\\n\\n</span><span class=\"sh\">'</span>\n \n <span class=\"c1\"># プロンプトテンプレートにクエリと参照チャンクを埋め込む\n</span> <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"n\">prompt_template</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div></div>\n </details><br>\n</li>\n<li data-sourcepos=\"891:1-905:0\">\n<p data-sourcepos=\"891:4-891:19\"><strong>回答生成</strong></p>\n<ul data-sourcepos=\"892:5-892:92\">\n<li data-sourcepos=\"892:5-892:92\">上記で作成したプロンプトを生成AIに与えて回答を生成します。</li>\n</ul>\n <details>\n  <summary>回答生成</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"896:6-903:8\"><div class=\"highlight\"><pre><code><span class=\"c1\"># 生成結果を格納する辞書\n</span> <span class=\"n\">ans_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"c1\"># 回答を生成して結果を辞書型変数に格納\n</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"nf\">get_response</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"n\">deployment_id</span><span class=\"o\">=</span><span class=\"n\">llm_deployment</span><span class=\"p\">,</span> <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">api_version</span><span class=\"o\">=</span><span class=\"n\">api_version</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"n\">endpoint</span><span class=\"p\">)</span>\n <span class=\"n\">ans_txt</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())[</span><span class=\"sh\">'</span><span class=\"s\">choices</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n <span class=\"n\">ans_dict</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans_txt</span>\n</code></pre></div></div>\n </details><br>\n</li>\n<li data-sourcepos=\"906:1-941:0\">\n<p data-sourcepos=\"906:4-906:19\"><strong>回答整形</strong></p>\n<ul data-sourcepos=\"907:5-915:9\">\n<li data-sourcepos=\"907:5-915:9\">それぞれの回答は以下の形式で出力されるため、「回答」部分を抽出します。\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"908:7-915:9\"><div class=\"highlight\"><pre><code><span class=\"sh\">'''</span><span class=\"s\">\n回答: xxxxx\n根拠となる本文: yyyyy\n確信度: oo\n確信根拠: zzzzz\n</span><span class=\"sh\">'''</span>\n</code></pre></div></div>\n</li>\n</ul>\n <details>\n  <summary>回答整形</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"919:6-939:8\"><div class=\"highlight\"><pre><code> <span class=\"n\">ans_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n <span class=\"k\">for</span> <span class=\"n\">query_idx</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"ow\">in</span> <span class=\"n\">ans_dict</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">わかりません</span><span class=\"sh\">'</span>\n     <span class=\"c1\"># 回答抽出\n</span>     <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span>\n     <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">回答</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">ans</span><span class=\"p\">:</span>\n         <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">ans</span><span class=\"p\">:</span>\n             <span class=\"n\">tmp_ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">：</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n         <span class=\"k\">else</span><span class=\"p\">:</span>\n             <span class=\"n\">tmp_ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\"> </span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">：</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n         <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">わかりません</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">tmp_ans</span><span class=\"p\">:</span>\n             <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tmp_ans</span>\n     <span class=\"k\">else</span><span class=\"p\">:</span>\n         <span class=\"k\">continue</span>\n     <span class=\"n\">ans_data</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"n\">query_idx</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">])</span>\n\n <span class=\"c1\"># データフレームに変換してcsv出力\n</span> <span class=\"n\">df_ans</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">ans_data</span><span class=\"p\">)</span>\n <span class=\"n\">df_ans</span><span class=\"p\">.</span><span class=\"nf\">to_csv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">xxx.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n </details>\n</li>\n</ol>\n<h1 data-sourcepos=\"942:1-942:35\">\n<span id=\"取組みから得られた知見\" class=\"fragment\"></span><a href=\"#%E5%8F%96%E7%B5%84%E3%81%BF%E3%81%8B%E3%82%89%E5%BE%97%E3%82%89%E3%82%8C%E3%81%9F%E7%9F%A5%E8%A6%8B\"><i class=\"fa fa-link\"></i></a>取組みから得られた知見</h1>\n<h2 data-sourcepos=\"943:1-943:24\">\n<span id=\"評価結果の分析\" class=\"fragment\"></span><a href=\"#%E8%A9%95%E4%BE%A1%E7%B5%90%E6%9E%9C%E3%81%AE%E5%88%86%E6%9E%90\"><i class=\"fa fa-link\"></i></a>評価結果の分析</h2>\n<p data-sourcepos=\"0:0-0:0\">アンサンブルを想定してRAG構築パターンを検証した結果のスコアは以下の通りです。</p>\n<table data-sourcepos=\"944:1-955:64\">\n<thead>\n<tr data-sourcepos=\"944:1-944:246\">\n<th data-sourcepos=\"944:117-944:116\"></th>\n<th data-sourcepos=\"944:118-944:120\">LLM</th>\n<th data-sourcepos=\"944:122-944:145\">テキスト抽出方法</th>\n<th data-sourcepos=\"944:147-944:160\">参照chunk数</th>\n<th data-sourcepos=\"944:162-944:180\">chunk size-over lap</th>\n<th data-sourcepos=\"944:182-944:190\">クエリ</th>\n<th data-sourcepos=\"944:192-944:219\">score(評価プログラム)</th>\n<th data-sourcepos=\"944:221-944:245\">score(提出暫定評価)</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"947:1-947:54\">\n<td data-sourcepos=\"947:2-947:14\">提出1回目</td>\n<td data-sourcepos=\"947:16-947:21\">GPT-4o</td>\n<td data-sourcepos=\"947:23-947:28\">AI-OCR</td>\n<td data-sourcepos=\"947:30-947:30\">-</td>\n<td data-sourcepos=\"947:32-947:39\">2000-500</td>\n<td data-sourcepos=\"947:41-947:46\">simple</td>\n<td data-sourcepos=\"947:48-947:48\">-</td>\n<td data-sourcepos=\"947:50-947:53\">0.28</td>\n</tr>\n<tr data-sourcepos=\"948:1-948:63\">\n<td data-sourcepos=\"948:2-948:14\">提出2回目</td>\n<td data-sourcepos=\"948:16-948:26\">GPT-4o mini</td>\n<td data-sourcepos=\"948:28-948:33\">AI-OCR</td>\n<td data-sourcepos=\"948:35-948:35\">-</td>\n<td data-sourcepos=\"948:37-948:44\">2000-500</td>\n<td data-sourcepos=\"948:46-948:51\">simple</td>\n<td data-sourcepos=\"948:53-948:57\">0.065</td>\n<td data-sourcepos=\"948:59-948:62\">0.08</td>\n</tr>\n<tr data-sourcepos=\"949:1-949:64\">\n<td data-sourcepos=\"949:2-949:14\">提出3回目</td>\n<td data-sourcepos=\"949:16-949:26\">GPT-4o mini</td>\n<td data-sourcepos=\"949:28-949:33\">AI-OCR</td>\n<td data-sourcepos=\"949:35-949:35\">-</td>\n<td data-sourcepos=\"949:37-949:42\">128-40</td>\n<td data-sourcepos=\"949:44-949:51\">ensemble</td>\n<td data-sourcepos=\"949:53-949:57\">-0.03</td>\n<td data-sourcepos=\"949:59-949:63\">-0.06</td>\n</tr>\n<tr data-sourcepos=\"950:1-950:64\">\n<td data-sourcepos=\"950:2-950:14\">提出4回目</td>\n<td data-sourcepos=\"950:16-950:26\">GPT-4o mini</td>\n<td data-sourcepos=\"950:28-950:37\">python-lib</td>\n<td data-sourcepos=\"950:39-950:39\">-</td>\n<td data-sourcepos=\"950:41-950:46\">128-40</td>\n<td data-sourcepos=\"950:48-950:53\">simple</td>\n<td data-sourcepos=\"950:55-950:58\">0.12</td>\n<td data-sourcepos=\"950:60-950:63\">0.07</td>\n</tr>\n<tr data-sourcepos=\"951:1-951:69\">\n<td data-sourcepos=\"951:2-951:14\">提出5回目</td>\n<td data-sourcepos=\"951:16-951:26\">GPT-4o mini</td>\n<td data-sourcepos=\"951:28-951:37\">python-lib</td>\n<td data-sourcepos=\"951:39-951:39\">-</td>\n<td data-sourcepos=\"951:41-951:48\">5000-500</td>\n<td data-sourcepos=\"951:50-951:55\">simple</td>\n<td data-sourcepos=\"951:57-951:62\">-0.175</td>\n<td data-sourcepos=\"951:64-951:68\">-0.19</td>\n</tr>\n<tr data-sourcepos=\"952:1-952:67\">\n<td data-sourcepos=\"952:2-952:14\">提出6回目</td>\n<td data-sourcepos=\"952:16-952:26\">GPT-4o mini</td>\n<td data-sourcepos=\"952:28-952:37\">python-lib</td>\n<td data-sourcepos=\"952:39-952:39\">-</td>\n<td data-sourcepos=\"952:41-952:48\">5000-500</td>\n<td data-sourcepos=\"952:50-952:55\">simple</td>\n<td data-sourcepos=\"952:57-952:60\">0.02</td>\n<td data-sourcepos=\"952:62-952:66\">-0.04</td>\n</tr>\n<tr data-sourcepos=\"953:1-953:67\">\n<td data-sourcepos=\"953:2-953:14\">提出7回目</td>\n<td data-sourcepos=\"953:16-953:26\">GPT-4o mini</td>\n<td data-sourcepos=\"953:28-953:37\">python-lib</td>\n<td data-sourcepos=\"953:39-953:39\">-</td>\n<td data-sourcepos=\"953:41-953:48\">5000-500</td>\n<td data-sourcepos=\"953:50-953:55\">simple</td>\n<td data-sourcepos=\"953:57-953:61\">0.145</td>\n<td data-sourcepos=\"953:63-953:66\">0.05</td>\n</tr>\n<tr data-sourcepos=\"954:1-954:62\">\n<td data-sourcepos=\"954:2-954:14\">提出8回目</td>\n<td data-sourcepos=\"954:16-954:21\">GPT-4o</td>\n<td data-sourcepos=\"954:23-954:32\">python-lib</td>\n<td data-sourcepos=\"954:34-954:35\">10</td>\n<td data-sourcepos=\"954:37-954:44\">2000-500</td>\n<td data-sourcepos=\"954:46-954:51\">simple</td>\n<td data-sourcepos=\"954:53-954:56\">0.34</td>\n<td data-sourcepos=\"954:58-954:61\">0.46</td>\n</tr>\n<tr data-sourcepos=\"955:1-955:64\">\n<td data-sourcepos=\"955:2-955:14\">提出9回目</td>\n<td data-sourcepos=\"955:16-955:22\">o1-mini</td>\n<td data-sourcepos=\"955:24-955:33\">python-lib</td>\n<td data-sourcepos=\"955:35-955:36\">10</td>\n<td data-sourcepos=\"955:38-955:45\">2000-500</td>\n<td data-sourcepos=\"955:47-955:52\">simple</td>\n<td data-sourcepos=\"955:54-955:58\">0.395</td>\n<td data-sourcepos=\"955:60-955:63\">0.52</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"957:1-957:27\">（評価結果の比較）</p>\n<ul data-sourcepos=\"958:1-962:0\">\n<li data-sourcepos=\"958:1-958:110\">テキスト抽出方法：AI-OCRよりもPythonライブラリ（pdf解析）を利用した方がよい。</li>\n<li data-sourcepos=\"959:1-959:239\">Chunking：今回のデータに関してはチャンクサイズ2,000、オーバーラップ500がベター。チャンクサイズ5,000は数回試したが、API制限がかかりやすく試行回数をあまり回せなかった。</li>\n<li data-sourcepos=\"960:1-960:174\">クエリ：類似質問での生成結果アンサンブルを試行したが、1週の生成に時間がかかりすぎる割には大して精度改善しなかった。</li>\n<li data-sourcepos=\"961:1-962:0\">LLM：o1-miniが最も正答率が高い。次いでGPT-4o。今回の検証段階ではLLMの影響が最も大きい。</li>\n</ul>\n<p data-sourcepos=\"963:1-964:141\">（質問カテゴリ別の正答率）<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F0a6720fa-55dc-438e-85f9-60640aae19a2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=12fcc34df840e4fc9e0bc30848c6db48\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F0a6720fa-55dc-438e-85f9-60640aae19a2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=12fcc34df840e4fc9e0bc30848c6db48\" alt=\"gragh_質問カテゴリ.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F0a6720fa-55dc-438e-85f9-60640aae19a2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=157f1e7c3ea2094e430ddd61bbcd26d0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/0a6720fa-55dc-438e-85f9-60640aae19a2.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"966:1-968:171\">評価用プログラムで採点した結果を質問カテゴリ別で集計したところ、知見共有会での共有でもあったように、難易度の低いとされる質問カテゴリ（左側ほど難易度低）ほど正答率は高い傾向となりました。<br>\n今回の問題は単純質問の問題が多い構成となっていたようなので、難しい加工やシステム構築をしなくてもある程度の正解は出せるのではないかと考えられます。<br>\nまた、集計質問や後処理が必要な質問は不正解が多いですがそれだけ正解も多いです。これについては原因の確認が必要です。</p>\n<p data-sourcepos=\"970:1-971:150\">（企業別の正答率）<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F303317d4-13e0-4759-9eee-60281b1db048.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8e3ba65b8c46d12042ec92618ac4df0\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F303317d4-13e0-4759-9eee-60281b1db048.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8e3ba65b8c46d12042ec92618ac4df0\" alt=\"gragh_企業（グループ化）.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F303317d4-13e0-4759-9eee-60281b1db048.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9efc085ce0d44e43bc10243d86c11a3d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/303317d4-13e0-4759-9eee-60281b1db048.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"973:1-974:243\">同様に、質問の参照元となる企業別に集計したところ、「Perfect」「Acceptable」が「Missing」「Incorrect」を上回る企業と下回る企業に2分される結果となりました。<br>\n単に、企業によって質問難易度が異なっているという見方もできますが、それ以外の観点としては、統合報告書の構成によってRAGとの相性が異なることを示唆すると考えられます。</p>\n<h3 data-sourcepos=\"976:1-976:31\">\n<span id=\"正解が多かった問題\" class=\"fragment\"></span><a href=\"#%E6%AD%A3%E8%A7%A3%E3%81%8C%E5%A4%9A%E3%81%8B%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>正解が多かった問題</h3>\n<p data-sourcepos=\"977:1-977:138\">正解が多かった問題の中で「集計質問」と「後処理が必要な質問」についていくつか確認してみます。</p>\n<h4 data-sourcepos=\"979:1-979:7\">\n<span id=\"q2\" class=\"fragment\"></span><a href=\"#q2\"><i class=\"fa fa-link\"></i></a>Q2</h4>\n<table data-sourcepos=\"980:1-985:18\">\n<thead>\n<tr data-sourcepos=\"980:1-980:3\">\n<th data-sourcepos=\"980:2-980:1\"></th>\n<th data-sourcepos=\"980:3-980:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"982:1-982:42\">\n<td data-sourcepos=\"982:2-982:19\">参照ファイル</td>\n<td data-sourcepos=\"982:21-982:41\">株式会社キッツ</td>\n</tr>\n<tr data-sourcepos=\"983:1-983:42\">\n<td data-sourcepos=\"983:2-983:13\">質問分類</td>\n<td data-sourcepos=\"983:15-983:41\">後処理が必要な質問</td>\n</tr>\n<tr data-sourcepos=\"984:1-984:33\">\n<td data-sourcepos=\"984:2-984:16\">参照ページ</td>\n<td data-sourcepos=\"984:18-984:32\">pdf 28ページ</td>\n</tr>\n<tr data-sourcepos=\"985:1-985:18\">\n<td data-sourcepos=\"985:2-985:11\">Perfect率</td>\n<td data-sourcepos=\"985:13-985:17\">91.7%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"987:1-987:225\">この問題は、参照ページに表で答えが記載されているため、計算の必要がなく「後処理が必要な質問」ではなく「単純質問」だったので、正答率が高かったようです。</p>\n<p data-sourcepos=\"989:1-989:136\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fb850e642-2d38-441f-92ae-5a954b2d3415.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=960a90a4d184cd52d62aa575379f0da2\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fb850e642-2d38-441f-92ae-5a954b2d3415.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=960a90a4d184cd52d62aa575379f0da2\" alt=\"個別_q2_キッツ.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fb850e642-2d38-441f-92ae-5a954b2d3415.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=226a95de16d2d24ddfab84eaad20d7b8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/b850e642-2d38-441f-92ae-5a954b2d3415.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"992:1-992:8\">\n<span id=\"q10\" class=\"fragment\"></span><a href=\"#q10\"><i class=\"fa fa-link\"></i></a>Q10</h4>\n<table data-sourcepos=\"993:1-998:18\">\n<thead>\n<tr data-sourcepos=\"993:1-993:3\">\n<th data-sourcepos=\"993:2-993:1\"></th>\n<th data-sourcepos=\"993:3-993:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"995:1-995:36\">\n<td data-sourcepos=\"995:2-995:19\">参照ファイル</td>\n<td data-sourcepos=\"995:21-995:35\">IHIグループ</td>\n</tr>\n<tr data-sourcepos=\"996:1-996:42\">\n<td data-sourcepos=\"996:2-996:13\">質問分類</td>\n<td data-sourcepos=\"996:15-996:41\">後処理が必要な質問</td>\n</tr>\n<tr data-sourcepos=\"997:1-997:33\">\n<td data-sourcepos=\"997:2-997:16\">参照ページ</td>\n<td data-sourcepos=\"997:18-997:32\">pdf 30ページ</td>\n</tr>\n<tr data-sourcepos=\"998:1-998:18\">\n<td data-sourcepos=\"998:2-998:11\">Perfect率</td>\n<td data-sourcepos=\"998:13-998:17\">91.7%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1000:1-1000:237\">この問題も、グラフの説明として文章で答えが記載されているため、計算の必要がなく「後処理が必要な質問」ではなく「単純質問」だったので、正答率が高かったようです。</p>\n<p data-sourcepos=\"1002:1-1002:131\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fdfa46e3b-300e-4b5d-9e42-a7be832a04c8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=edf5bfcbfb9746ba12616786843b91a4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fdfa46e3b-300e-4b5d-9e42-a7be832a04c8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=edf5bfcbfb9746ba12616786843b91a4\" alt=\"個別_q10_IHI.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fdfa46e3b-300e-4b5d-9e42-a7be832a04c8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ff7fad2d7ccb61903ab2daf604a32a03 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/dfa46e3b-300e-4b5d-9e42-a7be832a04c8.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"1005:1-1005:8\">\n<span id=\"q46\" class=\"fragment\"></span><a href=\"#q46\"><i class=\"fa fa-link\"></i></a>Q46</h4>\n<table data-sourcepos=\"1006:1-1011:18\">\n<thead>\n<tr data-sourcepos=\"1006:1-1006:3\">\n<th data-sourcepos=\"1006:2-1006:1\"></th>\n<th data-sourcepos=\"1006:3-1006:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1008:1-1008:60\">\n<td data-sourcepos=\"1008:2-1008:19\">参照ファイル</td>\n<td data-sourcepos=\"1008:21-1008:59\">株式会社モスフードサービス</td>\n</tr>\n<tr data-sourcepos=\"1009:1-1009:27\">\n<td data-sourcepos=\"1009:2-1009:13\">質問分類</td>\n<td data-sourcepos=\"1009:15-1009:26\">集計質問</td>\n</tr>\n<tr data-sourcepos=\"1010:1-1010:46\">\n<td data-sourcepos=\"1010:2-1010:16\">参照ページ</td>\n<td data-sourcepos=\"1010:18-1010:45\">pdf 6ページ、26ページ</td>\n</tr>\n<tr data-sourcepos=\"1011:1-1011:18\">\n<td data-sourcepos=\"1011:2-1011:11\">Perfect率</td>\n<td data-sourcepos=\"1011:13-1011:17\">79.2%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1013:1-1013:291\">この問題は、グラフの読み取りだと難しそうなものの、マップ内の国名との位置関係を正しく取得できれば、計算の必要がなく「後処理が必要な質問」ではなく「単純質問」だったので、正答率が高かったようです。</p>\n<p data-sourcepos=\"1015:1-1015:134\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F3bb16b16-acf2-49ed-bb2f-f82d75a2c108.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7224569b0d04d23feb31b10694c6df35\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F3bb16b16-acf2-49ed-bb2f-f82d75a2c108.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7224569b0d04d23feb31b10694c6df35\" alt=\"個別_q46_モス.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F3bb16b16-acf2-49ed-bb2f-f82d75a2c108.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1504cd957b78ac3d89efa4364955bba5 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/3bb16b16-acf2-49ed-bb2f-f82d75a2c108.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"1018:1-1018:360\">以上の例から、「集計質問」や「後処理が必要な質問」で正答率が高かった問題は、一見「集計質問」や「後処理が必要な質問」のような問題文でありながら、参照元に直接答えが載っている「単純質問」であったために正解が多かったのではないかと考えられます。</p>\n<h3 data-sourcepos=\"1020:1-1020:34\">\n<span id=\"不正解が多かった問題\" class=\"fragment\"></span><a href=\"#%E4%B8%8D%E6%AD%A3%E8%A7%A3%E3%81%8C%E5%A4%9A%E3%81%8B%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>不正解が多かった問題</h3>\n<p data-sourcepos=\"1021:1-1021:147\">次に不正解が多かった問題の中で「集計質問」と「後処理が必要な質問」についていくつか確認してみます。</p>\n<h4 data-sourcepos=\"1023:1-1023:7\">\n<span id=\"q5\" class=\"fragment\"></span><a href=\"#q5\"><i class=\"fa fa-link\"></i></a>Q5</h4>\n<table data-sourcepos=\"1024:1-1029:17\">\n<thead>\n<tr data-sourcepos=\"1024:1-1024:3\">\n<th data-sourcepos=\"1024:2-1024:1\"></th>\n<th data-sourcepos=\"1024:3-1024:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1026:1-1026:57\">\n<td data-sourcepos=\"1026:2-1026:19\">参照ファイル</td>\n<td data-sourcepos=\"1026:21-1026:56\">日清食品ホールディングス</td>\n</tr>\n<tr data-sourcepos=\"1027:1-1027:42\">\n<td data-sourcepos=\"1027:2-1027:13\">質問分類</td>\n<td data-sourcepos=\"1027:15-1027:41\">後処理が必要な質問</td>\n</tr>\n<tr data-sourcepos=\"1028:1-1028:33\">\n<td data-sourcepos=\"1028:2-1028:16\">参照ページ</td>\n<td data-sourcepos=\"1028:18-1028:32\">pdf 69ページ</td>\n</tr>\n<tr data-sourcepos=\"1029:1-1029:17\">\n<td data-sourcepos=\"1029:2-1029:11\">Perfect率</td>\n<td data-sourcepos=\"1029:13-1029:16\">0.0%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1031:1-1032:192\">この問題は、大半のパターンが「中国」と回答しました。参照すべき表の序盤行でセル結合があるためにうまく取得できなかったものと思料しています。<br>\nまた、この問題も「一人当たりの年間消費量」の記載はあるため、「後処理が必要な質問」ではなく「多段階質問」だったことがわかります。</p>\n<p data-sourcepos=\"1034:1-1034:133\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fd83877df-2d2b-497c-9cc0-7477317358b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cb118e148acb147d045857bb928be4be\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fd83877df-2d2b-497c-9cc0-7477317358b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cb118e148acb147d045857bb928be4be\" alt=\"個別_q5_日清.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fd83877df-2d2b-497c-9cc0-7477317358b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e2e318c94d95a058fd0f389efef58721 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/d83877df-2d2b-497c-9cc0-7477317358b4.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"1037:1-1037:8\">\n<span id=\"q29\" class=\"fragment\"></span><a href=\"#q29\"><i class=\"fa fa-link\"></i></a>Q29</h4>\n<table data-sourcepos=\"1038:1-1043:18\">\n<thead>\n<tr data-sourcepos=\"1038:1-1038:3\">\n<th data-sourcepos=\"1038:2-1038:1\"></th>\n<th data-sourcepos=\"1038:3-1038:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1040:1-1040:51\">\n<td data-sourcepos=\"1040:2-1040:19\">参照ファイル</td>\n<td data-sourcepos=\"1040:21-1040:50\">パナソニックグループ</td>\n</tr>\n<tr data-sourcepos=\"1041:1-1041:27\">\n<td data-sourcepos=\"1041:2-1041:13\">質問分類</td>\n<td data-sourcepos=\"1041:15-1041:26\">集計質問</td>\n</tr>\n<tr data-sourcepos=\"1042:1-1042:33\">\n<td data-sourcepos=\"1042:2-1042:16\">参照ページ</td>\n<td data-sourcepos=\"1042:18-1042:32\">pdf 42ページ</td>\n</tr>\n<tr data-sourcepos=\"1043:1-1043:18\">\n<td data-sourcepos=\"1043:2-1043:11\">Perfect率</td>\n<td data-sourcepos=\"1043:13-1043:17\">12.5%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1045:1-1045:281\">この問題は、大半のパターンが「39工場」と回答しました。文章で答えの記載がある「単純質問」であったものの直前単語に注釈があるせいで数値を誤認していることが不正解が多かった要因と考えられます。</p>\n<p data-sourcepos=\"1047:1-1047:146\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F910d43a3-27d7-493c-9d35-cb1085402dc6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4fcec7645c2bf4432cb3b4dfb2b8e4af\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F910d43a3-27d7-493c-9d35-cb1085402dc6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4fcec7645c2bf4432cb3b4dfb2b8e4af\" alt=\"個別_q29_パナソニック.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F910d43a3-27d7-493c-9d35-cb1085402dc6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d98dee9eb5f29bf10d6bd7680fe48a57 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/910d43a3-27d7-493c-9d35-cb1085402dc6.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"1050:1-1050:8\">\n<span id=\"q43\" class=\"fragment\"></span><a href=\"#q43\"><i class=\"fa fa-link\"></i></a>Q43</h4>\n<table data-sourcepos=\"1051:1-1056:17\">\n<thead>\n<tr data-sourcepos=\"1051:1-1051:3\">\n<th data-sourcepos=\"1051:2-1051:1\"></th>\n<th data-sourcepos=\"1051:3-1051:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1053:1-1053:36\">\n<td data-sourcepos=\"1053:2-1053:19\">参照ファイル</td>\n<td data-sourcepos=\"1053:21-1053:35\">日産自動車</td>\n</tr>\n<tr data-sourcepos=\"1054:1-1054:42\">\n<td data-sourcepos=\"1054:2-1054:13\">質問分類</td>\n<td data-sourcepos=\"1054:15-1054:41\">後処理が必要な質問</td>\n</tr>\n<tr data-sourcepos=\"1055:1-1055:33\">\n<td data-sourcepos=\"1055:2-1055:16\">参照ページ</td>\n<td data-sourcepos=\"1055:18-1055:32\">pdf 56ページ</td>\n</tr>\n<tr data-sourcepos=\"1056:1-1056:17\">\n<td data-sourcepos=\"1056:2-1056:11\">Perfect率</td>\n<td data-sourcepos=\"1056:13-1056:16\">0.0%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1058:1-1058:282\">この問題は、グラフ内の情報のみで読み取りから計算までが必要な「後処理が必要な質問」でした。このような問題を正答するには画像解析等のデータ加工段階でのさらなるアプローチが必要と考えられます。</p>\n<p data-sourcepos=\"1060:1-1060:134\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fb6ff741c-f237-45a1-be52-e8bf0c9620db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=82cab0e7d2069e8eb29baee107d506be\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fb6ff741c-f237-45a1-be52-e8bf0c9620db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=82cab0e7d2069e8eb29baee107d506be\" alt=\"個別_q43_日産.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fb6ff741c-f237-45a1-be52-e8bf0c9620db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=055ac36fbea42a047a4b3b60e48e5f85 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/b6ff741c-f237-45a1-be52-e8bf0c9620db.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"1063:1-1063:8\">\n<span id=\"q91\" class=\"fragment\"></span><a href=\"#q91\"><i class=\"fa fa-link\"></i></a>Q91</h4>\n<table data-sourcepos=\"1064:1-1069:17\">\n<thead>\n<tr data-sourcepos=\"1064:1-1064:3\">\n<th data-sourcepos=\"1064:2-1064:1\"></th>\n<th data-sourcepos=\"1064:3-1064:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1066:1-1066:42\">\n<td data-sourcepos=\"1066:2-1066:19\">参照ファイル</td>\n<td data-sourcepos=\"1066:21-1066:41\">カゴメ株式会社</td>\n</tr>\n<tr data-sourcepos=\"1067:1-1067:27\">\n<td data-sourcepos=\"1067:2-1067:13\">質問分類</td>\n<td data-sourcepos=\"1067:15-1067:26\">集計質問</td>\n</tr>\n<tr data-sourcepos=\"1068:1-1068:33\">\n<td data-sourcepos=\"1068:2-1068:16\">参照ページ</td>\n<td data-sourcepos=\"1068:18-1068:32\">pdf 45ページ</td>\n</tr>\n<tr data-sourcepos=\"1069:1-1069:17\">\n<td data-sourcepos=\"1069:2-1069:11\">Perfect率</td>\n<td data-sourcepos=\"1069:13-1069:16\">0.0%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1071:1-1071:191\">この問題は、大半のパターンが「17拠点」と回答しました。拠点名と拠点数を混ぜた記載のされ方を理解できなかったものと思料しています。</p>\n<p data-sourcepos=\"1073:1-1073:137\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fefce61d7-f151-4e0d-aa96-4be2738b1668.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f0924d21667c464b3934515fa001f9d2\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fefce61d7-f151-4e0d-aa96-4be2738b1668.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f0924d21667c464b3934515fa001f9d2\" alt=\"個別_q91_カゴメ.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fefce61d7-f151-4e0d-aa96-4be2738b1668.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=72aeaa1cad98259bcd44beabe4bd1b74 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/efce61d7-f151-4e0d-aa96-4be2738b1668.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"1076:1-1076:169\">ここからは、不正解が多かったものの、LLMをo1-miniを採用した暫定評価最高のものでは正答していた問題を確認しておきます。</p>\n<h4 data-sourcepos=\"1078:1-1078:7\">\n<span id=\"q1\" class=\"fragment\"></span><a href=\"#q1\"><i class=\"fa fa-link\"></i></a>Q1</h4>\n<table data-sourcepos=\"1079:1-1084:18\">\n<thead>\n<tr data-sourcepos=\"1079:1-1079:3\">\n<th data-sourcepos=\"1079:2-1079:1\"></th>\n<th data-sourcepos=\"1079:3-1079:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1081:1-1081:66\">\n<td data-sourcepos=\"1081:2-1081:19\">参照ファイル</td>\n<td data-sourcepos=\"1081:21-1081:65\">高松コンストラクショングループ</td>\n</tr>\n<tr data-sourcepos=\"1082:1-1082:42\">\n<td data-sourcepos=\"1082:2-1082:13\">質問分類</td>\n<td data-sourcepos=\"1082:15-1082:41\">後処理が必要な質問</td>\n</tr>\n<tr data-sourcepos=\"1083:1-1083:32\">\n<td data-sourcepos=\"1083:2-1083:16\">参照ページ</td>\n<td data-sourcepos=\"1083:18-1083:31\">pdf 9ページ</td>\n</tr>\n<tr data-sourcepos=\"1084:1-1084:18\">\n<td data-sourcepos=\"1084:2-1084:11\">Perfect率</td>\n<td data-sourcepos=\"1084:13-1084:17\">37.5%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1086:1-1086:377\">この問題は、表の読み取りから計算が必要な「後処理が必要な質問」ですが、不正解の大半は「1.19倍」と計算までは4o-miniでもできている可能性があります。チャンクサイズの調整や性能の良いLLMを使用することで四捨五入も含めて正答率をあげられていることが確認できました。</p>\n<p data-sourcepos=\"1088:1-1088:130\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F74d23b13-29f4-48bc-b627-2baeb9083a90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d32746032e524dfa838dd3d148cfe239\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F74d23b13-29f4-48bc-b627-2baeb9083a90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d32746032e524dfa838dd3d148cfe239\" alt=\"個別_q1_TCG.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2F74d23b13-29f4-48bc-b627-2baeb9083a90.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3e9204960463cf495681ea0cf1d6221b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/74d23b13-29f4-48bc-b627-2baeb9083a90.png\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"1091:1-1091:8\">\n<span id=\"q20\" class=\"fragment\"></span><a href=\"#q20\"><i class=\"fa fa-link\"></i></a>Q20</h4>\n<table data-sourcepos=\"1092:1-1097:17\">\n<thead>\n<tr data-sourcepos=\"1092:1-1092:3\">\n<th data-sourcepos=\"1092:2-1092:1\"></th>\n<th data-sourcepos=\"1092:3-1092:2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"1094:1-1094:48\">\n<td data-sourcepos=\"1094:2-1094:19\">参照ファイル</td>\n<td data-sourcepos=\"1094:21-1094:47\">ハウス食品グループ</td>\n</tr>\n<tr data-sourcepos=\"1095:1-1095:42\">\n<td data-sourcepos=\"1095:2-1095:13\">質問分類</td>\n<td data-sourcepos=\"1095:15-1095:41\">後処理が必要な質問</td>\n</tr>\n<tr data-sourcepos=\"1096:1-1096:33\">\n<td data-sourcepos=\"1096:2-1096:16\">参照ページ</td>\n<td data-sourcepos=\"1096:18-1096:32\">pdf 11ページ</td>\n</tr>\n<tr data-sourcepos=\"1097:1-1097:17\">\n<td data-sourcepos=\"1097:2-1097:11\">Perfect率</td>\n<td data-sourcepos=\"1097:13-1097:16\">9.1%</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"1099:1-1100:216\">この問題は、グラフの読み取りから比較が必要な「後処理が必要な質問」です。先ほどと異なりこちらについては、GPT-4oでも正答することができなかった問題でしたが、o1-miniでは正答できていました。つまり、グラフ内の数値情報でもLLMの性能によっては理解できる可能性はあるものの、Q43のようにそこから計算までは難しいかもしれないようです。<br>\n図からの情報取得が正しくできたのであれば、比較と計算はさして難易度が変わらない認識だったので、これについては今後のRAG検証で深堀したいところです。</p>\n<p data-sourcepos=\"1102:1-1102:137\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fa165d241-3e13-49c2-8ddc-9f5200ea6557.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=73d866036534d32778642b90b88f1625\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fa165d241-3e13-49c2-8ddc-9f5200ea6557.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=73d866036534d32778642b90b88f1625\" alt=\"個別_q20_ハウス.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3756676%2Fa165d241-3e13-49c2-8ddc-9f5200ea6557.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8d8d05edfd5899439a2621af031c9063 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/a165d241-3e13-49c2-8ddc-9f5200ea6557.png\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"1105:1-1105:52\">\n<span id=\"個別に問題を確認してわかったこと\" class=\"fragment\"></span><a href=\"#%E5%80%8B%E5%88%A5%E3%81%AB%E5%95%8F%E9%A1%8C%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>個別に問題を確認してわかったこと</h3>\n<h4 data-sourcepos=\"1106:1-1106:17\">\n<span id=\"質問分類\" class=\"fragment\"></span><a href=\"#%E8%B3%AA%E5%95%8F%E5%88%86%E9%A1%9E\"><i class=\"fa fa-link\"></i></a>質問分類</h4>\n<p data-sourcepos=\"1107:1-1107:450\">個別に問題を確認したところ、質問分類が間違っている問題が割とあることがわかりました。実際にRAGシステムを運用するのであれば、与えられた質問文で分類するのではなく、関連するデータに検索したときにどのような情報の記載のされ方がされているかを把握し、それに基づいて質問分類する仕組みを作る必要がありそうです。</p>\n<h4 data-sourcepos=\"1108:1-1108:20\">\n<span id=\"プロンプト\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>プロンプト</h4>\n<p data-sourcepos=\"1109:1-1109:279\">また、質問カテゴリ別のプロンプトについても、単に例題を場合分けしただけでしたが、質問に解答するためにどんな処理が必要かやプロンプトを分割して再考処理するようにすべきだったと考えられます。</p>\n<h4 data-sourcepos=\"1110:1-1110:29\">\n<span id=\"難易度の高い質問\" class=\"fragment\"></span><a href=\"#%E9%9B%A3%E6%98%93%E5%BA%A6%E3%81%AE%E9%AB%98%E3%81%84%E8%B3%AA%E5%95%8F\"><i class=\"fa fa-link\"></i></a>難易度の高い質問</h4>\n<p data-sourcepos=\"1111:1-1111:315\">上記で取り上げた例だと、特にグラフとそれに記載されたテキストを読み解いて答える問題に対するアプローチが取れていないことがわかりました。これに対しては今後のRAG検証で画像解析などの調査・検証を実施したいところです。</p>\n<h3 data-sourcepos=\"1113:1-1113:70\">\n<span id=\"その他ragシステム構築でうまくいかなかったこと\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96rag%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E7%AF%89%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%81%84%E3%81%8B%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>その他RAGシステム構築でうまくいかなかったこと</h3>\n<h4 data-sourcepos=\"1114:1-1114:23\">\n<span id=\"アンサンブル\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%B3%E3%82%B5%E3%83%B3%E3%83%96%E3%83%AB\"><i class=\"fa fa-link\"></i></a>アンサンブル</h4>\n<p data-sourcepos=\"1115:1-1115:207\">今回はアンサンブルを想定して取組みを行いましたが、結局のところアンサンブルしていない生成結果を採用する結果となりました。その理由としては、</p>\n<ul data-sourcepos=\"1116:1-1119:0\">\n<li data-sourcepos=\"1116:1-1116:129\">要約：要約によって検索したい詳細な情報が失われてしまい、回答が生成できない（Missing）。</li>\n<li data-sourcepos=\"1117:1-1117:123\">Embedding：アンサンブルにすると1週に必要な使用量が飛躍的に増加しすぐにAPI制限となる。</li>\n<li data-sourcepos=\"1118:1-1119:0\">クエリ：類似質問での生成結果アンサンブルを試行したが、1週の生成に時間がかかりすぎる割には大して精度改善しなかった。</li>\n</ul>\n<p data-sourcepos=\"1120:1-1120:27\">などがありました。</p>\n<h1 data-sourcepos=\"1122:1-1122:11\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n<p data-sourcepos=\"1123:1-1123:429\">目標スコアは「0.5」でしたが、暫定評価「0.52」、最終評価「0.28」と悔しい結果になった印象です。ただ、100問中の「Perfect」数は60問、「Acceptable」数は3問と過半数を正答しており、評価プログラムでのスコアが「0.395」であったことから、難易度の高くないデータに対しては一定の性能を認めても良いと考えています。</p>\n<p data-sourcepos=\"1125:1-1125:303\">ただ、統合報告書のような画像や図などを多く含むレイアウトが幅広いデータでも高い精度のシステムを構築している方々がいるわけなので、私たちも調査・検証を続けてよりよいRAGシステムの構築を目指したいと思います。</p>\n",
        "body": "こんにちは。\nSIGNATEの「第3回金融データ活用チャレンジ」に参加して取組んだ内容について、その結果と手法を解説します。\n取組みや記事作成は @SY122095 氏を含むチームメンバーと取組みました。\n\n# 取組結果概要\n|||\n|---|---|\n|チーム名|FXD|\n|暫定評価|0.52|\n|最終評価（順位）|0.28(161/1,544)|\n\n# RAGシステム構築方針\n私たちのチームでは、社員のRAGに関する知見を実践で蓄積すること目的として、本コンペティションに参加しました。\nこれにあたり、以前開催されていた「RAG-1グランプリ」の知見共有会で共有された知見をもとにRAG構築の方針を決定しました。\n\n|タスク|アプローチ|\n|---|---|\n|Store|テキスト抽出、要約処理、チャンキング、ベクトル化|\n|Retrieve|参照ファイル特定、ベクトル検索|\n|Augment|プロンプト構築（マークダウン記法）、質問の分類と質問カテゴリ別プロンプト構築、生成結果のアンサンブル|\n|Generate|パラメータチューニング、ハルシネーション対策|\n\n上記の方針に基づき、目標スコアを「0.5」として取組みを実施しました。\n\n# 実際に構築したRAGシステム\n### イメージ図\n##### （図1）RAGシステムイメージ図\n![RAGシステムイメージ図.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/27ad0510-06cc-4a06-bab1-a8799ebd8fc7.png)\n\nAzure OpenAI ServiceとAPI連携し、データの取得から生成結果の出力まで行えるPyhtonコードを構築しました。\n##### （図2）タスク別イメージ図\n![タスク別イメージ図.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/e27be200-e83f-45ff-a0b0-e0d5d58ab6a0.png)\n\n今回の取組みでは、各工程において複数パターンに分岐させて生成を行いその結果をアンサンブルすることが有力ではないかと考え、上図のようなパターン分岐により生成を行いました。\n\n## 設定・API連携\nRAGシステムの構築のベースは、Azure OpenAIとしました。\n\n（使用したAPI）\n1. コンペ提供\n    - endpoint :'https://apim-fdua-aoai-002.azure-api.net/model/'\n    - llm_deployment :'4omini'\n    - embed_deployment : 'embedding'\n    - api_version : '2024-10-21'\n    - api_key : '6bc29179dbd7808aee7d3e1ef50145a4'\n2. 社内契約\n    - 4o, o1-mini\n\n## テキスト抽出・並び替え\n今回の検索対象とするデータは上場企業の統合報告書ですべてPDFファイルです。そのため、PDFファイルからテキスト情報の抽出が必要となります。考えられるアプローチは大きく2つです。\n- AI-OCR : 「Azure Computer Vision」を使用します。\n- PDF解析 : Pythonライブラリの「PyMuPDF」や「pdfplumber」などを使用し、テキスト抽出、表のhtml出力などを行います。\n\n### AI-OCR\nAzurePortalにおいて画像認識可能なサービス(Azure Computer Vision)を用いてPDFファイルの文字起こしを行います。\n1. **使用サービス: Azure Computer Vision**\n\n2. **インプット**\n    - 統合報告書のPDFをそのまま入力します。<br>例: 株式会社4℃ホールディングス\n![pdf_sample.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/3218520a-7727-45a8-a061-5d6523b1d515.png)\n\n3. **アウトプット**\n    - ACVからは以下のようにJSONでページごとにテキストと記載位置(boundingBox)が格納されている辞書のリストが返されるため、Pythonで加工していきます。\n   <details>\n     <summary><span style='color:green'>ACV返り値</summary>\n\n      ```python\n      {'boundingBox': [3.7416,\n      10.5305,\n      3.9616,\n      10.5305,\n      3.9616,\n      10.7541,\n      3.7416,\n      10.7541],\n      'text': '笑',\n      'confidence': 1},\n      {'boundingBox': [3.9791,\n      10.5312,\n      4.2046,\n      10.5312,\n      4.2046,\n      10.7538,\n      3.9791,\n      10.7538],\n      'text': '顔',\n      'confidence': 1},\n      {'boundingBox': [4.223,\n      10.5394,\n      6.6824,\n      10.5394,\n      6.6824,\n      10.7444,\n      4.223,\n      10.7444],\n      'text': '”や“ときめき”のために',\n      'confidence': 1}]}\n      ```\n   </details>\n\n4. **テキスト作成**\n  - 返されたJSONを順に結合していくと以下のようにPDFの段組みが考慮されず文章として成り立たない箇所が多数出てきます。\n\n      \n     ```\n     4℃\n     holdings group\n     統合レポート\n     ４℃レポート2024\n     すべては、お客様の“笑顔”や“ときめき”のために\n     経営理念・ブランドコンセプト\n     ４℃ホールディングスグループの At a Glance\n     CorporatePhilosophy経営理念\n     業績（2024年2月期）\n     株主情報（2024年2月29日現在）\n     私達は、お客様に信頼される企業を目指します。\n     売上高\n     394.5億円\n     私達は、社員に夢を与える企業を目指します。\n     ```\n    <br>\n   \n  - ルールベースで折り返し地点を設定し、返り値を結合していくことで以下のように改善されました。\n\n\n       ```\n       株式会社４℃ホールディングス\n       CorporatePhilosophy経営理念\n       私達は、お客様に信頼される企業を目指します。\n       私達は、社員に夢を与える企業を目指します。\n       私達は、社会に貢献できる企業を目指します。\n       私達は、株主に期待される企業を目指します。\n       CorporateMessage コーポレートメッセージ\n       当グループは、4℃ブランドを中心とした\n       グローバルファッション創造企業として、お客様の一歩先のニーズに\n       応える、お客様の生活文化を向上させる企業であり続けます。\n       ```\n     <br>\n   \n  - また、図表部については以下のように表としての情報を保てていないためさらに改善が必要となります。<br>\n\n     \n       ```\n       4℃\n       2℃未満\n       シナリオ\n       シナリオ\n       大\n       中\n       炭素税の導入によるコストの増大\n       脱炭素・低炭素エネルギーの利用促進\n       開示業務の効率化\n       小\n       中\n       情報開示義務拡大への対応による業務負荷、コストの増大\n       商品のLCA（ライフサイクルアセスメント）評価義務化によ\n       新たな業務範囲の精査および業務の効率化・\n       -\n       中\n       るトレーサビリティの確保等必要な措置による業務負荷と\n       RJCの継続\n       コストの増大\n       ```\n       ![pdf_table_sample.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/24cfd1a2-57a8-459c-bd34-fad4796ba49b.png)\n\n\n<details>\n <summary>AI-OCRコード</summary>\n\n ```python\n    # エンドポイントとAPIキーを設定\n    endpoint = 'https://xxxx/'\n    api_key = 'xxxxxxxxxx'\n\n    # PDFファイルが格納されているディレクトリを指定\n    pdf_dir = './xxx/documents'\n\n    # PDFをひとつずつ文字起こししていく\n    for f in os.listdir(pdf_dir):\n        # PDFファイルのパスを指定\n        pdf_path = os.path.join(pdf_dir, f)\n        \n        # エンドポイントからOCRのURLを指定\n        ocr_url = f'{endpoint}vision/v3.2/read/analyze'\n\n        # PDFデータの読み込み\n        pdf_data = open(pdf_path, 'rb').read()\n\n        # パラメータの設定\n        headers = {\n            'Ocp-Apim-Subscription-Key': api_key,\n            'Content-Type': 'application/octet-stream'\n        }\n\n        # APIを呼び出す\n        response = requests.post(ocr_url, headers=headers, data=pdf_data)\n        \n        # 結果取得\n        operation_location = response.headers['Operation-Location']\n        analysis = {}\n        while not 'analyzeResult' in analysis:\n            response_final = requests.get(operation_location, headers={'Ocp-Apim-Subscription-Key': api_key})\n            analysis = response_final.json()\n        \n        # テキスト化(テキストとboundingBoxが返されるため、boundingBoxを参照して並び替える)\n        text = ''\n        # ページ数を取得してページごとに並び替え\n        length = len(response['analyzeResult']['readResults'])\n        for page in range(0, length):\n            # 対象ページのboundingBoxとテキストのみ抽出\n            content = response['analyzeResult']['readResults'][page]['lines']\n            content = [{'boundingBox': d['boundingBox'], 'text':d['text']} for d in content]\n\n            # 左端x座標で並び替え\n            l = [[i, c['boundingBox'][-2]] for i, c in enumerate(content)]\n            tmp = pd.DataFrame(data=l, columns=['index', 'x'])\n            tmp.sort_values('x', inplace=True)\n            content_xsorted = [content[int(v[0])] for v in tmp.values]\n\n            # どのくらいずれていれば違う段とみなすかの閾値を設定\n            x_threshold = 0.4\n            tmp['x_pre'] = tmp['x'].shift(1)\n            tmp['x_diff'] = np.abs(tmp['x']-tmp['x_pre'])\n            tmp['changepoint'] = tmp['x_diff'].apply(lambda x: x>x_threshold)\n            tmp['x_group'] = tmp['changepoint'].cumsum()\n\n            # 左端y座標で並び替え\n            l2 = [[i, c['boundingBox'][-1]] for i, c in enumerate(content)]\n            tmp2 = pd.DataFrame(data=l2, columns=['index', 'y'])\n            tmp2.sort_values('y', inplace=True, ascending=True)\n            content_xsorted = [content[int(v[0])] for v in tmp2.values]\n\n            # どのくらいずれていれば違う段とみなすかの閾値を設定\n            y_threshold = 0.2\n            tmp2['y_pre'] = tmp2['y'].shift(1)\n            tmp2['y_diff'] = np.abs(tmp2['y']-tmp2['y_pre'])\n            tmp2['changepoint'] = tmp2['y_diff'].apply(lambda y: y>y_threshold)\n            tmp2['y_group'] = tmp2['changepoint'].cumsum()\n\n            # ボックス作成\n            box_dict = {}\n            cnt = 1\n            for x in np.sort(tmp['x_group'].unique()):\n                tmp_x = tmp.loc[tmp['x_group']==x]\n                tmp_x = pd.merge(tmp_x, tmp2, on='index', how='left')\n                tmp_x.sort_values('y', inplace=True, ascending=True)\n                tmp_x['y_pre'] = tmp_x['y'].shift(1)\n                tmp_x['y_diff'] = np.abs(tmp_x['y']-tmp_x['y_pre'])\n                tmp_x['changepoint'] = tmp_x['y_diff'].apply(lambda y: y>y_threshold)\n                tmp_x['y_group'] = tmp_x['changepoint'].cumsum()\n                for y in np.sort(tmp_x['y_group'].unique()):\n                    tmp_xy = tmp_x.loc[tmp_x['y_group']==y]\n                    tmp_xy.sort_values('y', inplace=True, ascending=True)\n                    box_dict[cnt] = {}\n                    box_dict[cnt]['x_group'] = x\n                    box_dict[cnt]['y_group'] = y\n                    box_dict[cnt]['indice'] = list(tmp_xy['index'].values)\n                    box_dict[cnt]['df'] = tmp_xy\n                    cnt+=1\n\n            # テキスト作成\n            text += f'{page}ページ目\\n'\n            for k, v in box_dict.items():\n                for idx in v['indice']:\n                    tmp_txt = content[idx]['text']\n                    text += tmp_txt\n                    text += '\\n'\n            text += '\\n'\n        \n        # 保存\n        with open('保存先指定', 'w', encoding='utf-8') as f:\n            f.write(text)\n ```\n</details>\n\n### PDF解析\nページごとにPythonライブラリのPyMuPDFで文字起こしを実行後、PDFplumberで当該ページに記載されている表をpandas.DataFrame形式で取得してHTML形式に変換して文字起こし結果に結合します。\n\n1. **使用ツール**\n    - [PyMuPDF](https://pymupdf.readthedocs.io/ja/latest/ '公式ドキュメント')\n      - PDFドキュメントからデータ抽出、解析、変換、操作を行うためのPythonライブラリです。\n      - 今回は統合報告書中のテキスト抽出に用います。\n    - [PDFplumber](https://github.com/jsvine/pdfplumber?tab=readme-ov-file '公式ドキュメント')\n      - PDFドキュメントからテキストや画像を抽出するPythonライブラリです。\n      - PyMuPDFと比較して画像抽出の精度が高く、pandas.DataFrame型への変換が容易にできます。\n      - 今回は統合報告書中の図表抽出に用います。\n2. **インプット**\n  - ACVのときと同様、PDFファイルをそのまま入力します。\n3. **アウトプット**\n  - PyMuPDFによるテキスト抽出では以下のようになり、文章としては成立していますが、順序がバラバラになっている箇所が見受けられます。<br>\n\n       ```\n       水は自由奔放に、その姿を変えていきます。 \n       時には繊細な光を放つ雪の結晶のように、また時には大きなうねりとなって大海原へ。 \n       そして、岩や大地をも削り取る強い結束力さえもあります。\n       水は平凡どころか、すこぶる非凡であり、シンプルにしてきわめて強固。\n       それは、地球上のあらゆる生命に潤いをもたらせています。\n       「水のようでありたい」それが私たちのモノづくりの原点になっています。\n       「４℃」それは氷が張った水面の底の温度をあらわします。\n       唯一魚が生息できるいわば「安息の場」であり、\n       きびしい環境にあっての潤いそのものを意味します。\n       私たちは既存の価値に捉われることなく常に新しさと潤いをもたらす\n       商品の提案を続けています\n       1 \n         ４℃ホールディングスグループの \n       At a Glance\n       2 \n         トップメッセージ\n       価値創造ストーリー\n       ```\n    <br>\n  - PDFplumberによる図表抽出は以下のようになります。<br>「当社の対応方針」が抽出できていないなどの課題はありますが、表としての意味を保つため、これをHTMLコードに変換してテキストデータに埋め込みます。<br>\n\n    | 0    | 1            | 2                                                     | 3              | 4        | 5              |\n    |:-----|:-------------|:------------------------------------------------------|:---------------|:---------|:---------------|\n    | 区分 |              | 当社に可能性のある事項                                | 当社への影響度 |          | 当社の対応方針 |\n    |      |              |                                                       | 4℃             | 2℃未満   |                |\n    |      |              |                                                       | シナリオ       | シナリオ |                |\n    |      | 政策・       | 炭素税の導入によるコストの増大                        | 中             | 大       |                |\n    |      | 法規制       |                                                       |                |          |                |\n    |      | リスク       |                                                       |                |          |                |\n    |      |              | 情報開示義務拡大への対応による業務負荷、コストの増大  | 小             | 中       |                |\n    |      |              | 商品のLCA（ライフサイクルアセスメント）評価義務化によ | -              | 中       |                |\n    |      |              | るトレーサビリティの確保等必要な措置による業務負荷と  |                |          |                |\n    |      |              | コストの増大                                          |                |          |                |\n    |      |              | 省エネ化の推進が進まないことによるコストの高止まり    | 大             | -        |                |\n    |      | 市場リスク   | 素材調達、物流等経費の上昇による経費の増大と利益率    | 大             | 大       |                |\n    |      |              | の低下                                                |                |          |                |\n    |      | 評判リスク   | 消費者のサステナビリティ志向の変化による対応への遅れ  | 大             | 大       |                |\n    |      |              | と競争力の低下・競争機会の逸失                        |                |          |                |\n    |      |              | 環境への対応の遅れによるステークホルダーの評価・企業  | 中             | 大       |                |\n    |      |              | イメージの低下                                        |                |          |                |\n    |      | 急性リスク   | 台風や大雨により店舗が営業できないことによる売上減少  | 中             | 小       |                |\n    |      |              | リスク                                                |                |          |                |\n    |      |              | 物流プロセスの寸断による売上減少リスク                | 中             | 小       |                |\n    |      | 慢性リスク   | 冬物衣料の需要低下による売上減少のリスク              | 大             | 中       |                |\n    |      |              | 温暖化による金属アレルギー発症者の増加とジュエリー離  | 小             | 小       |                |\n    |      |              | れ                                                    |                |          |                |\n    |      | エネルギー源 | 将来コストの上昇が予想される化石燃料から低炭素エネル  | -              | 大       |                |\n    |      |              | ギーへの転換と省エネ化によるコスト及びGHG排出量の     |                |          |                |\n    |      |              | 削減                                                  |                |          |                |\n    |      | 製品サービス | 低・脱炭素社会対応型のサステナビリティ商品に対する顧  | 中             | 大       |                |\n    |      |              | 客の支持拡大                                          |                |          |                |\n    |      |              | 気温上昇に対応し夏物商品の売上拡大                    | 中             | 小       |                |\n    |      | レジリエンス | 低炭素経済に対応するサプライチェーンの構築による企業  | 中             | 大       |                |\n    |      |              | イメージの向上                                        |                |          |                |\n\n    <details>\n      <summary><span style='color:green'>HTMLコード</summary>\n\n      ```html\n      <table border=\"1\" class=\"dataframe\">\n        <thead>\n          <tr style=\"text-align: right;\">\n            <th>0</th>\n            <th>1</th>\n            <th>2</th>\n            <th>3</th>\n            <th>4</th>\n            <th>5</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>区分</td>\n            <td>None</td>\n            <td>当社に可能性のある事項</td>\n            <td>当社への影響度</td>\n            <td>None</td>\n            <td>当社の対応方針</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>None</td>\n            <td>4℃\\nシナリオ</td>\n            <td>2℃未満\\nシナリオ</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>政策・\\n法規制\\nリスク</td>\n            <td>炭素税の導入によるコストの増大</td>\n            <td>中</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>情報開示義務拡大への対応による業務負荷、コストの増大</td>\n            <td>小</td>\n            <td>中</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>商品のLCA（ライフサイクルアセスメント）評価義務化によ\\nるトレーサビリティの確保等必要な措置による業務負荷と\\nコストの増大</td>\n            <td>-</td>\n            <td>中</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>省エネ化の推進が進まないことによるコストの高止まり</td>\n            <td>大</td>\n            <td>-</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>市場リスク</td>\n            <td>素材調達、物流等経費の上昇による経費の増大と利益率\\nの低下</td>\n            <td>大</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>評判リスク</td>\n            <td>消費者のサステナビリティ志向の変化による対応への遅れ\\nと競争力の低下・競争機会の逸失</td>\n            <td>大</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>環境への対応の遅れによるステークホルダーの評価・企業\\nイメージの低下</td>\n            <td>中</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>急性リスク</td>\n            <td>台風や大雨により店舗が営業できないことによる売上減少\\nリスク</td>\n            <td>中</td>\n            <td>小</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>物流プロセスの寸断による売上減少リスク</td>\n            <td>中</td>\n            <td>小</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>慢性リスク</td>\n            <td>冬物衣料の需要低下による売上減少のリスク</td>\n            <td>大</td>\n            <td>中</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>温暖化による金属アレルギー発症者の増加とジュエリー離\\nれ</td>\n            <td>小</td>\n            <td>小</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>エネルギー源</td>\n            <td>将来コストの上昇が予想される化石燃料から低炭素エネル\\nギーへの転換と省エネ化によるコスト及びGHG排出量の\\n削減</td>\n            <td>-</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>製品サービス</td>\n            <td>低・脱炭素社会対応型のサステナビリティ商品に対する顧\\n客の支持拡大</td>\n            <td>中</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>None</td>\n            <td>気温上昇に対応し夏物商品の売上拡大</td>\n            <td>中</td>\n            <td>小</td>\n            <td>None</td>\n          </tr>\n          <tr>\n            <td>None</td>\n            <td>レジリエンス</td>\n            <td>低炭素経済に対応するサプライチェーンの構築による企業\\nイメージの向上</td>\n            <td>中</td>\n            <td>大</td>\n            <td>None</td>\n          </tr>\n        </tbody>\n      </table>\n      ```\n      \n    </details>\n\n\n```Python\n# PDFファイルが格納されているディレクトリを指定\npdf_dir = './xxx/documents'\n\n# PDFをひとつずつ文字起こししていく\nfor f in os.listdir(pdf_dir):\n    # PDFファイルのパスを指定\n    pdf_path = os.path.join(pdf_dir, f)\n\n    # テキストを格納する変数\n    text = ''\n\n    # ページごとに表を取得する\n    table_dict = {}\n    with pdfplumber.open(pdf_path) as pdf:\n        for i, page in enumerate(pdf.pages):\n            # データフレーム格納用リスト\n            table_dict[i] = []\n\n            # 表取得&追加\n            data = page.extract_table()\n            if data:\n                df_tmp = pd.DataFrame(data)\n                table_dict[i].append(df_tmp)\n    \n    # テキストを取得し、表があるページには上記で取得したDataFrameをHTMLに変換して埋め込む\n    doc = fitz.open(pdf_path)\n    for page in range(len(doc)):\n        tmp = doc[page].get_text()\n        text += f'統合報告書{page}ページ目\\n'\n        text += f'{tmp}\\n'\n        if len(table_dict[page]):\n            for table in table_dict[page]:\n                table_html = table.to_html(index=False)\n                text += f'{table_html}\\n\\n'\n    \n\n    # 保存\n    with open('保存先パス', 'w', encoding='utf-8') as f:\n        f.write(text)\n```\n\n## テキストの要約\nアンサンブルを想定し、テキストの要約パターンを考えました。\n|加工No.|加工パターン|文字数指定|\n|---|---|---|\n|1|原文のまま|なし|\n|2|全文要約|5万文字|\n|3|単元ごと要約|項目ごとに1万文字|\n|4|1ページずつ要約|ページごとに5000文字|\n|5|事業活動に着目した要約|事業ごとに3万文字|\n|6|財務情報に着目した要約|財務情報ごとに2万文字|\n|7|企業理念に着目した要約|3万文字|\n|8|人名に着目した要約|3万文字|\n|9|実績に着目した要約|3万文字|\n|10|計画に着目した要約|3万文字|\n|11|ESGに着目した要約|3万文字|\n|12|時期に着目した要約|3万文字|\n|13|地域に着目した要約|3万文字|\n|14|数値情報に着目した要約|3万文字|\n|15|前年度からの変化に着目した要約|3万文字|\n\n文字数については、統合報告書1つあたりの文字数が平均で約10万文字だったので、全文に対する要約はその3分の1である3万文字としました。\n\n## チャンキング・ベクトル化\n1. **パラメータ**\n    - テキスト分割に必要な以下のパラメータを設定します。\n      - chunk_size: テキストをどのくらいのサイズごとに分けるか。\n      - overlap: 隣接するチャンク間にどの程度共通の部分を持たせるか。\n2. **チャンキング**\n    - LangchainのTextSplitterを使用してテキストを分割します。<br>例: 株式会社4℃ホールディングス<br>\n      <details>\n        <summary><span style='color:green'>チャンキング結果</summary>\n        \n        ```python\n        ['統合報告書0ページ目\\n統合レポート\\n４℃ レポート 2024\\nすべては、お客様の“笑顔”や“ときめき”のために\\n統合報告書1ページ目\\n水は自由奔放に、その姿を変えていきます。 \\n時には繊細な光を放つ雪の結晶のように、また時には大きなう.....,\n        '.....',\n        '.....',\n        .....,\n        '.....',\n        '.....',\n        '<td>19,727</td>\\n    </tr>\\n    <tr>\\n      <td>販売費及び一般管理費（ 百万円）</td>\\n      <td>22,171</td>\\n      <td>21,804</td>\\n      <td>18,527</td>\\n      <td>17,884</td>\\n      <td>17,748</td>\\n    </tr>\\n    <tr>\\n      <td>営業利益（ 百万円）</td>\\n      <td>4,984</td>\\n      <td>3,975</td>\\n      <td>2,767</td>\\n      <td>1,788</td>\\n      <td>1,979</td>\\n    </tr>\\n    <tr>\\n      <td>経常利益（ 百万円）</td>\\n      <td>6,804</td>\\n      <td>4,312</td>\\n      <td>3,195</td>\\n      <td>2,293</td>\\n      <td>2,342</td>\\n    </tr>\\n    <tr>\\n      <td>親会社株主に帰属する当期純利益（ 百万円）</td>\\n      <td>2,440</td>\\n      <td>2,475</td>\\n      <td>1,622</td>\\n      <td>1,490</td>\\n      <td>1,149</td>\\n    </tr>\\n  </tbody>\\n</table>\\n統合報告書13ページ目\\n株式会社４℃ホールディングス\\n〒141-0021 東京都品川区上大崎2-19-10\\nTEL：03-5719-3429 FAX：03-5719-4462\\nhttps://yondoshi.co.jp/']\n       ```\n      </details><br>\n      \n3. **ベクトル化**\n    - AzureOpenAIのEmbeddingモデルを使用します。\n\n### 設定\nRAGに使用する各テキストをベクトル化するための設定をします。\nここでは、例としてチャンクサイズ2,000、オーバーラップ500としています。\n```Python\n# チャンク設定\nchunk_size = 1000\noverlap = 200\nchunk_type = 'standard'\nsource = 'python-lib'\n\n# テキスト分割インスタンス\ntext_splitter = CharacterTextSplitter(\n    separator='\\n',\n    chunk_size=chunk_size, \n    chunk_overlap=overlap\n    )\n\n# AOAI設定\nendpoint = 'https://xxxxx/'\napi_key = 'xxxxxyyyyyyzzzzzzz'\napi_version = '2024-03-01'\nembed_deployment = 'embeddings'\n\nclient = AzureOpenAI(\n  api_key = api_key,  \n  api_version = api_version,\n  azure_endpoint = endpoint\n)\n\n# 統合報告書のテキストファイルが格納されているディレクトリ\ntext_dir = ''\n\n# ベクトル化したファイルを保存するディレクトリ\nsave_dir = ''\n```\n### 参照ファイル（統合報告書）\n```Python\n# テキストファイルを一つずつベクトル化\nfor text_file in os.listdir(text_dir):\n\n    # テキストの読み込み\n    text_file = os.path.join(text_dir, text_file)\n    with open(text_file, 'r', encoding='utf-8') as f:\n        text = f.read()\n    \n    # 指定したチャンクサイズやオーバーラップをもとにテキストを分割\n    text_splitted = text_splitter.split_text(text)\n\n    # Embedding(ベクトル化)\n    res = client.embeddings.create(\n                input=text_splitted,\n                model=embed_deployment\n            )\n\n    # numpy.arrayに変換\n    vec = np.array([data.embedding for data in res.data], dtype=np.float32)\n\n    # 分割したテキストとベクトルを保存(ベクトルの列番号をテキストの保存ファイル名とする)\n    np.save(os.path.join(save_dir, 'vector'), vec)\n    for j, tmp_txt in enumerate(text_splitted):\n        with open(os.path.join(save_dir, f'{j}.txt'), 'w', encoding='utf-8') as f:\n            f.write(tmp_txt)\n```\n### クエリ\n参照ファイルの特定を類似度算出で行うため、クエリもベクトル化しておきます。\n```Python\n# クエリのcsvパスをpandasで読み込む\nquery_path = 'xxx.csv'\nquery_df = pd.read_csv(query_path)\n\n# 100問分のクエリをnumpy.ndarrayに変換\nquery_list = query_df['problem'].values.tolist()\n\n# Embedding(ベクトル化)\nres = client.embeddings.create(\n        input=query_list,\n        model=embed_deployment\n    )\n\n# numpy.ndarrayに変換して保存\nqueryvec = np.array([data.embedding for data in res.data], dtype=np.float32)\nnp.save(os.path.join(save_dir, 'query'), queryvec)\n```\n\n## クエリの分類・プロンプト構築\n知見共有会の総括で共有された質問分類にクエリを分類し、基本のプロンプトに加えて質問カテゴリ別にプロンプトを用意しました。\n\n#### 基本プロンプト\n```\n# 指示\n[# 質問]に対して[# 参照元]の情報のみで[# 出力項目]の内容を[# 出力形式]に沿って回答してください。\nこのとき、[# 注意事項]と[# 特記事項]にもしっかりと従ってください。\n\n# 出力項目\n・質問に対する回答を単語レベルで回答\n・回答の根拠となる本文の抜粋\n・回答に対する確信度（100点満点としたときの自己評価）\n・確信度に対する根拠\n\n# 出力形式\n回答：\n根拠となる本文：\n確信度：\n確信根拠：\n\n# 質問 \n{question}\n\n# 参照元 \n{context}\n\n# 注意事項\n・出力結果は改行しないでください。\n・出力項目の回答は各30文字以内としてください。\n・回答が見つからない場合は「わかりません」と回答してください。\n・Let’s think step by step.\n```\n\n#### 質問カテゴリ別プロンプト\n|カテゴリNo.|質問カテゴリ|分類別プロンプト|\n|---|---|---|\n|1|単純質問|# 特記事項<br> この[# 質問]は「単純質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> トヨタ自動車の社長は誰ですか。<br> ## 例題の回答<br> 佐藤 恒治|\n|2|比較質問|# 特記事項<br> この[# 質問]は「比較質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> 東都銀行の預金量は2021年と2022年でどちらが大きいですか。<br> ## 例題の回答例<br> 2021年|\n|3|条件付き質問|# 特記事項<br> この[# 質問]は「条件付き質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> ヤマトの2023年2月期の従業員数は何名ですか。<br> ## 例題の回答例<br> 3043名|\n|4|集計質問|# 特記事項<br> この[# 質問]は「集計質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題 大阪不動産の2022年と2024年の不動産売買部門の売り上げ合計はいくらですか。<br> ## 例題の回答例<br> 171億5721万円|\n|5|誤った前提の質問|# 特記事項<br> この[# 質問]は「誤った前提の質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題<br> マイクロソフトが提供するAIサービス「Gemini」は何年からサービスが開始されましたか。<br> ## 例題の回答例<br> 質問誤り|\n|6|多段階質問|# 特記事項<br> この[# 質問]は「多段階質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題1<br> アメイジングコンピューターの社員数は2020年度から2022年度にかけて何%増加しましたか。<br> ## 例題1の回答例<br> 17% ## 例題2<br> 2000年以降立川重工の退職者数が最大だった年は何年ですか。<br> ## 例題2の回答例<br> 2020年|\n|7|後処理が必要な質問|# 特記事項<br> この[# 質問]は「後処理が必要な質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題1<br> 東京自動社のアメリカ支社について、2021年から2024年までの3年間のガソリンの使用料はいくらになりますか。<br> ## 例題１の回答例<br> 3兆2000億円<br> ## 例題2<br> フルーツデリバリーの飲食部門の売上高は全体の何%ですか。小数点第一位以下を四捨五入して答えてください。<br> ## 例題2の回答例<br> 38%<br> ## 例題3<br> ハートシステムの2024年の営業部門の従業員数と経営企画部門の従業員数の差は何人ですか。<br> ## 例題3の回答例<br> 197人|\n|8|集合質問|# 特記事項<br> この[# 質問]は「集合質問」です。[## 例題]および[## 例題の回答例]の回答方法に倣って回答してください。<br> ## 例題1<br> 昭和株式会社の社長が挙げている強みを全て挙げてください。<br> ## 例題1の回答例<br> 豊富な人材育成プログラム、グローバル展開によるリスクヘッジ、独自技術の特許を多数保有している<br> ## 例題2<br> 益子ラーメンの海外拠点を全てあげてください。<br> ## 例題2の回答例<br> 上海支社、カリフォルニアブランチ、マダガスカル研究センター、ジャカルタセントラルキッチン<br> ## 例題3<br> 2023年度に立川マンション建設が増益となった要因の上位3点を挙げてください。<br> ## 例題3の回答例<br> 海外投資家からの売上が増加、資材不足の終息、Z世代におけるマンション需要の増加|\n\n質問カテゴリの分類は本来であれば、クエリを生成AIに与えることで分類させたかったのですが、RAGシステムの基本的な仕組みの構築やデータ加工にリソースを割きたかったので、クエリを目視で確認して分類しました。\n\n## 回答生成\n回答生成に使用する関数を定義します。\n<details>\n <summary><span style='color:green'>関数定義</span></summary>\n\n ```python\n    def get_response(prompt:str, api_key:str, deployment_id:str, endpoint:str,\n                    api_version:str='2024-02-15-preview',\n                    temperature:float=0.7,\n                    top_p:float=0.9,\n                    max_tokens:int=800):\n    '''Azureから直接生成結果を得る'''\n    # Configuration\n    headers = {\n        'Content-Type': 'application/json',\n        'api-key': api_key,\n    }\n\n    # Payload for the request\n    payload = {\n    'messages': [\n        {\n        'role': 'system',\n        'content': [\n            {\n            'type': 'text',\n            'text': prompt\n            }\n        ]\n        }\n    ],\n    'temperature': temperature,\n    'top_p': top_p,\n    'max_tokens': max_tokens\n    }\n\n    ENDPOINT = f'{endpoint}/openai/deployments/{deployment_id}/chat/completions?api-version={api_version}'\n\n    # Send request\n    try:\n        response = requests.post(ENDPOINT, headers=headers, json=payload)\n        response.raise_for_status()  # Will raise an HTTPError if the HTTP request returned an unsuccessful status code\n    except requests.RequestException as e:\n        raise SystemExit(f'Failed to make the request. Error: {e}')\n    return response\n\n    def cos_sim(a, b):\n    '''ベクトル間の類似度を測る'''\n    return np.dot(a, b)/(np.sqrt(np.dot(a, a))*np.sqrt(np.dot(b, b)))\n ```\n</details>\n\n100問それぞれのクエリに対して回答を生成していきます。\n\n1. **プロンプトテンプレート作成**\n    - カテゴリ別のプロンプトを共通部分に結合します。\n    <details>\n     <summary><span style='color:green'>プロンプトテンプレート作成</summary>\n\n     ```python\n      # 各種ベクトル格納先\n      query_vec_path = ''\n      text_vec_dir = ''\n      queryvec = np.load(query_vec_path)\n\n      # プロンプト作成に必要な情報を読み込み\n      query_dir = ''\n      query_type = pd.read_csv(os.path.join(query_dir, 'query_分類.csv'))\n      query_category = pd.read_csv(os.path.join(query_dir, '質問カテゴリ.csv'))\n      query_category_val = pd.read_csv(os.path.join(query_dir, '質問カテゴリ.csv'))\n      template_path = os.path.join(query_dir, 'プロンプト_共通部分.txt')\n      with open(template_path, 'r', encoding='utf-8') as f:\n          template = f.read()\n     \n      # クエリ情報読み込み\n      query_array = query_type.values[num]\n      q = query_array[0] #クエリテキスト\n      category_num = int(query_array[1]) #クエリタイプ\n      query_vector = queryvec[num] #クエリベクトル\n\n      # 該当するクエリタイプのプロンプトを読み込んでテンプレートに結合\n      prompt_type = query_category.loc[query_category['カテゴリNo.']==category_num].values[0][-1]\n      prompt_template = template + '/n' + prompt_type\n     ```\n    </details><br>\n\n2. **使用する統合報告書の特定**\n    - あらかじめ参照する統合報告書が特定できているものについては、特定済みの統合報告書を使用します。\n    - 参照する統合報告書が特定できていない場合はすべての統合報告書についてクエリとの類似度を算出し、もっともクエリとの類似度が高かった統合報告書を使用します。\n    <details>\n     <summary><span style='color:green'>統合報告書特定</summary>\n\n     ```python\n     # データソースの指定(あらかじめ特定できていないクエリについては類似度の高いドキュメントを使用)\n      try:\n          doc_num = int(query_array[2])\n      except:\n          doc_num = [j for j in range(1,20)]\n      if type(doc_num)==list:\n          # 最も類似度の高いドキュメントを特定する\n          idx = 0 #インデックス(ドキュメント番号)\n          score = 0 #類似度\n          for j in doc_num:\n              # 統合報告書のベクトルパス\n              tmp_folder = os.path.join(text_vec_dir, f'{j}/')\n              # 類似度上位k個のチャンクの平均類似度をスコアとする\n              data = []\n              for j, tmp_vec in enumerate(chunk_vector):\n                  # チャンクごとにクエリとの類似度を算出(コサイン類似度)\n                  sim = cos_sim(tmp_vec, query_vector)\n                  data.append([j, sim])\n              # DataFrameにして類似度順に並び替え、上からk行を抽出\n              df_sim = pd.DataFrame(data=data, columns=['idx','sim'])\n              df_sim = df_sim.sort_values('sim', ascending=False)\n              df_sim.reset_index(drop=True, inplace=True)\n              df_sim = df_sim.iloc[:k,:]\n              sim = np.mean(df_sim['sim'].values)\n              # 最大値より大きければ更新\n              if sim > score:\n                  idx, score = j, sim\n          doc_num = idx\n\n      # 使用する統合報告書のベクトルが格納されているパス\n      report_folder = os.path.join(text_vec_dir, f'{doc_num}/')\n     ```\n    </details><br>\n\n3. **類似度の高いチャンクを抽出**\n    - ベクトル化したチャンクごとにクエリとの類似度を算出します。\n    - 指定した数だけ類似度上位のチャンクを抽出し、クエリとともにプロンプトに埋め込みます。\n    <details>\n     <summary><span style='color:green'>チャンク抽出</summary>\n\n     ```python\n     # 作成したチャンクのうちクエリとの関連性上位何個まで採用するか\n      k = 10\n     # チャンクごとにベクトルを読み込む\n      chunk_vector = np.load(os.path.join(report_folder, 'vector.npy'))\n\n      # クエリとの類似度を算出して上位k個だけ残す\n      data = []\n      for j, tmp_vec in enumerate(chunk_vector):\n          # チャンクごとにクエリとの類似度を算出(コサイン類似度)\n          sim = cos_sim(tmp_vec, query_vector)\n          data.append([j, sim])\n      # DataFrameにして類似度順に並び替え、上からk行を抽出\n      df_sim = pd.DataFrame(data=data, columns=['idx','sim'])\n      df_sim = df_sim.sort_values('sim', ascending=False)\n      df_sim.reset_index(drop=True, inplace=True)\n      df_sim = df_sim.iloc[:k,:]\n\n      # 類似度上位として残ったチャンクを結合\n      text = ''\n      for _, row in df_sim.iterrows():\n          chunk_idx = int(row['idx'])\n          with open(os.path.join(report_folder, f'{chunk_idx}.txt'), 'r', encoding='utf-8') as f:\n              chunk_text = f.read()\n          text += f'{chunk_text}\\n\\n'\n      \n      # プロンプトテンプレートにクエリと参照チャンクを埋め込む\n      prompt = prompt_template.format(question=q,context=text)\n     ```\n    </details><br>\n\n4. **回答生成**\n    - 上記で作成したプロンプトを生成AIに与えて回答を生成します。\n    <details>\n     <summary><span style='color:green'>回答生成</summary>\n\n     ```python\n     # 生成結果を格納する辞書\n      ans_dict = {}\n     # 回答を生成して結果を辞書型変数に格納\n      res = get_response(prompt=prompt, api_key=api_key, deployment_id=llm_deployment, max_tokens=4*1000, api_version=api_version, endpoint=endpoint)\n      ans_txt = json.loads(res.json())['choices'][0]['message']['content']\n      ans_dict[num] = ans_txt\n     ```\n    </details><br>\n\n5. **回答整形**\n    - それぞれの回答は以下の形式で出力されるため、「回答」部分を抽出します。\n      ```python\n      '''\n      回答: xxxxx\n      根拠となる本文: yyyyy\n      確信度: oo\n      確信根拠: zzzzz\n      '''\n      ```\n    <details>\n     <summary><span style='color:green'>回答整形</summary>\n\n     ```python\n      ans_data = []\n      for query_idx, ans in ans_dict.items():\n          a = 'わかりません'\n          # 回答抽出\n          ans = ans\n          if '回答' in ans:\n              if '\\n' in ans:\n                  tmp_ans = ans.split('\\n')[0].split('：')[-1]\n              else:\n                  tmp_ans = ans.split(' ')[0].split('：')[-1]\n              if 'わかりません' not in tmp_ans:\n                  a = tmp_ans\n          else:\n              continue\n          ans_data.append([query_idx, a])\n\n      # データフレームに変換してcsv出力\n      df_ans = pd.DataFrame(ans_data)\n      df_ans.to_csv('xxx.csv', index=False, header=False, encoding='utf-8')\n     ```\n    </details>\n\n# 取組みから得られた知見\n## 評価結果の分析\nアンサンブルを想定してRAG構築パターンを検証した結果のスコアは以下の通りです。\n||LLM|テキスト抽出方法|参照chunk数|chunk size-over lap|クエリ|score(評価プログラム)|score(提出暫定評価)|\n|---|---|---|---|---|---|---|---|\n|提出1回目|GPT-4o|AI-OCR|-|2000-500|simple|-|0.28|\n|提出2回目|GPT-4o mini|AI-OCR|-|2000-500|simple|0.065|0.08|\n|提出3回目|GPT-4o mini|AI-OCR|-|128-40|ensemble|-0.03|-0.06|\n|提出4回目|GPT-4o mini|python-lib|-|128-40|simple|0.12|0.07|\n|提出5回目|GPT-4o mini|python-lib|-|5000-500|simple|-0.175|-0.19|\n|提出6回目|GPT-4o mini|python-lib|-|5000-500|simple|0.02|-0.04|\n|提出7回目|GPT-4o mini|python-lib|-|5000-500|simple|0.145|0.05|\n|提出8回目|GPT-4o|python-lib|10|2000-500|simple|0.34|0.46|\n|提出9回目|o1-mini|python-lib|10|2000-500|simple|0.395|0.52|\n\n（評価結果の比較）\n- テキスト抽出方法：AI-OCRよりもPythonライブラリ（pdf解析）を利用した方がよい。\n- Chunking：今回のデータに関してはチャンクサイズ2,000、オーバーラップ500がベター。チャンクサイズ5,000は数回試したが、API制限がかかりやすく試行回数をあまり回せなかった。\n- クエリ：類似質問での生成結果アンサンブルを試行したが、1週の生成に時間がかかりすぎる割には大して精度改善しなかった。\n- LLM：o1-miniが最も正答率が高い。次いでGPT-4o。今回の検証段階ではLLMの影響が最も大きい。\n\n（質問カテゴリ別の正答率）\n![gragh_質問カテゴリ.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/0a6720fa-55dc-438e-85f9-60640aae19a2.png)\n\n評価用プログラムで採点した結果を質問カテゴリ別で集計したところ、知見共有会での共有でもあったように、難易度の低いとされる質問カテゴリ（左側ほど難易度低）ほど正答率は高い傾向となりました。\n今回の問題は単純質問の問題が多い構成となっていたようなので、難しい加工やシステム構築をしなくてもある程度の正解は出せるのではないかと考えられます。\nまた、集計質問や後処理が必要な質問は不正解が多いですがそれだけ正解も多いです。これについては原因の確認が必要です。\n\n（企業別の正答率）\n![gragh_企業（グループ化）.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/303317d4-13e0-4759-9eee-60281b1db048.png)\n\n同様に、質問の参照元となる企業別に集計したところ、「Perfect」「Acceptable」が「Missing」「Incorrect」を上回る企業と下回る企業に2分される結果となりました。\n単に、企業によって質問難易度が異なっているという見方もできますが、それ以外の観点としては、統合報告書の構成によってRAGとの相性が異なることを示唆すると考えられます。\n\n### 正解が多かった問題\n正解が多かった問題の中で「集計質問」と「後処理が必要な質問」についていくつか確認してみます。\n\n#### Q2\n|||\n|---|---|\n|参照ファイル|株式会社キッツ|\n|質問分類|後処理が必要な質問|\n|参照ページ|pdf 28ページ|\n|Perfect率|91.7%|\n\nこの問題は、参照ページに表で答えが記載されているため、計算の必要がなく「後処理が必要な質問」ではなく「単純質問」だったので、正答率が高かったようです。\n\n![個別_q2_キッツ.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/b850e642-2d38-441f-92ae-5a954b2d3415.png)\n\n\n#### Q10\n|||\n|---|---|\n|参照ファイル|IHIグループ|\n|質問分類|後処理が必要な質問|\n|参照ページ|pdf 30ページ|\n|Perfect率|91.7%|\n\nこの問題も、グラフの説明として文章で答えが記載されているため、計算の必要がなく「後処理が必要な質問」ではなく「単純質問」だったので、正答率が高かったようです。\n\n![個別_q10_IHI.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/dfa46e3b-300e-4b5d-9e42-a7be832a04c8.png)\n\n\n#### Q46\n|||\n|---|---|\n|参照ファイル|株式会社モスフードサービス|\n|質問分類|集計質問|\n|参照ページ|pdf 6ページ、26ページ|\n|Perfect率|79.2%|\n\nこの問題は、グラフの読み取りだと難しそうなものの、マップ内の国名との位置関係を正しく取得できれば、計算の必要がなく「後処理が必要な質問」ではなく「単純質問」だったので、正答率が高かったようです。\n\n![個別_q46_モス.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/3bb16b16-acf2-49ed-bb2f-f82d75a2c108.png)\n\n\n以上の例から、「集計質問」や「後処理が必要な質問」で正答率が高かった問題は、一見「集計質問」や「後処理が必要な質問」のような問題文でありながら、参照元に直接答えが載っている「単純質問」であったために正解が多かったのではないかと考えられます。\n\n### 不正解が多かった問題\n次に不正解が多かった問題の中で「集計質問」と「後処理が必要な質問」についていくつか確認してみます。\n\n#### Q5\n|||\n|---|---|\n|参照ファイル|日清食品ホールディングス|\n|質問分類|後処理が必要な質問|\n|参照ページ|pdf 69ページ|\n|Perfect率|0.0%|\n\nこの問題は、大半のパターンが「中国」と回答しました。参照すべき表の序盤行でセル結合があるためにうまく取得できなかったものと思料しています。\nまた、この問題も「一人当たりの年間消費量」の記載はあるため、「後処理が必要な質問」ではなく「多段階質問」だったことがわかります。\n\n![個別_q5_日清.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/d83877df-2d2b-497c-9cc0-7477317358b4.png)\n\n\n#### Q29\n|||\n|---|---|\n|参照ファイル|パナソニックグループ|\n|質問分類|集計質問|\n|参照ページ|pdf 42ページ|\n|Perfect率|12.5%|\n\nこの問題は、大半のパターンが「39工場」と回答しました。文章で答えの記載がある「単純質問」であったものの直前単語に注釈があるせいで数値を誤認していることが不正解が多かった要因と考えられます。\n\n![個別_q29_パナソニック.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/910d43a3-27d7-493c-9d35-cb1085402dc6.png)\n\n\n#### Q43\n|||\n|---|---|\n|参照ファイル|日産自動車|\n|質問分類|後処理が必要な質問|\n|参照ページ|pdf 56ページ|\n|Perfect率|0.0%|\n\nこの問題は、グラフ内の情報のみで読み取りから計算までが必要な「後処理が必要な質問」でした。このような問題を正答するには画像解析等のデータ加工段階でのさらなるアプローチが必要と考えられます。\n\n![個別_q43_日産.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/b6ff741c-f237-45a1-be52-e8bf0c9620db.png)\n\n\n#### Q91\n|||\n|---|---|\n|参照ファイル|カゴメ株式会社|\n|質問分類|集計質問|\n|参照ページ|pdf 45ページ|\n|Perfect率|0.0%|\n\nこの問題は、大半のパターンが「17拠点」と回答しました。拠点名と拠点数を混ぜた記載のされ方を理解できなかったものと思料しています。\n\n![個別_q91_カゴメ.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/efce61d7-f151-4e0d-aa96-4be2738b1668.png)\n\n\nここからは、不正解が多かったものの、LLMをo1-miniを採用した暫定評価最高のものでは正答していた問題を確認しておきます。\n\n#### Q1\n|||\n|---|---|\n|参照ファイル|高松コンストラクショングループ|\n|質問分類|後処理が必要な質問|\n|参照ページ|pdf 9ページ|\n|Perfect率|37.5%|\n\nこの問題は、表の読み取りから計算が必要な「後処理が必要な質問」ですが、不正解の大半は「1.19倍」と計算までは4o-miniでもできている可能性があります。チャンクサイズの調整や性能の良いLLMを使用することで四捨五入も含めて正答率をあげられていることが確認できました。\n\n![個別_q1_TCG.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/74d23b13-29f4-48bc-b627-2baeb9083a90.png)\n\n\n#### Q20\n|||\n|---|---|\n|参照ファイル|ハウス食品グループ|\n|質問分類|後処理が必要な質問|\n|参照ページ|pdf 11ページ|\n|Perfect率|9.1%|\n\nこの問題は、グラフの読み取りから比較が必要な「後処理が必要な質問」です。先ほどと異なりこちらについては、GPT-4oでも正答することができなかった問題でしたが、o1-miniでは正答できていました。つまり、グラフ内の数値情報でもLLMの性能によっては理解できる可能性はあるものの、Q43のようにそこから計算までは難しいかもしれないようです。\n図からの情報取得が正しくできたのであれば、比較と計算はさして難易度が変わらない認識だったので、これについては今後のRAG検証で深堀したいところです。\n\n![個別_q20_ハウス.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3756676/a165d241-3e13-49c2-8ddc-9f5200ea6557.png)\n\n\n### 個別に問題を確認してわかったこと\n#### 質問分類\n個別に問題を確認したところ、質問分類が間違っている問題が割とあることがわかりました。実際にRAGシステムを運用するのであれば、与えられた質問文で分類するのではなく、関連するデータに検索したときにどのような情報の記載のされ方がされているかを把握し、それに基づいて質問分類する仕組みを作る必要がありそうです。\n#### プロンプト\nまた、質問カテゴリ別のプロンプトについても、単に例題を場合分けしただけでしたが、質問に解答するためにどんな処理が必要かやプロンプトを分割して再考処理するようにすべきだったと考えられます。\n#### 難易度の高い質問\n上記で取り上げた例だと、特にグラフとそれに記載されたテキストを読み解いて答える問題に対するアプローチが取れていないことがわかりました。これに対しては今後のRAG検証で画像解析などの調査・検証を実施したいところです。\n\n### その他RAGシステム構築でうまくいかなかったこと\n#### アンサンブル\n今回はアンサンブルを想定して取組みを行いましたが、結局のところアンサンブルしていない生成結果を採用する結果となりました。その理由としては、\n- 要約：要約によって検索したい詳細な情報が失われてしまい、回答が生成できない（Missing）。\n- Embedding：アンサンブルにすると1週に必要な使用量が飛躍的に増加しすぐにAPI制限となる。\n- クエリ：類似質問での生成結果アンサンブルを試行したが、1週の生成に時間がかかりすぎる割には大して精度改善しなかった。\n\nなどがありました。\n\n# まとめ\n目標スコアは「0.5」でしたが、暫定評価「0.52」、最終評価「0.28」と悔しい結果になった印象です。ただ、100問中の「Perfect」数は60問、「Acceptable」数は3問と過半数を正答しており、評価プログラムでのスコアが「0.395」であったことから、難易度の高くないデータに対しては一定の性能を認めても良いと考えています。\n\nただ、統合報告書のような画像や図などを多く含むレイアウトが幅広いデータでも高い精度のシステムを構築している方々がいるわけなので、私たちも調査・検証を続けてよりよいRAGシステムの構築を目指したいと思います。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-02-13T21:08:08+09:00",
        "group": null,
        "id": "149088d10ddd3f317a6c",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "rag",
            "versions": []
          },
          {
            "name": "SIGNATE",
            "versions": []
          },
          {
            "name": "生成AI",
            "versions": []
          },
          {
            "name": "AzureOpenAIService",
            "versions": []
          }
        ],
        "title": "第3回金融データ活用チャレンジへの取組み",
        "updated_at": "2025-06-03T15:06:41+09:00",
        "url": "https://qiita.com/kataashijushin/items/149088d10ddd3f317a6c",
        "user": {
          "description": "勉強がてら、データ分析してみます。",
          "facebook_id": "",
          "followees_count": 2,
          "followers_count": 1,
          "github_login_name": null,
          "id": "kataashijushin",
          "items_count": 2,
          "linkedin_id": "",
          "location": "",
          "name": "片脚 重心",
          "organization": "",
          "permanent_id": 3756676,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3756676/1339488aa9a9bcc618d880bc574e63c27087930b/large.png?1711459682",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.753129243850708,
        "quality_score": 19,
        "python_code_score": 4,
        "python_code_blocks": 14
      },
      {
        "rendered_body": "<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"3:1-3:18\">【前の記事】</p>\n<p data-sourcepos=\"5:1-5:56\"><iframe id=\"qiita-embed-content__e9788d48382506d81b9f1bf3221f37aa\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e9788d48382506d81b9f1bf3221f37aa\" data-content=\"https%3A%2F%2Fqiita.com%2Fshinya_2024%2Fitems%2Fcf8e89771e682b93a23f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<hr data-sourcepos=\"7:1-8:0\">\n<ul data-sourcepos=\"9:1-10:0\">\n<li data-sourcepos=\"9:1-10:0\"><strong>Molmo ( Multimodal Open Language Model ) モデル</strong></li>\n</ul>\n<p data-sourcepos=\"11:1-11:46\"><iframe id=\"qiita-embed-content__03523c331823e0228655e7b04ca056a6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__03523c331823e0228655e7b04ca056a6\" data-content=\"https%3A%2F%2Fhuggingface.co%2Fallenai%2FMolmo-7B-D-0924\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<ul data-sourcepos=\"13:1-14:0\">\n<li data-sourcepos=\"13:1-14:0\">Molmoモデル（量子化バージョン）</li>\n</ul>\n<p data-sourcepos=\"15:1-15:49\"><iframe id=\"qiita-embed-content__68ac04465e27ce9f49e682d79b47aa5a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__68ac04465e27ce9f49e682d79b47aa5a\" data-content=\"https%3A%2F%2Fhuggingface.co%2Fcyan2k%2Fmolmo-7B-D-bnb-4bit\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"17:1-17:62\"><iframe id=\"qiita-embed-content__f65761ae710cd49423b8ed3d5ce3195f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f65761ae710cd49423b8ed3d5ce3195f\" data-content=\"https%3A%2F%2Fgithub.com%2Fcyan2k%2Fmolmo-7b-bnb-4bit%3Ftab%3Dreadme-ov-file\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"22:1-22:53\">\n<span id=\"モデルのアーキテクチャ個別要素\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E5%80%8B%E5%88%A5%E8%A6%81%E7%B4%A0\"><i class=\"fa fa-link\"></i></a>モデルのアーキテクチャ（個別要素）</h1>\n<p data-sourcepos=\"23:1-23:603\">ここからモデルの内部を詳しく覗いていくつもりですが、ソースコードを一行一行順番に説明していたら流石にキリがありません。本稿では、一つの具体的なデータを用いて、そのデータがどのように処理されていくのかの流れを追うことで、内部の機構を見ていくことにします。あくまで、本稿の数字は例示したデータにおける数字です。データの次元など、入力データによって動的に変化しますので、勘違いなさならないようにしてください。</p>\n<h2 data-sourcepos=\"26:1-26:28\">\n<span id=\"前処理-pre-processor\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E5%87%A6%E7%90%86-pre-processor\"><i class=\"fa fa-link\"></i></a>前処理 (Pre-processor)</h2>\n<h3 data-sourcepos=\"27:1-27:46\">\n<span id=\"処理ロジックにいくつかの要点\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%81%AB%E3%81%84%E3%81%8F%E3%81%A4%E3%81%8B%E3%81%AE%E8%A6%81%E7%82%B9\"><i class=\"fa fa-link\"></i></a>処理ロジックにいくつかの要点</h3>\n<p data-sourcepos=\"28:1-28:585\">一番初めの「前処理」から見ていくのですが、正直、ここが一番理解しづらい部分かと思います。前処理では、後続のモデル内における処理を考えて前処理されるので、何故そのような前処理をしているのかといった部分が見えてこないからです。全体の流れをわかったうえで見ると、大した複雑性はありませんが、よくわからない状態で見ると逆にさっぱりわからないということになるでしょう（どんな勉強も大抵そうですが…）。</p>\n<p data-sourcepos=\"30:1-30:222\">種明かしからするみたく、天下り的な順序での説明になってしまいますが、実際の処理データや実装を見る前に以下の部分については簡単に理解しておきましょう。</p>\n<h4 data-sourcepos=\"37:1-37:77\">\n<span id=\"クロップ分割-crop-とパッチ分割-patches-の違い\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%83%E3%83%97%E5%88%86%E5%89%B2-crop-%E3%81%A8%E3%83%91%E3%83%83%E3%83%81%E5%88%86%E5%89%B2-patches-%E3%81%AE%E9%81%95%E3%81%84\"><i class=\"fa fa-link\"></i></a>クロップ分割（ crop ）とパッチ分割（ patches ）の違い</h4>\n<p data-sourcepos=\"38:1-38:881\">モデルアーキテクチャを表す図をみてもわかるように、まず画像は格子状に分割されます。この分割を「クロップ」といいます。各クロップは独立して ViT に入力され、それぞれ個別に処理されます。このクロップは ViT に入力されるとき、実際にはさらに細かく分割されて ViT に入力されます。この分割のことを「パッチ」といいます。クロップの重なり部分のパッチ特徴量はコネクタや LLM へは渡さず、渡されるパッチ特徴が高解像度画像（元の画像）を正確にタイルするようにしています。重なりによりタイル状画像の解像度は若干低下しますが、より多くのクロップを使用することでその影響を補うことができ、重なりは結果を大幅に改善します。</p>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F146ed8ff-bcfb-4e2d-9519-5331191f9c91.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3a91ede6b8b9f5f095f36a07ea934cd4\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"450\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F146ed8ff-bcfb-4e2d-9519-5331191f9c91.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3a91ede6b8b9f5f095f36a07ea934cd4\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F146ed8ff-bcfb-4e2d-9519-5331191f9c91.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d95f3c7ea23f429efe402afcc0067175 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/146ed8ff-bcfb-4e2d-9519-5331191f9c91.png\" loading=\"lazy\"></a>\n<h4 data-sourcepos=\"49:1-49:41\">\n<span id=\"クロップの分割数の決め方\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%83%E3%83%97%E3%81%AE%E5%88%86%E5%89%B2%E6%95%B0%E3%81%AE%E6%B1%BA%E3%82%81%E6%96%B9\"><i class=\"fa fa-link\"></i></a>クロップの分割数の決め方</h4>\n<p data-sourcepos=\"50:1-51:1186\">今回の例の場合だとクロップの分割は「3×3」となりますが、クロップの分割はいつも一定の分割数でしょうか？答えはノーです。ではこれは一体どの様なロジックでこの分割数になっているのでしょうか？<br>\nクロップ数は固定ではなく、入力画像に合わせて動的に決定されます。具体的には、<code>image_preprocessing_molmo.py/select_tiling()</code> 関数が、画像のリサイズ（アップスケーリングまたはダウンスケーリング）の必要性を最小限に抑えながら、指定されたクロップサイズと最大クロップ数の制約内で画像を分割する最適なグリッド構成をルールベースに決定します。Vision Transformer（ViT）の多くは固定サイズの正方形画像しか処理できないため、グリッド内の各正方形がViT の入力サイズと一致するように画像を複数のクロップに分割し、それぞれを高解像度で処理することで、OCR や詳細なキャプショニングなどに必要な細かい情報を保持します。今回のように、各クロップ画像のサイズが 336×336 ピクセルで、1 枚のクロップを 14×14 ピクセルのパッチに分割する場合、各クロップは 24×24 個（合計576個）のパッチに分割されます。なお、以下は事前に config で定めているハイパーパラメータです。</p>\n<ul data-sourcepos=\"52:1-54:0\">\n<li data-sourcepos=\"52:1-52:38\">クロップの一辺の長さ : 336</li>\n<li data-sourcepos=\"53:1-54:0\">パッチの一辺の長さ : 14</li>\n</ul>\n<p data-sourcepos=\"55:1-55:199\">パッチ分割自体は動的に変化する要素はなく、ViT の入力サイズとパッチサイズは固定であるため、クロップのように複雑な処理を必要としません。</p>\n<details><summary>コード全文 ( select_tiling() )</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"60:1-89:3\">\n<div class=\"code-lang\"><span class=\"bold\">image_preprocessing_molmo.py/select_tiling()</span></div>\n<div class=\"highlight\"><pre><code>\n<span class=\"k\">def</span> <span class=\"nf\">select_tiling</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">patch_size</span><span class=\"p\">,</span> <span class=\"n\">max_num_patches</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Decide how best to divide in image of size [w, h] in up to max_num_patches of size patch_size</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">original_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">stack</span><span class=\"p\">([</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">])</span>  <span class=\"c1\"># [1, 2]\n</span>    <span class=\"n\">original_res</span> <span class=\"o\">=</span> <span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"n\">w</span>\n    <span class=\"n\">tilings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_num_patches</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_num_patches</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">max_num_patches</span><span class=\"p\">:</span>\n                <span class=\"n\">tilings</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">))</span>\n    <span class=\"c1\"># sort so argmin and argmax favour smaller tilings in the event of a tie\n</span>    <span class=\"n\">tilings</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n    <span class=\"n\">candidate_tilings</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">tilings</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>  <span class=\"c1\"># [n_resolutions, 2]\n</span>    <span class=\"n\">candidate_resolutions</span> <span class=\"o\">=</span> <span class=\"n\">candidate_tilings</span> <span class=\"o\">*</span> <span class=\"n\">patch_size</span>  <span class=\"c1\"># [n_resolutions, 2]\n</span>\n    <span class=\"c1\"># How much we would need to scale the image to fit exactly in each tiling\n</span>    <span class=\"n\">original_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">stack</span><span class=\"p\">([</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>  <span class=\"c1\"># [1, 2]\n</span>    <span class=\"n\">required_scale_d</span> <span class=\"o\">=</span> <span class=\"n\">candidate_resolutions</span><span class=\"p\">.</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">original_size</span>\n    <span class=\"n\">required_scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">required_scale_d</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [n_resolutions, 1]\n</span>    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">(</span><span class=\"n\">required_scale</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We are forced to downscale, so try to minimize the amount of downscaling\n</span>        <span class=\"n\">ix</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">(</span><span class=\"n\">required_scale</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Pick the resolution that required the least upscaling so that it most closely fits the image\n</span>        <span class=\"n\">required_scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"n\">required_scale</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">10e9</span><span class=\"p\">,</span> <span class=\"n\">required_scale</span><span class=\"p\">)</span>\n        <span class=\"n\">ix</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">argmin</span><span class=\"p\">(</span><span class=\"n\">required_scale</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">candidate_tilings</span><span class=\"p\">[</span><span class=\"n\">ix</span><span class=\"p\">]</span>\n    \n</code></pre></div>\n</div>\n</details>\n<h3 data-sourcepos=\"102:1-102:22\">\n<span id=\"前処理データ\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E5%87%A6%E7%90%86%E3%83%87%E3%83%BC%E3%82%BF\"><i class=\"fa fa-link\"></i></a>前処理データ</h3>\n<p data-sourcepos=\"103:1-103:96\">ここから、具体的なデータの中身について迫っていきたいと思います。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"105:1-117:3\">\n<div class=\"code-lang\"><span class=\"bold\">Colab</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># 【1】\n# load the processor ←（前処理用オブジェクトのインスタンス化）\n</span><span class=\"n\">processor</span> <span class=\"o\">=</span> <span class=\"n\">AutoProcessor</span><span class=\"p\">.</span><span class=\"nf\">from_pretrained</span><span class=\"p\">(</span><span class=\"n\">repo_name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 【1】\n# load image and prompt ←（前処理）\n</span><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"n\">processor</span><span class=\"p\">.</span><span class=\"nf\">process</span><span class=\"p\">(</span>\n    <span class=\"n\">images</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">img/lucy.jpg</span><span class=\"sh\">\"</span><span class=\"p\">)],</span>\n    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Describe this image.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">).</span><span class=\"nf\">unsqueeze</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">inputs</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">()}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"119:1-119:406\"><code>processor</code>オブジェクトのクラスを調べると以下のようになっています。全体像のパートにおけるクラス同士の関係を見てもわかるように、<code>preprocessing_molmo.py</code> が <code>image_preprocessing_molmo.py</code> を呼び出して使っており、前処理のメインのロジックはほとんど <code>image_preprocessing_molmo.py</code> 側で実装されているようです。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"121:1-125:15\"><div class=\"highlight\"><pre><code>クラス名: MolmoProcessor\nモジュール名: transformers_modules.cyan2k.molmo-7B-D-bnb-4bit.51097c4251a023d72485963c1ab69f3b6d6a1ec6.preprocessing_molmo\nクラス定義ファイル: /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/preprocessing_molmo.py\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"126:1-130:3\"><div class=\"highlight\"><pre><code>■ 前処理に関係するファイル\n・image_preprocessing_molmo.py\n・preprocessing_molmo.py\n</code></pre></div></div>\n<p data-sourcepos=\"133:1-134:305\">さて、次は実際の「 <strong>元データ（前処理前データ）</strong> 」と「 <strong>前処理後データ</strong> 」を見ていきます。<br>\n元データ（前処理前データ）のデータ形式は「JPEG」と「テキスト」です。前処理後データは <code>inputs</code> オブジェクトに格納されていますが、この時点ではどの様なデータになっているでしょうか？それぞれデータを調べてみます。</p>\n<p data-sourcepos=\"136:1-137:48\">まずは、<strong>元データ（前処理前データ）</strong> です。<code>processor.process()</code> の引数部分を見てください。<br>\n特に変わった部分はなさそうです。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"139:1-146:3\">\n<div class=\"code-lang\"><span class=\"bold\">元データ（前処理前データ）</span></div>\n<div class=\"highlight\"><pre><code>・images\n ‐ 画像フォーマット: JPEG\n ‐ カラーモード: RGB\n ‐ 幅x高さ: <span class=\"o\">(</span>1536, 1536<span class=\"o\">)</span>\n・text\n - <span class=\"s2\">\"Describe this image.\"</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"148:1-149:132\">・<code>images</code> の画像<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fdc5cb00c-4f4e-4cf5-ba5d-3654184de50d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a336388fecf5ece7c1242bd5daebf37b\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"350\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fdc5cb00c-4f4e-4cf5-ba5d-3654184de50d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a336388fecf5ece7c1242bd5daebf37b\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fdc5cb00c-4f4e-4cf5-ba5d-3654184de50d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=19c3103c34fbfd18af091ca47641211c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/dc5cb00c-4f4e-4cf5-ba5d-3654184de50d.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"152:1-153:387\">次にこちらが <strong>前処理後データ</strong> （ <code>inputs</code> オブジェクト）です。<br>\n<code>inputs</code> は4つのデータを内包する dict で、中身は全て tensor 形式のオブジェクトであり、次元等は以下のようになっています。これを見ただけではまだ、各データが何を表しているのかさっぱりわからないと思います。このあと、各データについて説明を付けたので、続きをご覧ください。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"155:1-160:3\">\n<div class=\"code-lang\"><span class=\"bold\">前処理後データ（ inputs オブジェクト）の中身</span></div>\n<div class=\"highlight\"><pre><code>key: input_ids       | shape: torch.Size<span class=\"o\">([</span>981]<span class=\"o\">)</span>            | Dtype: torch.int64\nkey: images          | shape: torch.Size<span class=\"o\">([</span>10, 576, 588]<span class=\"o\">)</span>   | Dtype: torch.float32\nkey: image_input_idx | shape: torch.Size<span class=\"o\">([</span>10, 144]<span class=\"o\">)</span>        | Dtype: torch.int32\nkey: image_masks     | shape: torch.Size<span class=\"o\">([</span>10, 576]<span class=\"o\">)</span>        | Dtype: torch.float32\n</code></pre></div>\n</div>\n<ul data-sourcepos=\"162:1-163:976\">\n<li data-sourcepos=\"162:1-163:976\">\n<code>input_ids [981]</code><br>\n最終的に LLM に入力する際のデータの雛形として、画像もテキストも一次元化して並べる形式になっています。下記画像では「152066」が黄色で着色されており、ここにはパッチ特徴量が格納される予定です。実際にはほとんどが画像特徴用に予約されており、ところどころにある非着色の部分は画像の始まりや改行を表す特殊トークンが予約されています。末端の要素は単語 ID になっており、まだ埋め込み前なので単語ごとに ID が付与された状態です。このデータ自体はあくまで一次元ですが、後続のモデル内処理において特徴量用の次元が拡張され、そこに実際の特徴量が格納されます。Model 側のコードではこの配列が変数 x に相当し、ここをベースにあとでテキストと画像の両方の特徴量を埋めていくことになります。</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fb4524476-517d-4ba6-9555-35eff66db281.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ba809c498aea8fad5daced4fe62d8662\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"550\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fb4524476-517d-4ba6-9555-35eff66db281.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ba809c498aea8fad5daced4fe62d8662\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fb4524476-517d-4ba6-9555-35eff66db281.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6f90e29e939ccb6968230e5ca495e4d1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/b4524476-517d-4ba6-9555-35eff66db281.png\" loading=\"lazy\"></a>\n<ul data-sourcepos=\"166:1-178:0\">\n<li data-sourcepos=\"166:1-171:0\">\n<p data-sourcepos=\"166:3-170:188\"><code>images [10, 576, 588]</code><br>\nクロップした画像情報そのもので、グローバルクロップとローカルクロップを合わせて計10枚の元データを表します。<br>\n1クロップに対し、パッチ数は <strong>576</strong> 枚 ( $\\left(\\frac{\\text{crop_size}}{\\text{patch_size}}\\right)^2  =\\ \\left(\\frac{336}{14}\\right)^2 =\\  24^2$ ) 、<br>\n1パッチに対し、ピクセル数は <strong>588</strong>（ $ \\text{patch_size}^2 \\times \\text{channel} =\\  14^2 \\times 3$ ）です。<br>\nこの <code>images</code> は、後続の Vision Transformer（OpenAI CLIP）に入力されて特徴ベクトルへと埋め込まれたうえで、最終的に <code>input_ids</code> に収められます。</p>\n</li>\n<li data-sourcepos=\"172:1-174:0\">\n<p data-sourcepos=\"172:3-173:303\"><code>image_input_idx [10, 144]</code><br>\n画像パッチの番地を示す配列で、プーリング後や特殊トークンを考慮した形になっています。これはクロップ間の重複部分を表すデータでもあり、各パッチ特徴量がどこに格納されるかを示す番地のような役割を果たします。</p>\n</li>\n<li data-sourcepos=\"175:1-178:0\">\n<p data-sourcepos=\"175:3-176:279\"><code>image_masks [10, 576]</code><br>\n画像領域とパディングされた非画像領域を区別するための配列です。今回のデータではそもそもサンプルが正方形なため、すべて「画像を表す特殊トークン」や True のマスクが設定されているかと思います。</p>\n</li>\n</ul>\n<hr data-sourcepos=\"179:1-179:3\">\n<h3 data-sourcepos=\"180:1-180:46\">\n<span id=\"実装上の前処理データとの対応\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85%E4%B8%8A%E3%81%AE%E5%89%8D%E5%87%A6%E7%90%86%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AE%E5%AF%BE%E5%BF%9C\"><i class=\"fa fa-link\"></i></a>実装上の前処理データとの対応</h3>\n<p data-sourcepos=\"181:1-181:720\">前処理データについてわかってしまえば、前処理の実装を読み解くことは容易いかと思います。その為、あまり実装について書くことはないのですが、調べる上でひとつ分かりづらいと思った点があったのでそれだけ以下に書いておきます。それは、様々なデータの変数名が似通っているが、メソッドごとで微妙に異なり、最終的にどの前処理後データと対応するのかが分かりづらいという点です。いくつかについてのみ、処理途中の変数名と前処理後データを対応させてまとめましたので、実装を読む際にはご参考にしてください。</p>\n<hr data-sourcepos=\"183:1-184:0\">\n<p data-sourcepos=\"185:1-185:38\"><strong><code>MolmoImageProcessor.preprocess()</code></strong></p>\n<ul data-sourcepos=\"187:1-188:61\">\n<li data-sourcepos=\"187:1-188:61\">\n<code>image_tokens</code> : shape = (972,)<br>\n・前処理後データの <code>inout_ids</code> となるデータ。</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F97070faa-81b4-4373-8d0e-7377c96c499e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aaf3e4ff1317c11ef3c94cd445dc3ccc\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"550\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F97070faa-81b4-4373-8d0e-7377c96c499e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aaf3e4ff1317c11ef3c94cd445dc3ccc\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F97070faa-81b4-4373-8d0e-7377c96c499e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9a54c73e4e842cc20be7ba32a565a487 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/97070faa-81b4-4373-8d0e-7377c96c499e.png\" loading=\"lazy\"></a>\n<ul data-sourcepos=\"191:1-195:67\">\n<li data-sourcepos=\"191:1-193:0\">\n<p data-sourcepos=\"191:3-192:58\"><code>crops</code> : shape = (10, 576, 588)<br>\n・前処理後データの <code>images</code> となるデータ。</p>\n</li>\n<li data-sourcepos=\"194:1-195:67\">\n<p data-sourcepos=\"194:3-195:67\"><code>patch_ordering</code> : shape = (1440,)<br>\n・前処理後データの <code>image_input_idx</code> となるデータ。</p>\n</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fa26f5880-c634-439c-b157-f659967d707c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2644d5e67506767f72c4aec438022a79\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"300\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fa26f5880-c634-439c-b157-f659967d707c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2644d5e67506767f72c4aec438022a79\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fa26f5880-c634-439c-b157-f659967d707c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a4e6151b35e8cf485bd8d688ce4c143d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/a26f5880-c634-439c-b157-f659967d707c.png\" loading=\"lazy\"></a>\n<ul data-sourcepos=\"200:1-204:0\">\n<li data-sourcepos=\"200:1-204:0\">\n<code>patch_idx</code> : shape = (10, 144)<br>\n・前処理後データの <code>image_input_idx</code> となるデータ。<br>\n<code>MolmoImageProcessor.build_image_input_idx()</code> にて、<code>patch_ordering</code> に変換処理をするような形で <code>patch_idx</code> が作られます。このメソッドは、トークン列中の画像パッチトークンの位置と、画像パッチの順序付けを使って「トークンID → パッチID」のマッピング処理をするものです。<code>patch_ordering</code>の段階ではパッチに対して左上から右下にかけて通し番号が振られているだけでしたが、<code>patch_idx</code> になると改行トークンがあるので、トークン位置12の次が改行後は14になっています。下図はわかりやすいよう <code>(10, 12, 12)</code> に reshape しています。一番上の最初の要素がグローバルクロップで、残り9枚は局所画像クロップのデータになります。各クロップの端に位置するマージンの領域に関して、<code>overlap_margins</code> は4パッチですが、2 × 2 のプーリングをするとラップ長は 2 パッチ分になるので下記画像のように 長さが 2 になります。<br>\n後で LLM への入力シーケンスをフラット化して一次元にしたとき、<code>patch_idx</code> の情報がないとどこに何が格納されているのかわからなくなり、データに対して狙った演算や操作をすることが難しくなります。この情報さえあれば、後続の処理でファンシーインデックスを使い狙った位置にアクセスしてデータの操作が可能です。下記画像で言えば、「（LLMへ入力するために一次元化した）入力データの前から160番目の要素（トークン位置160）は、ローカルクロップ一枚目の左上の右隣のパッチの情報ですよ」ということを表してます。</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F4178d813-2ff6-4dc3-ad85-1f45831c1983.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=484a320278ee119a5a4b2b14766da7aa\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"300\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F4178d813-2ff6-4dc3-ad85-1f45831c1983.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=484a320278ee119a5a4b2b14766da7aa\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F4178d813-2ff6-4dc3-ad85-1f45831c1983.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=80a8222203aabbad447799f01991ab0d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/4178d813-2ff6-4dc3-ad85-1f45831c1983.png\" loading=\"lazy\"></a>\n<ul data-sourcepos=\"209:1-215:0\">\n<li data-sourcepos=\"209:1-215:0\">\n<code>img_mask</code> : shape = (10, 576)<br>\n・前処理後データの <code>image_masks</code> となるデータ。</li>\n</ul>\n<hr data-sourcepos=\"216:1-216:3\">\n<p data-sourcepos=\"217:1-217:55\"><strong><code>MolmoImageProcessor.image_to_patches_and_tokens()</code></strong></p>\n<ul data-sourcepos=\"219:1-222:0\">\n<li data-sourcepos=\"219:1-222:0\">\n<code>joint</code><br>\n・前処理後データの <code>input_ids</code> となるデータ。<br>\njoint トークン列は画像の「グリッド構造」をテキストのトークンとして表現し、各パッチの位置や区切り情報をモデルに伝えるための「目印」として利用されます。<code>image_col_token_id</code> を使って各行の終わりを示し、行の区切りを明示するなど、<code>joint</code> は後続の処理において画像特徴量と対応付けるために必要なデータです。</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"223:1-229:3\">\n<div class=\"code-lang\"><span class=\"bold\">具体的なデータのイメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"o\">[</span> image_start_token_id,\n  image_patch_token_id, image_patch_token_id, image_patch_token_id, image_patch_token_id, image_col_token_id,\n  image_patch_token_id, image_patch_token_id, image_patch_token_id, image_patch_token_id, image_col_token_id,\n  image_patch_token_id, image_patch_token_id, image_patch_token_id, image_patch_token_id, image_col_token_id,\n  image_end_token_id <span class=\"o\">]</span>\n</code></pre></div>\n</div>\n<ul data-sourcepos=\"231:1-245:0\">\n<li data-sourcepos=\"231:1-233:0\">\n<p data-sourcepos=\"231:3-232:67\"><code>patch_ordering_arr</code><br>\n・前処理後データの <code>image_input_idx</code> となるデータ。</p>\n</li>\n<li data-sourcepos=\"234:1-245:0\">\n<p data-sourcepos=\"234:3-235:63\"><code>mask_arr</code><br>\n・前処理後データの <code>image_masks</code> となるデータ。</p>\n</li>\n</ul>\n<h2 data-sourcepos=\"246:1-246:44\">\n<span id=\"画像エンコーダ-vit-image-encoder\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%80-vit-image-encoder\"><i class=\"fa fa-link\"></i></a>画像エンコーダ (ViT Image Encoder)</h2>\n<p data-sourcepos=\"247:1-247:87\">いよいよLLM自体の処理の解説に移ります。ここからが本題です。</p>\n<h3 data-sourcepos=\"249:1-249:40\">\n<span id=\"推論の実行---forward-の-call\" class=\"fragment\"></span><a href=\"#%E6%8E%A8%E8%AB%96%E3%81%AE%E5%AE%9F%E8%A1%8C---forward-%E3%81%AE-call\"><i class=\"fa fa-link\"></i></a>推論の実行 - forward() の call</h3>\n<p data-sourcepos=\"250:1-250:69\">この節以降からは以下の処理内部の話になります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"251:1-263:3\">\n<div class=\"code-lang\"><span class=\"bold\">Colab</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># 【2】\n# load the model\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">AutoModelForCausalLM</span><span class=\"p\">.</span><span class=\"nf\">from_pretrained</span><span class=\"p\">(</span><span class=\"n\">repo_name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 【2】\n# generate output; maximum 200 new tokens; stop generation when &lt;|endoftext|&gt; is generated\n</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">generate_from_batch</span><span class=\"p\">(</span>\n    <span class=\"n\">inputs</span><span class=\"p\">,</span>\n    <span class=\"nc\">GenerationConfig</span><span class=\"p\">(</span><span class=\"n\">max_new_tokens</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">stop_strings</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">&lt;|endoftext|&gt;</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n    <span class=\"n\">tokenizer</span><span class=\"o\">=</span><span class=\"n\">processor</span><span class=\"p\">.</span><span class=\"n\">tokenizer</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"266:1-266:209\">Colabにて、Molmoモデルのインスタンスからファイルの場所を出力します。出力方法は上述の「<a href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%96%B9%E6%B3%95colab%E7%92%B0%E5%A2%83\">デバッグ方法</a>」を参照してください。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"267:1-271:3\"><div class=\"highlight\"><pre><code>クラス名: MolmoProcessor\nモジュール名: transformers_modules.cyan2k.molmo-7B-D-bnb-4bit.51097c4251a023d72485963c1ab69f3b6d6a1ec6.preprocessing_molmo\nクラス定義ファイル: /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/preprocessing_molmo.py\n</code></pre></div></div>\n<p data-sourcepos=\"274:1-275:199\">ディープラーニングモデルにおいてモデルの処理のコアとなる部分は、モデルの <code>forward()</code> 関数です。これがモデルの処理の一丁目一番地になります。<code>forward()</code> 関数がどの順番で呼ばれるのかを調べるため、ソースコードを開き、<code>forward()</code> 関数の中に pdb のブレークポイントを仕込みます。そして、推論を実行しデバッガコマンドの<code>w</code>を実行することで、スタックトレースを標準出力にプリントすることが出来ます。<br>\n以下が <code>forward()</code> を呼び出すまでの過程です。スタックトレースの出力からモデルの挙動にあまり関係のないものを除いて編集したものになります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"280:1-329:3\">\n<div class=\"code-lang\"><span class=\"bold\">スタックトレースの出力（編集あり）</span></div>\n<div class=\"highlight\"><pre><code>    <span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"o\">&lt;</span><span class=\"n\">cell</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n        <span class=\"mi\">9</span> \n        <span class=\"mi\">10</span> <span class=\"c1\"># generate output; maximum 200 new tokens; stop generation when &lt;|endoftext|&gt; is generated\n</span>    <span class=\"o\">---&gt;</span> <span class=\"mi\">11</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">generate_from_batch</span><span class=\"p\">(</span>\n        <span class=\"mi\">12</span>     <span class=\"n\">inputs</span><span class=\"p\">,</span>\n        <span class=\"mi\">13</span>     <span class=\"nc\">GenerationConfig</span><span class=\"p\">(</span><span class=\"n\">max_new_tokens</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">stop_strings</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">&lt;|endoftext|&gt;</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n\n    <span class=\"o\">/</span><span class=\"n\">root</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">huggingface</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">transformers_modules</span><span class=\"o\">/</span><span class=\"n\">cyan2k</span><span class=\"o\">/</span><span class=\"n\">molmo</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"n\">B</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"o\">-</span><span class=\"n\">bnb</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">bit</span><span class=\"o\">/</span><span class=\"mi\">51097</span><span class=\"n\">c4251a023d72485963c1ab69f3b6d6a1ec6</span><span class=\"o\">/</span><span class=\"n\">modeling_molmo</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">2468</span><span class=\"p\">)</span><span class=\"nf\">generate_from_batch</span><span class=\"p\">()</span>\n    <span class=\"mi\">2466</span>             <span class=\"k\">assert</span> <span class=\"n\">attention_mask</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">mask_len</span><span class=\"p\">)</span>\n    <span class=\"mi\">2467</span> \n    <span class=\"o\">-&gt;</span> <span class=\"mi\">2468</span>         <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">generate</span><span class=\"p\">(</span>\n    <span class=\"mi\">2469</span>             <span class=\"n\">batch</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">input_ids</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"mi\">2470</span>             <span class=\"n\">generation_config</span><span class=\"p\">,</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">transformers</span><span class=\"o\">/</span><span class=\"n\">generation</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">2252</span><span class=\"p\">)</span><span class=\"nf\">generate</span><span class=\"p\">()</span>\n    <span class=\"mi\">2250</span> \n    <span class=\"mi\">2251</span>             <span class=\"c1\"># 12. run sample (it degenerates to greedy search when `generation_config.do_sample=False`)\n</span>    <span class=\"o\">-&gt;</span> <span class=\"mi\">2252</span>             <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_sample</span><span class=\"p\">(</span>\n    <span class=\"mi\">2253</span>                 <span class=\"n\">input_ids</span><span class=\"p\">,</span>\n    <span class=\"mi\">2254</span>                 <span class=\"n\">logits_processor</span><span class=\"o\">=</span><span class=\"n\">prepared_logits_processor</span><span class=\"p\">,</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">transformers</span><span class=\"o\">/</span><span class=\"n\">generation</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">3251</span><span class=\"p\">)</span><span class=\"nf\">_sample</span><span class=\"p\">()</span>\n    <span class=\"mi\">3249</span> \n    <span class=\"mi\">3250</span>             <span class=\"k\">if</span> <span class=\"n\">is_prefill</span><span class=\"p\">:</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mi\">3251</span>                 <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">self</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">model_inputs</span><span class=\"p\">,</span> <span class=\"n\">return_dict</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"mi\">3252</span>                 <span class=\"n\">is_prefill</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n    <span class=\"mi\">3253</span>             <span class=\"k\">else</span><span class=\"p\">:</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">torch</span><span class=\"o\">/</span><span class=\"n\">nn</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">1736</span><span class=\"p\">)</span><span class=\"nf\">_wrapped_call_impl</span><span class=\"p\">()</span>\n    <span class=\"mi\">1734</span>             <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_compiled_call_impl</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore[misc]\n</span>    <span class=\"mi\">1735</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mi\">1736</span>             <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_call_impl</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"mi\">1737</span> \n    <span class=\"mi\">1738</span>     <span class=\"c1\"># torchrec tests the code consistency with the following code\n</span>\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">torch</span><span class=\"o\">/</span><span class=\"n\">nn</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">1747</span><span class=\"p\">)</span><span class=\"nf\">_call_impl</span><span class=\"p\">()</span>\n    <span class=\"mi\">1745</span>                 <span class=\"ow\">or</span> <span class=\"n\">_global_backward_pre_hooks</span> <span class=\"ow\">or</span> <span class=\"n\">_global_backward_hooks</span>\n    <span class=\"mi\">1746</span>                 <span class=\"ow\">or</span> <span class=\"n\">_global_forward_hooks</span> <span class=\"ow\">or</span> <span class=\"n\">_global_forward_pre_hooks</span><span class=\"p\">):</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mi\">1747</span>             <span class=\"k\">return</span> <span class=\"nf\">forward_call</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"mi\">1748</span> \n    <span class=\"mi\">1749</span>         <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">root</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">huggingface</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">transformers_modules</span><span class=\"o\">/</span><span class=\"n\">cyan2k</span><span class=\"o\">/</span><span class=\"n\">molmo</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"n\">B</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"o\">-</span><span class=\"n\">bnb</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">bit</span><span class=\"o\">/</span><span class=\"mi\">51097</span><span class=\"n\">c4251a023d72485963c1ab69f3b6d6a1ec6</span><span class=\"o\">/</span><span class=\"n\">modeling_molmo</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">2362</span><span class=\"p\">)</span><span class=\"nf\">forward</span><span class=\"p\">()</span>\n    <span class=\"mi\">2360</span> \n    <span class=\"mi\">2361</span>         <span class=\"c1\"># decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n</span>    <span class=\"o\">-&gt;</span> <span class=\"mi\">2362</span>         <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">forward</span><span class=\"p\">(</span>\n    <span class=\"mi\">2363</span>             <span class=\"n\">input_ids</span><span class=\"o\">=</span><span class=\"n\">input_ids</span><span class=\"p\">,</span>\n    <span class=\"mi\">2364</span>             <span class=\"n\">input_embeddings</span><span class=\"o\">=</span><span class=\"n\">inputs_embeds</span><span class=\"p\">,</span>\n</code></pre></div>\n</div>\n<details><summary>スタックトレースの出力（編集なし）</summary>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"334:1-397:3\">\n<div class=\"code-lang\"><span class=\"bold\">スタックトレースの出力（編集なし）</span></div>\n<div class=\"highlight\"><pre><code>    <span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"n\">c8696a2549</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"o\">&lt;</span><span class=\"n\">cell</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n        <span class=\"mi\">9</span> \n        <span class=\"mi\">10</span> <span class=\"c1\"># generate output; maximum 200 new tokens; stop generation when &lt;|endoftext|&gt; is generated\n</span>    <span class=\"o\">---&gt;</span> <span class=\"mi\">11</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">generate_from_batch</span><span class=\"p\">(</span>\n        <span class=\"mi\">12</span>     <span class=\"n\">inputs</span><span class=\"p\">,</span>\n        <span class=\"mi\">13</span>     <span class=\"nc\">GenerationConfig</span><span class=\"p\">(</span><span class=\"n\">max_new_tokens</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">stop_strings</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">&lt;|endoftext|&gt;</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">torch</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">/</span><span class=\"n\">_contextlib</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">116</span><span class=\"p\">)</span><span class=\"nf\">decorate_context</span><span class=\"p\">()</span>\n        <span class=\"mi\">114</span>     <span class=\"k\">def</span> <span class=\"nf\">decorate_context</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"mi\">115</span>         <span class=\"k\">with</span> <span class=\"nf\">ctx_factory</span><span class=\"p\">():</span>\n    <span class=\"o\">--&gt;</span> <span class=\"mi\">116</span>             <span class=\"k\">return</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"mi\">117</span> \n        <span class=\"mi\">118</span>     <span class=\"k\">return</span> <span class=\"n\">decorate_context</span>\n\n    <span class=\"o\">/</span><span class=\"n\">root</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">huggingface</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">transformers_modules</span><span class=\"o\">/</span><span class=\"n\">cyan2k</span><span class=\"o\">/</span><span class=\"n\">molmo</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"n\">B</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"o\">-</span><span class=\"n\">bnb</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">bit</span><span class=\"o\">/</span><span class=\"mi\">51097</span><span class=\"n\">c4251a023d72485963c1ab69f3b6d6a1ec6</span><span class=\"o\">/</span><span class=\"n\">modeling_molmo</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">2468</span><span class=\"p\">)</span><span class=\"nf\">generate_from_batch</span><span class=\"p\">()</span>\n    <span class=\"mi\">2466</span>             <span class=\"k\">assert</span> <span class=\"n\">attention_mask</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">mask_len</span><span class=\"p\">)</span>\n    <span class=\"mi\">2467</span> \n    <span class=\"o\">-&gt;</span> <span class=\"mi\">2468</span>         <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">generate</span><span class=\"p\">(</span>\n    <span class=\"mi\">2469</span>             <span class=\"n\">batch</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">input_ids</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"mi\">2470</span>             <span class=\"n\">generation_config</span><span class=\"p\">,</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">torch</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">/</span><span class=\"n\">_contextlib</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">116</span><span class=\"p\">)</span><span class=\"nf\">decorate_context</span><span class=\"p\">()</span>\n        <span class=\"mi\">114</span>     <span class=\"k\">def</span> <span class=\"nf\">decorate_context</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"mi\">115</span>         <span class=\"k\">with</span> <span class=\"nf\">ctx_factory</span><span class=\"p\">():</span>\n    <span class=\"o\">--&gt;</span> <span class=\"mi\">116</span>             <span class=\"k\">return</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"mi\">117</span> \n        <span class=\"mi\">118</span>     <span class=\"k\">return</span> <span class=\"n\">decorate_context</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">transformers</span><span class=\"o\">/</span><span class=\"n\">generation</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">2252</span><span class=\"p\">)</span><span class=\"nf\">generate</span><span class=\"p\">()</span>\n    <span class=\"mi\">2250</span> \n    <span class=\"mi\">2251</span>             <span class=\"c1\"># 12. run sample (it degenerates to greedy search when `generation_config.do_sample=False`)\n</span>    <span class=\"o\">-&gt;</span> <span class=\"mi\">2252</span>             <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_sample</span><span class=\"p\">(</span>\n    <span class=\"mi\">2253</span>                 <span class=\"n\">input_ids</span><span class=\"p\">,</span>\n    <span class=\"mi\">2254</span>                 <span class=\"n\">logits_processor</span><span class=\"o\">=</span><span class=\"n\">prepared_logits_processor</span><span class=\"p\">,</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">transformers</span><span class=\"o\">/</span><span class=\"n\">generation</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">3251</span><span class=\"p\">)</span><span class=\"nf\">_sample</span><span class=\"p\">()</span>\n    <span class=\"mi\">3249</span> \n    <span class=\"mi\">3250</span>             <span class=\"k\">if</span> <span class=\"n\">is_prefill</span><span class=\"p\">:</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mi\">3251</span>                 <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">self</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">model_inputs</span><span class=\"p\">,</span> <span class=\"n\">return_dict</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"mi\">3252</span>                 <span class=\"n\">is_prefill</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n    <span class=\"mi\">3253</span>             <span class=\"k\">else</span><span class=\"p\">:</span>\n\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">torch</span><span class=\"o\">/</span><span class=\"n\">nn</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">1736</span><span class=\"p\">)</span><span class=\"nf\">_wrapped_call_impl</span><span class=\"p\">()</span>\n    <span class=\"mi\">1734</span>             <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_compiled_call_impl</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore[misc]\n</span>    <span class=\"mi\">1735</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mi\">1736</span>             <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_call_impl</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"mi\">1737</span> \n    <span class=\"mi\">1738</span>     <span class=\"c1\"># torchrec tests the code consistency with the following code\n</span>\n    <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">torch</span><span class=\"o\">/</span><span class=\"n\">nn</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">1747</span><span class=\"p\">)</span><span class=\"nf\">_call_impl</span><span class=\"p\">()</span>\n    <span class=\"mi\">1745</span>                 <span class=\"ow\">or</span> <span class=\"n\">_global_backward_pre_hooks</span> <span class=\"ow\">or</span> <span class=\"n\">_global_backward_hooks</span>\n    <span class=\"mi\">1746</span>                 <span class=\"ow\">or</span> <span class=\"n\">_global_forward_hooks</span> <span class=\"ow\">or</span> <span class=\"n\">_global_forward_pre_hooks</span><span class=\"p\">):</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mi\">1747</span>             <span class=\"k\">return</span> <span class=\"nf\">forward_call</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"mi\">1748</span> \n    <span class=\"mi\">1749</span>         <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">root</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">huggingface</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"n\">transformers_modules</span><span class=\"o\">/</span><span class=\"n\">cyan2k</span><span class=\"o\">/</span><span class=\"n\">molmo</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"n\">B</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"o\">-</span><span class=\"n\">bnb</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">bit</span><span class=\"o\">/</span><span class=\"mi\">51097</span><span class=\"n\">c4251a023d72485963c1ab69f3b6d6a1ec6</span><span class=\"o\">/</span><span class=\"n\">modeling_molmo</span><span class=\"p\">.</span><span class=\"nf\">py</span><span class=\"p\">(</span><span class=\"mi\">2362</span><span class=\"p\">)</span><span class=\"nf\">forward</span><span class=\"p\">()</span>\n    <span class=\"mi\">2360</span> \n    <span class=\"mi\">2361</span>         <span class=\"c1\"># decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n</span>    <span class=\"o\">-&gt;</span> <span class=\"mi\">2362</span>         <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">forward</span><span class=\"p\">(</span>\n    <span class=\"mi\">2363</span>             <span class=\"n\">input_ids</span><span class=\"o\">=</span><span class=\"n\">input_ids</span><span class=\"p\">,</span>\n    <span class=\"mi\">2364</span>             <span class=\"n\">input_embeddings</span><span class=\"o\">=</span><span class=\"n\">inputs_embeds</span><span class=\"p\">,</span>\n</code></pre></div>\n</div>\n</details>\n<p data-sourcepos=\"400:1-400:999\"><code>-&gt; 2468         out = super().generate()</code> が呼び出されると、モデル固有の <code>generate()</code> メソッドから一歩離れて、Hugging Face Transformers と PyTorch が提供する親クラスの処理に移行します。この <code>Molmo()</code> が継承する親クラスでは、生成のために複数の内部メソッドが順番に呼び出され、その中で最終的に <code>forward()</code>が実行される仕組みになっています。PyTorch の慣習として、ユーザ実装の <code>forward()</code> を直接呼び出すのではなく、モデルインスタンスに対して <code>model( input )</code> のように呼び出し可能オブジェクト（<code>__call__</code>）を介して入力を与えることが推奨されています。実際スタックトレースを見てみると、モデルの骨組みとなる親クラスの一つ <code>/usr/local/lib/python3.11/dist-packages/transformers/generation/utils.py</code>の内部にて、 <code>model( input )</code> の形で <code>forward()</code> が call されています。</p>\n<h3 data-sourcepos=\"404:1-404:22\">\n<span id=\"単語埋め込み\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E8%AA%9E%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF\"><i class=\"fa fa-link\"></i></a>単語埋め込み</h3>\n<p data-sourcepos=\"406:1-407:209\"><code>MolmoForCausalLM.forward()</code> が call されると、すぐに <code>Molmo.forward()</code> の処理に移ります。<br>\n<code>Molmo.forward()</code> では、はじめに入力データに対するいくつかのバリデーション処理の後、以下のトークンIDから特徴量ベクトルへの変換処理が実行されます。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"408:1-410:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">wte</span><span class=\"p\">(</span><span class=\"n\">input_ids</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">input_embeddings</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"n\">input_embeddings</span>  <span class=\"c1\"># type: ignore\n</span></code></pre></div>\n</div>\n<p data-sourcepos=\"411:1-411:580\">属性 <code>wte</code> の実体は <code>Embedding()</code> です（<a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AE-model-%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\">全体図</a>参照）。Embeddingは、単語IDをベクトルに変換する“辞書”のようなものです。内部に語彙数×埋め込み次元の行列 W を持ち、入力IDを行番号として該当行をそのまま取り出します（行列積はナシ）。初期値は正規分布でランダムに設定され、学習中は誤差逆伝播で該当行だけが更新される。結果的に意味が近い単語ほど似た方向のベクトルに収束します。</p>\n\n<h3 data-sourcepos=\"422:1-422:23\">\n<span id=\"vit--openai-clip-\" class=\"fragment\"></span><a href=\"#vit--openai-clip-\"><i class=\"fa fa-link\"></i></a>ViT ( OpenAI CLIP )</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"424:1-435:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">wte</span><span class=\"p\">(</span><span class=\"n\">input_ids</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">input_embeddings</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"n\">input_embeddings</span>  <span class=\"c1\"># type: ignore\n</span>\n<span class=\"n\">num_image</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n<span class=\"k\">if</span> <span class=\"n\">images</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># shape: (batch_size, num_image, num_patch, d_model)\n</span>    <span class=\"c1\"># cls_embed: (batch_size, num_image, d_model)\n</span>    <span class=\"n\">image_features</span><span class=\"p\">,</span> <span class=\"n\">cls_embed</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">vision_backbone</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">image_masks</span><span class=\"p\">)</span>\n    <span class=\"n\">num_image</span><span class=\"p\">,</span> <span class=\"n\">num_patch</span> <span class=\"o\">=</span> <span class=\"n\">image_features</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"n\">image_input_idx</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">num_image</span><span class=\"p\">,</span> <span class=\"n\">num_patch</span><span class=\"p\">)</span>\n\n</code></pre></div>\n</div>\n<p data-sourcepos=\"437:1-439:165\"><code>vision_backbone</code> の中に画像を特徴量埋め込みする機能が入っています。実際にオブジェクトを見てみると、<code>OLMoPretrainedVisionBackbone</code> クラスとなっています。<a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AE-model-%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\">全体図内</a>の <code>vision_backbone</code> 以下を見てもわかりますが、ここには大きく3つの機能が実装されています。3つの機能とは、ViT画像エンコーダ(<code>image_vit</code>)、アテンションプーリング（<code>image_pooling_2d</code>）、コネクタ(<code>image_projector</code>)です。<br>\nこの内の一つ、「 ViT 画像エンコーダ( <code>image_vit</code> )」の実体が ViT ( OpenAI CLIP ) となっているのです。つまり、<code>VisionTransformer</code>クラスがまさに ViT ( OpenAI CLIP ) の画像エンコーダ部分ということになります。<br>\n<code>OLMoPretrainedVisionBackbone.encode_image()</code> の中で ViT 埋め込みと、埋め込み特徴量の複数層取り出し及び結合が実行されています。</p>\n<p data-sourcepos=\"441:1-442:325\">ViT の解説までしていると長過ぎるので踏み込みません。別途、<a href=\"https://arxiv.org/pdf/2103.00020\" rel=\"nofollow noopener\" target=\"_blank\">論文</a>をご参照ください。<br>\nとはいっても、使うのは CLIP の中の画像エンコーダ部分のみで、それはほぼ ViT そのものです。そこで実際、ViTの概念図右側（Transformer Encoder）を見てみると、Molmo の ViT 実装も概ねオリジナルの ViT の概念図の通りであることが読み取れます。</p>\n<ul data-sourcepos=\"443:1-449:0\">\n<li data-sourcepos=\"443:1-443:96\">MultiHeadAttention（黄緑ブロック） → <code>MultiHeadDotProductAttention</code>（<code>attention</code>）</li>\n<li data-sourcepos=\"444:1-444:68\">Norm（黄色ブロック） → <code>LayerNorm</code>（<code>attention_norm</code>）</li>\n<li data-sourcepos=\"445:1-445:62\">Norm（黄色ブロック） → <code>LayerNorm</code>（<code>ffn_norm</code>）</li>\n<li data-sourcepos=\"446:1-449:0\">MLP（水色ブロック） → <code>ViTMLP</code>（<code>feed_forward</code>）</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F86ba7391-83c0-4b06-ad18-52ab23d9bf03.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fa6f249e2f385997064b995c371c1b42\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"550\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F86ba7391-83c0-4b06-ad18-52ab23d9bf03.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fa6f249e2f385997064b995c371c1b42\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F86ba7391-83c0-4b06-ad18-52ab23d9bf03.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e80c2e5b8344af976f337de048fe8659 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/86ba7391-83c0-4b06-ad18-52ab23d9bf03.png\" loading=\"lazy\"></a>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"456:1-476:3\">\n<div class=\"code-lang\"><span class=\"bold\">ViT（ 実際の model オブジェクトの構造（抜粋））</span></div>\n<div class=\"highlight\"><pre><code>    └── vision_backbone: <span class=\"nt\">-OLMoPretrainedVisionBackbone</span>\n        ├── image_vit: <span class=\"nt\">-VisionTransformer</span>\n        │   ├── patch_embedding: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>588, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">bias</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n        │   ├── pre_ln: <span class=\"nt\">-LayerNormFp32</span><span class=\"o\">((</span>1024,<span class=\"o\">)</span>, <span class=\"nv\">eps</span><span class=\"o\">=</span>1e-05, <span class=\"nv\">elementwise_affine</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │   └── transformer: <span class=\"nt\">-BlockCollection</span>\n        │       └── resblocks: <span class=\"nt\">-ModuleList</span>\n        │           └── 0-22: 23 x <span class=\"nt\">-ResidualAttentionBlock</span> <span class=\"c\"># &lt;--------- x 23</span>\n        │               ├── attention: <span class=\"nt\">-MultiHeadDotProductAttention</span>\n        │               │   ├── wq: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               │   ├── wk: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               │   ├── wv: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               │   ├── wo: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               │   └── residual_dropout: <span class=\"nt\">-Dropout</span><span class=\"o\">(</span><span class=\"nv\">p</span><span class=\"o\">=</span>0.0, <span class=\"nv\">inplace</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n        │               ├── feed_forward: <span class=\"nt\">-ViTMLP</span>\n        │               │   ├── w1: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">out_features</span><span class=\"o\">=</span>4096, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               │   ├── act: <span class=\"nt\">-QuickGELU</span><span class=\"o\">()</span>\n        │               │   └── w2: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>4096, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1024, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               ├── attention_norm: <span class=\"nt\">-LayerNorm</span><span class=\"o\">((</span>1024,<span class=\"o\">)</span>, <span class=\"nv\">eps</span><span class=\"o\">=</span>1e-05, <span class=\"nv\">elementwise_affine</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n        │               └── ffn_norm: <span class=\"nt\">-LayerNorm</span><span class=\"o\">((</span>1024,<span class=\"o\">)</span>, <span class=\"nv\">eps</span><span class=\"o\">=</span>1e-05, <span class=\"nv\">elementwise_affine</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"492:1-492:27\">\n<span id=\"コネクタ-connector\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF-connector\"><i class=\"fa fa-link\"></i></a>コネクタ (Connector)</h2>\n<h3 data-sourcepos=\"493:1-493:37\">\n<span id=\"アテンションプーリング\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%86%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>アテンションプーリング</h3>\n<p data-sourcepos=\"495:1-497:459\">ViT ( OpenAI CLIP ）での処理を経た後、特徴量に対してプーリング処理をします。<br>\nプーリングといえば近隣の値を足したり平均値や最大値を取ったりするだけではと思ってしまいますが、Attentionを使ったプーリングとは一体何でしょう？<br>\n結論から言うと、アテンションプーリングとは所謂、以下の式で示される <strong>通常の Attention 計算</strong> と同じです。実際、実装上も ViT で使われているものと同じ <code>MultiHeadDotProductAttention</code> クラスが使われています。しかし、アテンション \" プーリング \" ですから、プーリングに相当する工夫がなされています。実装を追っていきそれを確認します。</p>\n<ul data-sourcepos=\"499:1-499:19\">\n<li data-sourcepos=\"499:1-499:19\">Attention Pooling</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"math\" data-sourcepos=\"500:1-512:3\"><div class=\"highlight\"><pre><code>\\begin{aligned}\n&amp; \\operatorname{Attention}(Q,K,V) \n  = \\operatorname{softmax}\\!\\Bigl(\n         \\frac{QK^T}{\\sqrt{d_k}}\n     \\Bigr)V \\\\\n&amp; y= \\operatorname{Linear}\\Bigl(\n         \\operatorname{MergeHeads}\\bigl(\n             \\operatorname{Attention}(Q,K,V)\n         \\bigr)\n     \\Bigr)\n\\end{aligned}\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"514:1-527:3\">\n<div class=\"code-lang\"><span class=\"bold\">OLMoPretrainedVisionBackbone.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># before_rearrange : type = Tensor, shape = (1, 10, 24, 24, 2048)\n# after_rearrange  : type = Tensor, shape = (1440, 4, 2048)\n</span><span class=\"n\">image_features</span> <span class=\"o\">=</span> <span class=\"n\">einops</span><span class=\"p\">.</span><span class=\"nf\">rearrange</span><span class=\"p\">(</span>\n            <span class=\"n\">image_features</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">b n (h dh) (w dw) c -&gt; (b n h w) (dh dw) c</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n            <span class=\"n\">dh</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">image_pooling_h</span><span class=\"p\">,</span>\n            <span class=\"n\">dw</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">image_pooling_w</span><span class=\"p\">,)</span>\n<span class=\"c1\"># query            : type = Tensor, shape = (1440, 1, 2048)\n</span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">image_features</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">keepdim</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># after_pooling    : type = Tensor, shape = (1440, 1, 1024)\n</span><span class=\"n\">image_features</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">image_pooling_2d</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">image_features</span><span class=\"p\">)</span> <span class=\"c1\"># MultiHeadDotProductAttention()\n</span></code></pre></div>\n</div>\n<p data-sourcepos=\"529:1-531:866\">ViT（OpenAI CLIP）でクロップ画像をエンコードした後、本実装では第3層と第10層のパッチ特徴をチャネル方向で連結して最終的なパッチ特徴量を構築します。これは単一層のみを用いる場合に比べ、若干の性能向上をもたらします。<br>\nつづいて <code>einops.rearrange</code> を用いて、バッチ数やクロップ数、ウィンドウサイズ（隣接する 2 × 2 パッチの小領域）ごとにまとめて、形状を変換します。ここで、各ウィンドウ内のパッチ特徴量の平均を取り、次元を 4→1 に落としたものをクエリとして用意します。<br>\n最後に、<code>self.image_pooling_2d()</code>（ <code>MultiHeadDotProductAttention</code> クラス）に、キー（K）・バリュー（V）としてウィンドウ内の全パッチ特徴量、クエリとして先ほどの平均特徴量を与え、Attention 計算を実行します。ここで Attention 演算によりウィンドウ内の情報を重み付きで統合し、元の 4 次元分の情報を 1 次元に集約させることでプーリングが実現します。さらに、複数層の特徴量を連結してできた高次元部分は、<code>self.wo</code>（出力線形層）を通すことで最終的に LLM モデル埋め込み次元（1024）へ射影されます。この一連の流れにより、単純な平均プーリング以上に「重要なパッチ」を強調したプーリングが可能となり、視覚特徴の集約精度が向上します。</p>\n<blockquote data-sourcepos=\"533:1-533:387\">\n<p data-sourcepos=\"533:3-533:387\">簡単に書くと、Transformer の Attention と機構は同じですが、今回のように Pooling が目的の場合、query ベクトルの次元を4→1に落として <code>K</code> および <code>V</code> と行列積を取ることで次元が落ちる機構です。こうして上記コードの通り、<code>image_features</code> は Attention Pooling によって4→1に次元が落ちています。</p>\n</blockquote>\n<p data-sourcepos=\"535:1-535:288\">余談ですが、einops（アインオプス）をここで初めてみて、すごく便利だと思いました。因数を指定して変形したい次元形状に変えられるのは、本当に直感的にやりたいことが実現出来てかなりいいなと思いました。</p>\n<h3 data-sourcepos=\"538:1-538:59\">\n<span id=\"llm-埋め込み空間へのマッピング投影\" class=\"fragment\"></span><a href=\"#llm-%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E7%A9%BA%E9%96%93%E3%81%B8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E6%8A%95%E5%BD%B1\"><i class=\"fa fa-link\"></i></a>LLM 埋め込み空間へのマッピング（投影）</h3>\n<p data-sourcepos=\"540:1-540:81\">こちらがマッピング処理のエントリーポイントになります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"541:1-547:3\">\n<div class=\"code-lang\"><span class=\"bold\">OLMoPretrainedVisionBackbone.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">grad_checkpointing</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"n\">torch.utils.checkpoint</span> <span class=\"kn\">import</span> <span class=\"n\">checkpoint</span>\n    <span class=\"n\">image_features</span> <span class=\"o\">=</span> <span class=\"nf\">checkpoint</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">image_projector</span><span class=\"p\">,</span> <span class=\"n\">image_features</span><span class=\"p\">,</span> <span class=\"n\">use_reentrant</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">image_features</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">image_projector</span><span class=\"p\">(</span><span class=\"n\">image_features</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"549:1-549:408\">論文の中ではモデルを形作る4つのコンポーネントの1つとして扱われていますが、その実体は全てのコードを貼り付けられるぐらい量も少なく、ロジックも平易なものです（※<code>reset_parameters</code> のみ省略）。線形写像に活性化関数という、ディープラーニング事始めといった具合です。説明は不要でしょう。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"551:1-587:3\"><div class=\"highlight\"><pre><code><span class=\"k\">class</span> <span class=\"nc\">MLP</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">FullMolmoConfig</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">mlp_hidden_size</span> <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">mlp_hidden_size</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">mlp_ratio</span> <span class=\"o\">*</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">d_model</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">initializer_range</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">initializer_range</span>\n\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span>\n            <span class=\"n\">input_dim</span><span class=\"p\">,</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">init_device</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">d_model</span><span class=\"p\">,</span>\n            <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">init_device</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">w3</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span>\n            <span class=\"n\">input_dim</span><span class=\"p\">,</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">init_device</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"c1\"># Activation function.\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">act</span> <span class=\"o\">=</span> <span class=\"n\">Activation</span><span class=\"p\">.</span><span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"n\">dropout</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">Tensor</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">w2</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">act</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">w1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">w3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">dropout</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"597:1-597:67\">\n<span id=\"llmへクロップ重複部分をパスしないようにする\" class=\"fragment\"></span><a href=\"#llm%E3%81%B8%E3%82%AF%E3%83%AD%E3%83%83%E3%83%97%E9%87%8D%E8%A4%87%E9%83%A8%E5%88%86%E3%82%92%E3%83%91%E3%82%B9%E3%81%97%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>LLMへクロップ重複部分をパスしないようにする</h3>\n<p data-sourcepos=\"599:1-600:165\">前処理の段階でも説明しましたが、画像をクロップする際に重なりがあります。論文にはこの重なりがあることにより情報の見切れを防ぐことが出来るため、精度が向上すると書かれてあります。しかし、重なり部分をそのままLLMに渡してしまうと、一つしかないオブジェクトが2つカウントされてしまったり、情報を2重で渡してしまうことになります。<br>\nそこで入力画像をクロップした際に発生した重複部分をLLMにパスしないようにする仕組みが以下のコード箇所になります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"602:1-604:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">batch_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">],</span> <span class=\"n\">image_input_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"n\">image_features</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"607:1-608:54\">この処理ではファンシーインデックスが活用されているため、コードが直感的に分かりづらくなっています。<br>\nもう少し周辺のコードから見てみます。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"610:1-632:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">if</span> <span class=\"n\">images</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"c1\"># shape: (batch_size, num_image, num_patch, d_model)\n</span>    <span class=\"c1\"># cls_embed: (batch_size, num_image, d_model)\n</span>    <span class=\"n\">image_features</span><span class=\"p\">,</span> <span class=\"n\">cls_embed</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">vision_backbone</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">image_masks</span><span class=\"p\">)</span>\n    <span class=\"n\">num_image</span><span class=\"p\">,</span> <span class=\"n\">num_patch</span> <span class=\"o\">=</span> <span class=\"n\">image_features</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"n\">image_input_idx</span><span class=\"p\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">num_image</span><span class=\"p\">,</span> <span class=\"n\">num_patch</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># [A]\n</span>    <span class=\"c1\"># inster the image feature into the embedding.\n</span>    <span class=\"n\">image_features</span> <span class=\"o\">=</span> <span class=\"n\">image_features</span><span class=\"p\">.</span><span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">num_image</span> <span class=\"o\">*</span> <span class=\"n\">num_patch</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">image_input_idx</span> <span class=\"o\">=</span> <span class=\"n\">image_input_idx</span><span class=\"p\">.</span><span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">num_image</span> <span class=\"o\">*</span> <span class=\"n\">num_patch</span><span class=\"p\">)</span>\n\n    <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">image_input_idx</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">batch_idx</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">arange</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">)</span>\n    <span class=\"n\">batch_idx</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tile</span><span class=\"p\">(</span><span class=\"n\">batch_idx</span><span class=\"p\">[:,</span> <span class=\"bp\">None</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">image_features</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n    <span class=\"c1\"># For hf demo/endpoint\n</span>    <span class=\"n\">image_features</span> <span class=\"o\">=</span> <span class=\"n\">image_features</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># [B]\n</span>    <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">batch_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">],</span> <span class=\"n\">image_input_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"n\">image_features</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"634:1-634:228\"><code># [A]</code> とコメントアウトした箇所から該当の処理が始まり、<code># [B]</code> において、重複部分の無効化が実行されています。<code># [B]</code> 時点での各データの形状は以下のとおりです。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"636:1-651:3\"><div class=\"highlight\"><pre><code><span class=\"n\">x</span><span class=\"p\">:</span>                                                <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">981</span><span class=\"p\">,</span> <span class=\"mi\">3584</span><span class=\"p\">])</span>\n<span class=\"n\">batch_idx</span><span class=\"p\">:</span>                                        <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">])</span>\n<span class=\"n\">image_input_idx</span><span class=\"p\">:</span>                                  <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">])</span>\n<span class=\"n\">valid</span><span class=\"p\">:</span>                                            <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">])</span>\n<span class=\"n\">image_features</span><span class=\"p\">:</span>                                   <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">,</span> <span class=\"mi\">3584</span><span class=\"p\">])</span>\n<span class=\"o\">-----------------------------------------------------------------------------------</span>\n<span class=\"c1\"># 1つ目のインデックス指定（[B] の左辺）\n</span><span class=\"n\">batch_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]:</span>                                 <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">928</span><span class=\"p\">])</span>\n<span class=\"c1\"># 2つ目のインデックス指定（[B] の左辺）\n</span><span class=\"n\">image_input_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]:</span>                           <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">928</span><span class=\"p\">])</span>\n<span class=\"c1\"># [B] の左辺\n</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">batch_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">],</span> <span class=\"n\">image_input_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]]:</span>      <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">928</span><span class=\"p\">,</span> <span class=\"mi\">3584</span><span class=\"p\">])</span>\n<span class=\"c1\"># [B] の右辺\n</span><span class=\"n\">image_features</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]:</span>                            <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nc\">Size</span><span class=\"p\">([</span><span class=\"mi\">928</span><span class=\"p\">,</span> <span class=\"mi\">3584</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p data-sourcepos=\"653:1-653:51\">一部、データの中身も覗いてみます。</p>\n<ul data-sourcepos=\"655:1-658:0\">\n<li data-sourcepos=\"655:1-658:0\">\n<code>batch_idx</code><br>\nファンシーインデックスで更新対象を対応させるためのただのインデックス番号。インデックス番号を入れるだけのマスク行列です（ここでは\"隠す\"という意味でのマスクではありません）。<br>\n今回の例の場合、バッチサイズは 1 なので全て 0 のマスクになります。</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F8ed7e5f7-0106-4522-b84d-33a35ffdb2fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8ddd65d46242e1634e616f89ff290c06\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"350\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F8ed7e5f7-0106-4522-b84d-33a35ffdb2fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8ddd65d46242e1634e616f89ff290c06\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2F8ed7e5f7-0106-4522-b84d-33a35ffdb2fc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e6340cf6c0a32eb2c404e794b7c77bf8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/8ed7e5f7-0106-4522-b84d-33a35ffdb2fc.png\" loading=\"lazy\"></a>\n<ul data-sourcepos=\"662:1-664:118\">\n<li data-sourcepos=\"662:1-664:118\">\n<code>image_input_idx</code><br>\n見やすさのため、<code>[10, 12, 12]</code> に reshape しています。<br>\nパッチ特徴量について、169の次の170は次のクロップ画像（画像内 Group2）の左上の要素。</li>\n</ul>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fc6f3045f-a277-4867-8c1c-ebb8cbf13dab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3dc07338c4e9ce5ff119c1dceb741937\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"350\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fc6f3045f-a277-4867-8c1c-ebb8cbf13dab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3dc07338c4e9ce5ff119c1dceb741937\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Fc6f3045f-a277-4867-8c1c-ebb8cbf13dab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3eebf11be17be3a7fe8eb37da500080e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/c6f3045f-a277-4867-8c1c-ebb8cbf13dab.png\" loading=\"lazy\"></a>\n<p data-sourcepos=\"668:1-668:99\">ここまでデータの内容を把握したうえで改めて元のコードを参照します。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"669:1-671:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">batch_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">],</span> <span class=\"n\">image_input_idx</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"n\">image_features</span><span class=\"p\">[</span><span class=\"n\">valid</span><span class=\"p\">]</span>\n</code></pre></div>\n</div>\n<ul data-sourcepos=\"673:1-678:0\">\n<li data-sourcepos=\"673:1-675:248\">\n<strong>左辺</strong><br>\nLLM への入力シーケンス <code>x</code> の次元 <code>[1, 981, 3584]</code> は左から、バッチ、シーケンス、特徴量を表します。<br>\n「バッチ（<code>batch_idx[valid]</code>）」、「シーケンス（<code>image_input_idx[valid]</code>）」それぞれの次元に対し、インデックス番号を抽出したものを指定し、適切な <code>x</code> のパッチ格納場所を有効化します。</li>\n<li data-sourcepos=\"676:1-678:0\">\n<strong>右辺</strong><br>\n<code>image_input_idx</code> で作った有効領域のマスク（<code>valid</code>）を用いて、画像特徴量の非重複部分だけを抽出します。</li>\n</ul>\n<p data-sourcepos=\"679:1-679:459\">左辺が分かりづらいですが、一つずつ紐解いてゆけば解るかと思います。両辺を同じ形にしてから代入してやりたいという意図です。ここまでの説明でも難しい場合は、一度ファンシーインデックスの簡単な例を調べて、自分で実行してみるのがおすすめです。ファンシーインデックスは自分で触らないと分かりづらいところではあります。</p>\n<p data-sourcepos=\"683:1-684:336\"><strong>[ 自分用のメモ ]</strong><br>\n自分用に取ったメモですが、せっかくなので誰かの理解の一助になればと思い、メモも載せておきます。情報を整理するために自分用として書いたメモなのでわかりやすくまとまってはいませんが、図で表されている分、直感的ではあると思います。</p>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Ff264c8bd-3f08-4b2d-a0e9-dbb7be98ae82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e8e5c5b5f8563e8aab3f687fc185e8e\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"450\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Ff264c8bd-3f08-4b2d-a0e9-dbb7be98ae82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e8e5c5b5f8563e8aab3f687fc185e8e\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3913772%2Ff264c8bd-3f08-4b2d-a0e9-dbb7be98ae82.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8659fcbad112c0e67ce78608dade170e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/f264c8bd-3f08-4b2d-a0e9-dbb7be98ae82.png\" loading=\"lazy\"></a>\n<h2 data-sourcepos=\"695:1-695:33\">\n<span id=\"decoder-only-transformer-llm\" class=\"fragment\"></span><a href=\"#decoder-only-transformer-llm\"><i class=\"fa fa-link\"></i></a>Decoder-only Transformer (LLM)</h2>\n<h3 data-sourcepos=\"697:1-697:69\">\n<span id=\"1回の-molmoforward-イテレーションにおける処理\" class=\"fragment\"></span><a href=\"#1%E5%9B%9E%E3%81%AE-molmoforward-%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1回の <code>Molmo.forward()</code> イテレーションにおける処理</h3>\n<p data-sourcepos=\"699:1-699:522\">今更ですが、前提のお話として、テキスト生成における単語の生成は一語づつ行われます。一語ずつ単語の分布が生成されて出力をフィードバックしながらループすることで、文章を生成しているのです。<code>Molmo.forward()</code> はあくまで一回の順伝搬であり、実行一回につき生成される単語は一語です。外側の <code>generate()</code> が <code>Molmo.forward()</code>をループ実行させて、EOS がでると生成処理は終了します。</p>\n<p data-sourcepos=\"701:1-701:501\">ここで一つ疑問が湧きます。<code>Molmo.forward()</code> ループ時に、フィードバックした同じデータに対し、画像特徴量を算出する処理（データの特徴量埋め込みの処理）を何度もやるのでしょうか？当然、そのようなことはせずにキャッシュを保存して一度計算した特徴量は次回からは再利用しています。次の一語の生成に必須な計算のみを繰り返して文章が生成されていくのです。</p>\n<h4 data-sourcepos=\"707:1-707:38\">\n<span id=\"llm-decoder-への入力前処理\" class=\"fragment\"></span><a href=\"#llm-decoder-%E3%81%B8%E3%81%AE%E5%85%A5%E5%8A%9B%E5%89%8D%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>LLM Decoder への入力前処理</h4>\n<p data-sourcepos=\"709:1-709:286\"><a href=\"https://huggingface.co/allenai/Molmo-7B-D-0924/blob/main/modeling_molmo.py#L1884\" rel=\"nofollow noopener\" target=\"_blank\">Decoder への入力前処理</a>として、入力シーケンスデータ（ <code>x</code> ）の前処理およびアテンションマスクの作成があります。一連の主な処理内容は以下です。</p>\n<ul data-sourcepos=\"711:1-717:0\">\n<li data-sourcepos=\"711:1-711:29\">位置埋め込みの付与</li>\n<li data-sourcepos=\"712:1-712:23\">ドロップアウト</li>\n<li data-sourcepos=\"713:1-713:20\">スケーリング</li>\n<li data-sourcepos=\"714:1-714:56\">\n<code>attention_mask</code> の float 変換＆負バイアス化</li>\n<li data-sourcepos=\"715:1-715:90\">\n<code>attention_bias</code>（因果マスク・追加バイアス）の初期化・トリミング</li>\n<li data-sourcepos=\"716:1-717:0\">mask と bias の合成＆数値安定化</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"718:1-743:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">rope</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get positional embeddings.\n</span>        <span class=\"c1\"># shape: (1, seq_len)\n</span>        <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">arange</span><span class=\"p\">(</span><span class=\"n\">past_length</span><span class=\"p\">,</span> <span class=\"n\">past_length</span> <span class=\"o\">+</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nb\">long</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">).</span><span class=\"nf\">unsqueeze</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># shape: (1, seq_len, d_model)\n</span>        <span class=\"n\">pos_emb</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">wpe</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore\n</span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">pos_emb</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n\n    <span class=\"c1\"># Add input + positional embeddings and apply dropout.\n</span>    <span class=\"c1\"># shape: (batch_size, seq_len, d_model)\n</span>    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">emb_drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore\n</span>\n    <span class=\"c1\"># …\n</span>    <span class=\"c1\"># 途中省略\n</span>    <span class=\"c1\"># …\n</span>    \n        <span class=\"c1\"># Add in the masking bias.\n</span>        <span class=\"k\">if</span> <span class=\"n\">attention_mask</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">attention_bias</span> <span class=\"o\">=</span> <span class=\"n\">attention_bias</span> <span class=\"o\">+</span> <span class=\"n\">attention_mask</span>\n            <span class=\"c1\"># Might get -infs after adding attention mask, since dtype.min + dtype.min = -inf.\n</span>            <span class=\"c1\"># `F.scaled_dot_product_attention()` doesn't handle -inf like you'd expect, instead\n</span>            <span class=\"c1\"># it can produce NaNs.\n</span>            <span class=\"nf\">ensure_finite_</span><span class=\"p\">(</span><span class=\"n\">attention_bias</span><span class=\"p\">,</span> <span class=\"n\">check_neg_inf</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">check_pos_inf</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"745:1-746:649\">単調な処理が続くので基本的に各項の説明は省略しますが <code>attention_bias</code> に関してだけ少し触れておきます。こちらは <code>attention_mask</code> とその存在がややこしいというか紛らわしいです。<br>\n<code>attention_bias</code> とは、セルフアテンションのスコアに加算されるバイアス項です。アテンションスコアに情報を付与する枠組みであり、<code>attention_mask</code> から <code>attention_bias</code> が導出されています。<code>attention_mask</code> はモデルに与える「マスクの意図」を表す入力であり、<code>attention_bias</code> は実際にスコア計算に加えられる数値バイアスです。多くの実装ではこの二者は表裏一体であり、<code>attention_mask</code> と <code>attention_bias</code> は一対のものとして扱われています。この二つは、役割は同じで表現が異なるだけです。</p>\n<ul data-sourcepos=\"747:1-757:0\">\n<li data-sourcepos=\"747:1-747:67\">\n<code>attention_mask</code> : ユーザ/高レベルが指定するマスク</li>\n<li data-sourcepos=\"748:1-757:0\">\n<code>attention_bias</code> : 内部計算で用いるマスクの実体</li>\n</ul>\n<p data-sourcepos=\"758:1-758:318\"><strong>ALiBi</strong> という手法に関する<a href=\"https://en.wikipedia.org/wiki/Transformer_(deep_learning_architecture)#:~:text=%5Bedit%5D-,ALiBi%20(Attention%20with%20Linear%20Biases)%5B72%5D%20is%20not,%F0%9D%91%89,-Here%2C\" rel=\"nofollow noopener\" target=\"_blank\">こちらの Wiki</a>の一節に、attention_bias のしっくりとくる良い説明がありましたので、紹介のため載せておきます。ALiBi は今回の推論で用いられている手法ではありませんが、<code>attention_bias</code> の類のものです。</p>\n<blockquote data-sourcepos=\"762:1-763:263\">\n<p data-sourcepos=\"762:3-763:263\">ALiBi (Attention with Linear Biases) is not a replacement for the positional encoder on the original transformer. Instead, it is an additional positional encoder that is directly plugged into the attention mechanism.<br>\nALiBi（線形バイアス付きアテンション）は、元のトランスフォーマーの位置エンコーダを置き換えるものではありません。これは、アテンション機構に直接接続される追加の位置エンコーダです。</p>\n</blockquote>\n<blockquote data-sourcepos=\"765:1-766:90\">\n<p data-sourcepos=\"765:3-766:90\">The idea being that the linear bias matrix is a softened mask.<br>\n線形バイアス行列は、緩和されたマスクであるという考え方です。</p>\n</blockquote>\n<h4 data-sourcepos=\"798:1-798:29\">\n<span id=\"llm-decoder-での計算\" class=\"fragment\"></span><a href=\"#llm-decoder-%E3%81%A7%E3%81%AE%E8%A8%88%E7%AE%97\"><i class=\"fa fa-link\"></i></a>LLM Decoder での計算</h4>\n<p data-sourcepos=\"800:1-801:132\">いよいよ主要な処理としては最後になるLLM Decoderでの処理に入ります。<br>\n該当のコード箇所は<a href=\"https://huggingface.co/cyan2k/molmo-7B-D-bnb-4bit/blob/main/modeling_molmo.py#L2186\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>です。</p>\n<h5 data-sourcepos=\"806:1-806:18\">\n<span id=\"llmの実体\" class=\"fragment\"></span><a href=\"#llm%E3%81%AE%E5%AE%9F%E4%BD%93\"><i class=\"fa fa-link\"></i></a>LLMの実体</h5>\n<p data-sourcepos=\"807:1-808:309\">まずはLLMの実体を確認します。下記、<a href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AE-model-%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\">全体図</a>の抜粋を参照してください。<br>\nLLMの実体は <code>blocks</code> というインスタンス属性に格納されているオブジェクトです。<code>ModuleList</code> はレイヤーを格納しているだけのクラスなので、LLM のメインのコンポーネントと言えるのは <code>MolmoSequentialBlock</code> ということになるでしょう。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"810:1-829:3\"><div class=\"highlight\"><pre><code>- MolmoForCausalLM\n└── model: <span class=\"nt\">-Molmo</span>\n    ├── transformer: <span class=\"nt\">-ModuleDict</span>\n    │   ├── wte: <span class=\"nt\">-Embedding</span><span class=\"o\">()</span>\n    │   ├── emb_drop: <span class=\"nt\">-Dropout</span><span class=\"o\">(</span><span class=\"nv\">p</span><span class=\"o\">=</span>0, <span class=\"nv\">inplace</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n    │   ├── ln_f: <span class=\"nt\">-RMSLayerNorm</span><span class=\"o\">()</span>\n    │   ├── blocks: <span class=\"nt\">-ModuleList</span>\n    │   │   └── 0-27: 28 x <span class=\"nt\">-MolmoSequentialBlock</span> <span class=\"c\"># &lt;--------- x 28</span>\n    │   │       ├── dropout: <span class=\"nt\">-Dropout</span><span class=\"o\">(</span><span class=\"nv\">p</span><span class=\"o\">=</span>0, <span class=\"nv\">inplace</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n    │   │       ├── act: <span class=\"nt\">-SwiGLU</span><span class=\"o\">()</span>\n    │   │       ├── attn_out: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>3584, <span class=\"nv\">out_features</span><span class=\"o\">=</span>3584, <span class=\"nv\">bias</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n    │   │       ├── ff_out: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>18944, <span class=\"nv\">out_features</span><span class=\"o\">=</span>3584, <span class=\"nv\">bias</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n    │   │       ├── rotary_emb: <span class=\"nt\">-RotaryEmbedding</span><span class=\"o\">()</span>\n    │   │       ├── attn_norm: <span class=\"nt\">-RMSLayerNorm</span><span class=\"o\">()</span>\n    │   │       ├── ff_norm: <span class=\"nt\">-RMSLayerNorm</span><span class=\"o\">()</span>\n    │   │       ├── att_proj: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>3584, <span class=\"nv\">out_features</span><span class=\"o\">=</span>4608, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n    │   │       └── ff_proj: <span class=\"nt\">-Linear4bit</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>3584, <span class=\"nv\">out_features</span><span class=\"o\">=</span>37888, <span class=\"nv\">bias</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n    │   └── ff_out: <span class=\"nt\">-Linear</span><span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>3584, <span class=\"nv\">out_features</span><span class=\"o\">=</span>152064, <span class=\"nv\">bias</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"831:1-832:283\">具体的な実装をざっと確認します。<br>\nモデルのコード内には <code>MolmoBlock()</code> というクラスが存在しますが、こちらもLLMの本体の一部です。<code>MolmoSequentialBlock()</code> は この<code>MolmoBlock()</code> を継承しているため、実質、この2つのクラスがLLMの実体と言えるでしょう。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"834:1-843:3\">\n<div class=\"code-lang\"><span class=\"bold\">実装の状態（簡略図）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># 実装メソッドと継承関係（主要なメソッドのみ抜粋）\n</span><span class=\"k\">class</span> <span class=\"nc\">MolmoBlock</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_scaled_dot_product_attention</span>\n    <span class=\"k\">def</span> <span class=\"nf\">attention</span>\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MolmoSequentialBlock</span><span class=\"p\">(</span><span class=\"n\">MolmoBlock</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">()</span>\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"845:1-850:3\">\n<div class=\"code-lang\"><span class=\"bold\">処理順序の包含関係</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">-Molmo</span>.forward<span class=\"o\">()</span>\n└── <span class=\"nt\">-MolmoSequentialBlock</span>.forward × <span class=\"o\">(</span>28<span class=\"o\">)</span>\n    └── <span class=\"nt\">-Molmoblock</span>.attention\n        └── <span class=\"nt\">-Molmoblock</span>.scaled_dot_product_attention\n</code></pre></div>\n</div>\n<p data-sourcepos=\"852:1-852:179\"><code>Molmo()</code> クラスにおいては、下記のようにして LLM の本体（28ブロック分の<code>MolmoSequentialBlock()</code>）がインスタンス属性へセットされます。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"854:1-860:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.__init__()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">MolmoBlock</span><span class=\"p\">.</span><span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__cache</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">n_layers</span><span class=\"p\">)]</span>\n<span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">block_group_size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nc\">NotImplementedError</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">blocks</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">ModuleList</span><span class=\"p\">(</span><span class=\"n\">blocks</span><span class=\"p\">)})</span>\n</code></pre></div>\n</div>\n<h5 data-sourcepos=\"867:1-867:51\">\n<span id=\"llm大規模言語モデルでの計算\" class=\"fragment\"></span><a href=\"#llm%E5%A4%A7%E8%A6%8F%E6%A8%A1%E8%A8%80%E8%AA%9E%E3%83%A2%E3%83%87%E3%83%AB%E3%81%A7%E3%81%AE%E8%A8%88%E7%AE%97\"><i class=\"fa fa-link\"></i></a>LLM（大規模言語モデル）での計算</h5>\n<p data-sourcepos=\"868:1-869:56\">LLM の計算に入ります。論文の説明通り、本稿で取り扱うモデル（Molmo-7B-D）におけるLLMデコーダは、Qwen2をベースとしており、新たに追加で学習を行ったものです。Qwen2はGPT系のモデルであり、Transformerアーキテクチャに基づいています。細かなテクニックを除けば、基本的な仕組みはTransformerと同様であるため、Transformerの基本的な構造を理解していれば、全体の処理の流れを把握することは難しくないでしょう。<br>\nこちらがLLM Decoderを実行するコードです。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"871:1-889:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># Apply blocks one-by-one.\n</span><span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">block_group_size</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"c1\">#--【A】--\n</span>    <span class=\"k\">for</span> <span class=\"n\">block_idx</span><span class=\"p\">,</span> <span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"n\">blocks</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">output_hidden_states</span><span class=\"p\">:</span>\n            <span class=\"c1\"># add hidden states\n</span>            <span class=\"n\">all_hidden_states</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n        <span class=\"n\">layer_past</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> <span class=\"k\">if</span> <span class=\"n\">past_key_values</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"n\">past_key_values</span><span class=\"p\">[</span><span class=\"n\">block_idx</span><span class=\"p\">]</span>\n        <span class=\"c1\">#--【B】--\n</span>        <span class=\"c1\"># x = [1, 981, 3584]     ⇐ Molmo.forward() 一周目のみ\n</span>        <span class=\"c1\"># x = [1,   1, 3584]     ⇐ Molmo.forward() 二周目以降\n</span>        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"nf\">block</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">attention_bias</span><span class=\"o\">=</span><span class=\"n\">attention_bias</span><span class=\"p\">,</span> <span class=\"n\">position_ids</span><span class=\"o\">=</span><span class=\"n\">position_ids</span><span class=\"p\">,</span> <span class=\"n\">drop_mask</span><span class=\"o\">=</span><span class=\"n\">response_mask</span><span class=\"p\">,</span> <span class=\"n\">layer_past</span><span class=\"o\">=</span><span class=\"n\">layer_past</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">attn_key_values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">cache</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span>\n            <span class=\"n\">attn_key_values</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"894:1-895:374\"><strong>【 A 部 : トランスフォーマーブロックのイテレーション】</strong><br>\nself.transformer.blocks（28 層の MolmoSequentialBlock）を enumerate で回し、先頭から順に処理を進めます。各イテレーションで変数 <code>x</code> には直前の層までで得られた最新の系列表現が格納されており、この <code>x</code> を新たに取り出したブロックに渡すことで、時系列的に情報が伝播していきます。</p>\n<p data-sourcepos=\"897:1-898:361\"><strong>【 B 部 : 各ブロックへの入力と適用処理】</strong><br>\nまず過去ステップの key / value を保持している <code>past_key_values</code> が渡されていれば、その層に対応する要素を引き出し <code>layer_past</code> として用意します。続いて <code>block()</code> を呼び出し、画像特徴量とテキスト特徴量が格納された現在の入力系列 <code>x</code> に対して Attention 処理を行います。</p>\n<p data-sourcepos=\"900:1-902:442\"><strong>【 出力 】</strong><br>\n各ブロック呼び出しから返却されるのは二つの値です。一つ目の <code>x</code> はそのブロックを通過した後の系列表現で、次の層への入力となる「最新の文脈埋め込み」を指します。特にシーケンスの最後尾は次トークンの分布情報を含むため、最終出力時には最新の <code>x</code> を末尾だけ切り出して次の語生成に繋げることが可能です。<br>\n二つ目の <code>cache</code> は、Attention 計算で用いた key・value 行列をまとめたタプルで、デコーダの逐次生成時に「履歴として蓄積されたメモリ（コンテキスト情報）」として再利用されます。最終的に28回の反復処理を終えた段階で、この <code>x</code> が最終的なデコーダ出力として、またすべての <code>cache</code> が <code>attn_key_values</code> に集約されて戻されます。</p>\n<p data-sourcepos=\"906:1-906:201\">基本的な LLM Decoder モデルなのであまり特筆すべきところはありませんが、より詳しく上記 <code>block</code> の実装の中身（ <code>MolmoSequentialBlock()</code> ）を見てみます。</p>\n<div class=\"code-frame\" data-lang=\"shell\" data-sourcepos=\"909:1-986:3\"><div class=\"highlight\"><pre><code>1.  Attention 用入力の正規化と準備  \n<span class=\"o\">(</span>処理の意図<span class=\"o\">)</span> 残差前に正規化をかけるかどうかを分岐し、Attention 射影の準備を行う  \n  • config.norm_after<span class=\"o\">=</span>False の場合 ▶︎ atten_in <span class=\"o\">=</span> self.attn_norm<span class=\"o\">(</span>x<span class=\"o\">)</span>  \n  • config.norm_after<span class=\"o\">=</span>True の場合  ▶︎ atten_in <span class=\"o\">=</span> x  \n  • atten_in を self.attn_proj に渡すために保持  \n\n<span class=\"nt\">----------------------------------------</span>\n2.  Q/K/V の一括射影と分割  \n<span class=\"o\">(</span>処理の意図<span class=\"o\">)</span> １回の線形変換で Query, Key, Value を得る  \n  • qkv <span class=\"o\">=</span> self.att_proj<span class=\"o\">(</span>atten_in<span class=\"o\">)</span>  \n  • config.clip_qkv が指定されていれば qkv.clamp_<span class=\"o\">(</span><span class=\"nv\">min</span><span class=\"o\">=</span><span class=\"nt\">-clip</span>, <span class=\"nv\">max</span><span class=\"o\">=</span>clip<span class=\"o\">)</span>  \n  • q, k, v <span class=\"o\">=</span> qkv.split<span class=\"o\">(</span>self.fused_dims, <span class=\"nv\">dim</span><span class=\"o\">=</span><span class=\"nt\">-1</span><span class=\"o\">)</span>  \n\n<span class=\"nt\">----------------------------------------</span>\n3.  マルチヘッドセルフアテンションの計算  \n<span class=\"o\">(</span>処理の意図<span class=\"o\">)</span> 各ヘッドごとに scaled dot product attention を計算し、元の次元に戻す  \n  • att, cache <span class=\"o\">=</span> self.attention<span class=\"o\">(</span>q, k, v, attention_bias, position_ids, drop_mask, layer_past, use_cache<span class=\"o\">)</span>  \n\n  <span class=\"nt\">---</span> <span class=\"s1\">'self.attention'</span> の内部処理 <span class=\"nt\">---------------</span>\n  a<span class=\"o\">)</span> Q/KV の形状変換  \n     - B, T, C <span class=\"o\">=</span> q.size<span class=\"o\">()</span>  \n     - q → view→transpose → <span class=\"o\">(</span>B, nh, T, hs<span class=\"o\">)</span>  \n     - k, v → view→transpose → <span class=\"o\">(</span>B, n_kv_h, T, hs<span class=\"o\">)</span>  \n  b<span class=\"o\">)</span> 相対位置埋め込み（RoPE）  \n     - <span class=\"k\">if </span>use_position_ids and rope: q, k <span class=\"o\">=</span> self.rotary_emb<span class=\"o\">(</span>q, k, position_ids<span class=\"o\">)</span>  \n  c<span class=\"o\">)</span> 過去キー・値の連結  \n     - <span class=\"k\">if </span>layer_past:  \n         k <span class=\"o\">=</span> <span class=\"nb\">cat</span><span class=\"o\">(</span>past_key, k, <span class=\"nv\">dim</span><span class=\"o\">=</span><span class=\"nt\">-2</span><span class=\"o\">)</span>  \n         v <span class=\"o\">=</span> <span class=\"nb\">cat</span><span class=\"o\">(</span>past_value, v, <span class=\"nv\">dim</span><span class=\"o\">=</span><span class=\"nt\">-2</span><span class=\"o\">)</span>  \n     - present <span class=\"o\">=</span> <span class=\"o\">(</span>k, v<span class=\"o\">)</span> <span class=\"k\">if </span>use_cache <span class=\"k\">else </span>None  \n  d<span class=\"o\">)</span> 注意バイアスの整形  \n     - slice attention_bias[:, :, key_len-query_len:key_len, :key_len]  \n     - attention_bias <span class=\"o\">=</span> _cast_attn_bias<span class=\"o\">(</span>sliced_bias, dtype<span class=\"o\">)</span>  \n  e<span class=\"o\">)</span> _scaled_dot_product_attention の呼び出し  \n     <span class=\"nt\">---</span> <span class=\"s1\">'_scaled_dot_product_attention'</span> の内部処理 <span class=\"nt\">---------------</span>  \n     i<span class=\"o\">)</span>  マスクをデバイスへ転送  \n         - <span class=\"k\">if </span>attn_mask is not None: attn_mask <span class=\"o\">=</span> attn_mask.to<span class=\"o\">(</span>q.device<span class=\"o\">)</span>  \n     ii<span class=\"o\">)</span> FlashAttention が利用可能か判定  \n         - <span class=\"k\">if </span>flash_attn_func and attn_mask is None:  \n             r <span class=\"o\">=</span> flash_attn_func<span class=\"o\">(</span>q.T, k.T, v.T, dropout_p, <span class=\"nv\">causal</span><span class=\"o\">=</span>is_causal<span class=\"o\">)</span>  \n             <span class=\"k\">return </span>r.T  \n     iii<span class=\"o\">)</span> GQA（Grouped Query Attention）対応  \n         - num_q_heads ≠ num_kv_heads の場合 k, v を repeat_interleave  \n     iv<span class=\"o\">)</span> PyTorch 標準 SDPA 呼び出し  \n         output <span class=\"o\">=</span> F.scaled_dot_product_attention<span class=\"o\">(</span>q, k, v, attn_mask, dropout_p, is_causal<span class=\"o\">)</span>  \n         <span class=\"k\">return </span>output  \n     <span class=\"nt\">-------------------------------------------------------------</span>  \n  f<span class=\"o\">)</span> ヘッド再結合と射影  \n     - att: <span class=\"o\">(</span>B, nh, T, hs<span class=\"o\">)</span> → transpose→contiguous→view → <span class=\"o\">(</span>B, T, C<span class=\"o\">)</span>  \n     - out <span class=\"o\">=</span> self.attn_out<span class=\"o\">(</span>att<span class=\"o\">)</span>  \n     - <span class=\"k\">return </span>out, present  \n  <span class=\"nt\">-------------------------------------------------------------</span>  \n\n<span class=\"nt\">----------------------------------------</span>\n4.  Attention 後の正規化と残差結合  \n<span class=\"o\">(</span>処理の意図<span class=\"o\">)</span> Post-LN モードなら正規化をかけ、残差＋ドロップアウトを適用  \n  • <span class=\"k\">if </span>config.norm_after: att <span class=\"o\">=</span> self.attn_norm<span class=\"o\">(</span>att<span class=\"o\">)</span>  \n  • x <span class=\"o\">=</span> x + self.dropout<span class=\"o\">(</span>att, drop_mask<span class=\"o\">)</span>  \n  • og_x <span class=\"o\">=</span> x  ※FFN 用残差として保持  \n\n<span class=\"nt\">----------------------------------------</span>\n5.  フィードフォワードネットワーク（FFN）の適用  \n<span class=\"o\">(</span>処理の意図<span class=\"o\">)</span> 位置ごとの非線形変換で表現力を補強  \n  • <span class=\"k\">if </span>not config.norm_after: x <span class=\"o\">=</span> self.ff_norm<span class=\"o\">(</span>x<span class=\"o\">)</span>  \n  • x <span class=\"o\">=</span> self.ff_proj<span class=\"o\">(</span>x<span class=\"o\">)</span>                ▶︎ 線形変換 <span class=\"o\">(</span>d_model→hidden<span class=\"o\">)</span>  \n  • x <span class=\"o\">=</span> self.act<span class=\"o\">(</span>x<span class=\"o\">)</span>                   ▶︎ SwiGLU 等の活性化  \n  • x <span class=\"o\">=</span> self.ff_out<span class=\"o\">(</span>x<span class=\"o\">)</span>                ▶︎ 出力射影 <span class=\"o\">(</span>hidden×multiplier→d_model<span class=\"o\">)</span>  \n  • <span class=\"k\">if </span>config.norm_after: x <span class=\"o\">=</span> self.ff_norm<span class=\"o\">(</span>x<span class=\"o\">)</span>  \n  • x <span class=\"o\">=</span> self.dropout<span class=\"o\">(</span>x, drop_mask<span class=\"o\">)</span>  \n  • x <span class=\"o\">=</span> og_x + x                      ▶︎ 残差結合  \n\n<span class=\"nt\">----------------------------------------</span>\n6.  最終出力とキャッシュの返却  \n<span class=\"o\">(</span>処理の意図<span class=\"o\">)</span> ブロックの出力テンソルと次ステップ用キャッシュを呼び出し元に返す  \n  • <span class=\"k\">return </span>x, cache  \n\n</code></pre></div></div>\n<p data-sourcepos=\"991:1-991:30\"><strong>【 2 : Q/K/V の分割】</strong></p>\n<p data-sourcepos=\"993:1-994:346\">2周目以降は最新の生成トークン1語のみの処理になります。Attention 計算に必要な以前までの情報には後述の Attention キャッシュを利用します。<br>\nこれらの Attention キャッシュが何かわからないという方向けに、KVキャッシュを説明する記事をいくつか載せましたので、参照してみてください。記事を読んでもよくわからない場合は、とりあえず読み進めてみてください。続きにも詳しく書いております。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"996:1-1010:3\">\n<div class=\"code-lang\"><span class=\"bold\">MolmoSequentialBlock.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># (q), k, v = [1, 981, (3584) 512]   ⇐ Molmo.forward() 一周目のみ\n# (q), k, v = [1,   1, (3584) 512]   ⇐ Molmo.forward() 二周目以降\n</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">qkv</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fused_dims</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get attention scores.\n</span><span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_activation_checkpoint_fn</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">att</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_activation_checkpoint_fn</span><span class=\"p\">(</span>  <span class=\"c1\"># type: ignore\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">attention</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">attention_bias</span><span class=\"p\">,</span> <span class=\"n\">position_ids</span><span class=\"o\">=</span><span class=\"n\">position_ids</span><span class=\"p\">,</span> <span class=\"n\">layer_past</span><span class=\"o\">=</span><span class=\"n\">layer_past</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># att = [1, 981, 3584]     ⇐ Molmo.forward() 一周目のみ\n</span>    <span class=\"c1\"># att = [1,   1, 3584]     ⇐ Molmo.forward() 二周目以降\n</span>    <span class=\"n\">att</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">attention</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">attention_bias</span><span class=\"p\">,</span> <span class=\"n\">position_ids</span><span class=\"o\">=</span><span class=\"n\">position_ids</span><span class=\"p\">,</span> <span class=\"n\">layer_past</span><span class=\"o\">=</span><span class=\"n\">layer_past</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"1012:1-1012:113\"><iframe id=\"qiita-embed-content__1ac666637e4311e9c4eb099a6d56bc65\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1ac666637e4311e9c4eb099a6d56bc65\" data-content=\"https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FTransformer_%28deep_learning_architecture%29%23%3A%7E%3Atext%3D%255B11%255D-%2CKV%2520caching%2C-%255Bedit%255D\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"1014:1-1014:57\"><iframe id=\"qiita-embed-content__f4ddac99ff659dfdbdfc361ebf185625\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f4ddac99ff659dfdbdfc361ebf185625\" data-content=\"https%3A%2F%2Fhuggingface.co%2Fdocs%2Ftransformers%2Fv4.44.0%2Fkv_cache\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"1016:1-1016:103\"><iframe id=\"qiita-embed-content__1149a823334ad2b5642ccaefd436659f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1149a823334ad2b5642ccaefd436659f\" data-content=\"https%3A%2F%2Fmedium.com%2F%40florian_algo%2Fmain-stages-of-auto-regressive-decoding-for-llm-inference-915d6e0a4418\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"1023:1-1025:112\"><strong>【 3-c : Attention キャッシュの保存と再利用】</strong><br>\nLLM の逐次生成では、Attention 計算の過去の <code>key</code>・ <code>value</code> を「コンテキスト」（または「メモリ」、「履歴」）として持ち続けることで、一度計算した注意重みを再利用しながら効率良く長い依存関係を扱えます。<br>\n各 <code>MolmoSequentialBlock</code> の呼び出し時には、Attention 計算で用いたキー・バリュー行列を</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"1026:1-1028:3\">\n<div class=\"code-lang\"><span class=\"bold\">MolmoBlock.attention()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">present</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">use_cache</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"1029:1-1030:120\">としてまとめ、<code>cache</code> として返却します。そして、28層の <code>block</code>( <code>MolmoSequentialBlock</code> ) ループの中で <code>attn_key_values.append(cache)</code> によって蓄積します。こうして得られた <code>attn_key_values</code> は、<code>Molmo.forward()</code> の戻り値として <strong><code>past_key_values</code></strong> という名前で受け取られます。そして、次ステップにおける <code>Molmo.forward()</code> の LLM デコーディング時にフィードバックされ、再び <code>layer_past=past_key_values[i]</code> として <code>block</code> 各層に渡されます。<br>\nこのようにキャッシュを保持し、フィードバックすることでコンテキストが捉えられます</p>\n<p data-sourcepos=\"1033:1-1034:222\">よりイメージを鮮明にするために、<code>past_key_values</code> の具体的なデータ形状も確認しておきます。<code>past_key_values</code> は実際に <code>Molmo.forward()</code> の引数を保存して調べたので簡易的な例ではなく実際の情報になります（調べるのに結構時間がかかりました）。<br>\nちなみに、私は<code>past_key_values</code>を最初に見たとき、past の key の value（過去のkeyの値）と思っていたのですが、正しい理解はPast key and value（過去の <code>key</code> と <code>value</code>）です。</p>\n<p data-sourcepos=\"1036:1-1037:629\"><strong>構造およびテンソル形状</strong><br>\n<code>past_key_values</code> は長さ  (28, 2) のリストで、各要素は <code>(k, v)</code> のタプルです。リストインデックス <code>0</code>～<code>27</code> がそれぞれ <code>MolmoSequentialBlock</code> の 28 層に対応します。各 <code>k</code> または <code>v</code> は <code>(1, 4, seq_len, 128)</code> の形状を持ち、推論を重ねるごとに <code>seq_len</code>（過去トークン数）が増加します（例: 981 → 1081 …）。ここで <code>4</code> は Attention のキー／バリューヘッド数（<code>effective_n_kv_heads</code>）です。<code>past_key_values</code> の形状をまとめて書くとするならば、 <code>[28, 2, 1, 4, seq_len, 128]</code> のような形状をしています。</p>\n<blockquote data-sourcepos=\"1038:1-1038:297\">\n<p data-sourcepos=\"1038:3-1038:297\">※ 誤解を避けるために補足すると、先に示した <code>[28, 2, 1, 4, seq_len, 128]</code> のような「リストと torch.Tensor の混在表記」は便宜的な説明であり、実際にはリスト内の各要素が純粋なテンソルオブジェクトで管理されています。</p>\n</blockquote>\n<p data-sourcepos=\"1051:1-1052:159\"><strong>【 3-e-iv : Scaled Dot-Product Attention の実装】</strong><br>\nLLM Decoderにおける計算のコアである Attention の計算です。下記コードより Attention の計算にエントリーし結果を得ます。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"1053:1-1063:3\">\n<div class=\"code-lang\"><span class=\"bold\">MolmoSequentialBlock.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\"># Get attention scores.\n</span><span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_activation_checkpoint_fn</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">att</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_activation_checkpoint_fn</span><span class=\"p\">(</span>  <span class=\"c1\"># type: ignore\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">attention</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">attention_bias</span><span class=\"p\">,</span> <span class=\"n\">position_ids</span><span class=\"o\">=</span><span class=\"n\">position_ids</span><span class=\"p\">,</span> <span class=\"n\">layer_past</span><span class=\"o\">=</span><span class=\"n\">layer_past</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># att = [1, 981, 3584]     ⇐ Molmo.forward() 一周目のみ\n</span>    <span class=\"c1\"># att = [1,   1, 3584]     ⇐ Molmo.forward() 二周目以降\n</span>    <span class=\"n\">att</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">attention</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">attention_bias</span><span class=\"p\">,</span> <span class=\"n\">position_ids</span><span class=\"o\">=</span><span class=\"n\">position_ids</span><span class=\"p\">,</span> <span class=\"n\">layer_past</span><span class=\"o\">=</span><span class=\"n\">layer_past</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"1065:1-1066:224\">Attention の計算は、PyTorch 標準の <code>scaled_dot_product_attention()</code> 関数をそのまま呼び出して実装されています。該当箇所は <code>F._scaled_dot_product_attention()</code>という１行で、クエリ（q）とキー（k）の内積をスケーリングし、ソフトマックスを経てバリュー（v）に適用する処理を内部で一括して行います。<br>\nキャッシュによる次元の変化としては、二周目以降は query（ および attention_mask ）の長さが 1 となるので生成される att ( attention )の長さも 1 になるという仕組みです。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"1068:1-1092:3\">\n<div class=\"code-lang\"><span class=\"bold\">MolmoBlock._scaled_dot_product_attention()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"n\">torch.nn</span> <span class=\"kn\">import</span> <span class=\"n\">functional</span> <span class=\"k\">as</span> <span class=\"n\">F</span>\n<span class=\"c1\"># …\n# 省略\n# …\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_scaled_dot_product_attention</span><span class=\"p\">(</span>\n        <span class=\"n\">self</span><span class=\"p\">,</span>\n        <span class=\"c1\"># …\n</span>        <span class=\"c1\"># 省略\n</span>        <span class=\"c1\"># …\n</span>\n            <span class=\"c1\"># ⇓ Molmo.forward() 一周目のみ\n</span>            <span class=\"c1\"># q, k, v   = [1, 28, 981, 128]\n</span>            <span class=\"c1\"># attn_mask = [1,  1, 981, 981]\n</span>            <span class=\"k\">return</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">scaled_dot_product_attention</span><span class=\"p\">(</span>\n                                       <span class=\"c1\"># ⇓ Molmo.forward() 二周目以降\n</span>                <span class=\"n\">q</span><span class=\"p\">,</span>                     <span class=\"c1\"># [1, 28,       1,     128]\n</span>                <span class=\"n\">k</span><span class=\"p\">,</span>                     <span class=\"c1\"># [1, 28, seq_len,     128]\n</span>                <span class=\"n\">v</span><span class=\"p\">,</span>                     <span class=\"c1\"># [1, 28, seq_len,     128]\n</span>                <span class=\"n\">attn_mask</span><span class=\"o\">=</span><span class=\"n\">attn_mask</span><span class=\"p\">,</span>   <span class=\"c1\"># [1,  1,       1, seq_len]\n</span>                <span class=\"n\">dropout_p</span><span class=\"o\">=</span><span class=\"n\">dropout_p</span><span class=\"p\">,</span>\n                <span class=\"n\">is_causal</span><span class=\"o\">=</span><span class=\"n\">is_causal</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<h4 data-sourcepos=\"1098:1-1098:29\">\n<span id=\"llm計算後の後処理\" class=\"fragment\"></span><a href=\"#llm%E8%A8%88%E7%AE%97%E5%BE%8C%E3%81%AE%E5%BE%8C%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>LLM計算後の後処理</h4>\n<p data-sourcepos=\"1101:1-1101:208\">最後の処理として、LLM デコーダーから得られた隠れ状態を「最終的なトークン単位のロジット（次の一単語の分布）」に変換する <strong>後処理</strong> があります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"1105:1-1150:3\">\n<div class=\"code-lang\"><span class=\"bold\">Molmo.forward()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">#--【A】--\n</span><span class=\"k\">if</span> <span class=\"n\">images</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">and</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">use_cls_feature</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">num_image</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">cat</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"n\">num_image</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"n\">num_image</span><span class=\"p\">])],</span>\n        <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\">#--【B】--\n</span><span class=\"k\">if</span> <span class=\"n\">last_logits_only</span><span class=\"p\">:</span>\n    <span class=\"c1\"># shape: (batch_size, 1, d_model)\n</span>    <span class=\"k\">if</span> <span class=\"n\">append_last_valid_logits</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">last_valid_output</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span>\n            <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">arange</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">),</span> <span class=\"n\">append_last_valid_logits</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">)]</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">last_valid_output</span><span class=\"p\">.</span><span class=\"nf\">unsqueeze</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:].</span><span class=\"nf\">unsqueeze</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#--【C】--\n# Apply final layer norm.\n# shape: (batch_size, seq_len or 1, d_model)\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">ln_f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore\n</span><span class=\"k\">if</span> <span class=\"n\">output_hidden_states</span><span class=\"p\">:</span>\n    <span class=\"c1\"># add final hidden state post-final-layernorm, following HuggingFace's convention\n</span>    <span class=\"n\">all_hidden_states</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#--【D】--\n# Get logits.\n# shape: (batch_size, seq_len or 1, vocab_size)\n</span><span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">weight_tying</span><span class=\"p\">:</span>\n    <span class=\"n\">logits</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">linear</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"n\">wte</span><span class=\"p\">.</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore\n</span><span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">logits</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">transformer</span><span class=\"p\">.</span><span class=\"nf\">ff_out</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore\n</span><span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">scale_logits</span><span class=\"p\">:</span>\n    <span class=\"n\">logits</span><span class=\"p\">.</span><span class=\"nf\">mul_</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">d_model</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#--【E】--\n</span><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">last_logits_only</span> <span class=\"ow\">and</span> <span class=\"n\">append_last_valid_logits</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">last_valid_logit</span> <span class=\"o\">=</span> <span class=\"n\">logits</span><span class=\"p\">[</span>\n        <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">arange</span><span class=\"p\">(</span><span class=\"n\">logits</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">logits</span><span class=\"p\">.</span><span class=\"n\">device</span><span class=\"p\">),</span> <span class=\"n\">append_last_valid_logits</span><span class=\"p\">]</span>\n    <span class=\"n\">logits</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">cat</span><span class=\"p\">([</span><span class=\"n\">logits</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">last_valid_logit</span><span class=\"p\">[:,</span> <span class=\"bp\">None</span><span class=\"p\">]],</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">return</span> <span class=\"nc\">ModelOutput</span><span class=\"p\">(</span><span class=\"n\">logits</span><span class=\"o\">=</span><span class=\"n\">logits</span><span class=\"p\">,</span> <span class=\"n\">attn_key_values</span><span class=\"o\">=</span><span class=\"n\">attn_key_values</span><span class=\"p\">,</span> <span class=\"n\">hidden_states</span><span class=\"o\">=</span><span class=\"nf\">tuple</span><span class=\"p\">(</span><span class=\"n\">all_hidden_states</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">output_hidden_states</span> <span class=\"k\">else</span> <span class=\"bp\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore[arg-type]\n</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"1152:1-1152:55\"><strong>[ A. 画像特徴量処理（CLS特徴利用時）]</strong></p>\n<p data-sourcepos=\"1154:1-1154:899\">画像が入力され、かつ CLS トークンを利用する設定が有効な場合、モデルはまず入力系列の先頭にある CLS 埋め込みを保持し、その直後に続く画像パッチの埋め込みをすべて取り除いてから、同じ数だけのゼロ埋めベクトルを末尾に追加します。これにより、画像から抽出された複数のパッチ特徴量は学習や生成の過程で扱われなくなり、代わりに画像全体の要約情報を担う CLS 特徴のみが残ることで計算効率とメモリ使用量の削減を図ります。背景には、Vision Transformer の設計として最初の CLS トークンが全パッチ情報を集約する役割を果たすという考え方があり、このモードでは個々のパッチを扱わずに CLS トークンだけで画像情報を表現するという意図があります。</p>\n<p data-sourcepos=\"1156:1-1156:43\"><strong>[ B. 最後のロジット抽出処理]</strong></p>\n<p data-sourcepos=\"1158:1-1158:621\">自動回帰生成の高速化を目的として、モデルは系列全体の特徴を計算した後に、出力すべき最後のトークンに対応するベクトルのみを抜き出します。具体的には、バッチごとに指定された有効位置があればそこから特徴を抜き出し、なければ系列の末尾要素を取り出して次元を調整します。こうすることで、生成に必要な情報だけを手早く取得し、不要な全系列データの保持を避けることでメモリ使用量を節約しつつ推論速度を向上させる設計になっています。</p>\n<p data-sourcepos=\"1160:1-1160:28\"><strong>[ C. 最終層正規化]</strong></p>\n<p data-sourcepos=\"1162:1-1162:472\">最後の Transformer ブロックを通り抜けた後、出力ベクトルには標準的な LayerNorm が適用されます。この正規化は、各次元の値を均一化して数値的な安定性を確保し、勾配の伝搬を安定化させる役割を果たします。GPT 系モデルではポストノルム構成が一般的であり、このステップによって学習時や推論時の振る舞いがより安定するよう意図されています。</p>\n<p data-sourcepos=\"1165:1-1165:28\"><strong>[ D. ロジット計算]</strong></p>\n<p data-sourcepos=\"1167:1-1167:594\">正規化済みの特徴ベクトルから最終的な出力ロジットを計算する際、モデル設定に応じて埋め込み層の重みをそのまま再利用するか、あるいは専用の線形層を用いるかが切り替えられます。埋め込み層と出力層の重みを共有する「Weight Tying」を有効にすればパラメータ数を削減しつつ性能を維持できる一方で、専用出力層を使うとより柔軟な変換が可能になります。このトレードオフを反映して、両者を切り替えられるようになっています。</p>\n<p data-sourcepos=\"1170:1-1170:34\"><strong>[ E. 最終ロジット調整]</strong></p>\n<p data-sourcepos=\"1172:1-1172:408\">バッチ処理では、バッチ内の異なるサンプルがそれぞれ異なる有効長を持つ場合、「本当の最後のトークン」の位置は各サンプルで異なります。このコードは、各サンプルの実際に有効な最後の位置のlogitsを、出力の最後尾に配置することで、次のトークン予測や損失計算を正確に行うためのものです。</p>\n",
        "body": "# はじめに\n\n【前の記事】\n\nhttps://qiita.com/shinya_2024/items/cf8e89771e682b93a23f\n\n***\n\n- __Molmo ( Multimodal Open Language Model ) モデル__\n\nhttps://huggingface.co/allenai/Molmo-7B-D-0924\n\n- Molmoモデル（量子化バージョン）\n\nhttps://huggingface.co/cyan2k/molmo-7B-D-bnb-4bit\n\nhttps://github.com/cyan2k/molmo-7b-bnb-4bit?tab=readme-ov-file\n\n\n\n\n# モデルのアーキテクチャ（個別要素）\nここからモデルの内部を詳しく覗いていくつもりですが、ソースコードを一行一行順番に説明していたら流石にキリがありません。本稿では、一つの具体的なデータを用いて、そのデータがどのように処理されていくのかの流れを追うことで、内部の機構を見ていくことにします。あくまで、本稿の数字は例示したデータにおける数字です。データの次元など、入力データによって動的に変化しますので、勘違いなさならないようにしてください。\n\n\n## 前処理 (Pre-processor)\n### 処理ロジックにいくつかの要点\n一番初めの「前処理」から見ていくのですが、正直、ここが一番理解しづらい部分かと思います。前処理では、後続のモデル内における処理を考えて前処理されるので、何故そのような前処理をしているのかといった部分が見えてこないからです。全体の流れをわかったうえで見ると、大した複雑性はありませんが、よくわからない状態で見ると逆にさっぱりわからないということになるでしょう（どんな勉強も大抵そうですが…）。\n\n種明かしからするみたく、天下り的な順序での説明になってしまいますが、実際の処理データや実装を見る前に以下の部分については簡単に理解しておきましょう。\n\n\n\n\n\n\n#### クロップ分割（ crop ）とパッチ分割（ patches ）の違い\nモデルアーキテクチャを表す図をみてもわかるように、まず画像は格子状に分割されます。この分割を「クロップ」といいます。各クロップは独立して ViT に入力され、それぞれ個別に処理されます。このクロップは ViT に入力されるとき、実際にはさらに細かく分割されて ViT に入力されます。この分割のことを「パッチ」といいます。クロップの重なり部分のパッチ特徴量はコネクタや LLM へは渡さず、渡されるパッチ特徴が高解像度画像（元の画像）を正確にタイルするようにしています。重なりによりタイル状画像の解像度は若干低下しますが、より多くのクロップを使用することでその影響を補うことができ、重なりは結果を大幅に改善します。\n\n\n<img width=\"450\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/146ed8ff-bcfb-4e2d-9519-5331191f9c91.png\">\n\n\n\n\n\n\n\n#### クロップの分割数の決め方\n今回の例の場合だとクロップの分割は「3×3」となりますが、クロップの分割はいつも一定の分割数でしょうか？答えはノーです。ではこれは一体どの様なロジックでこの分割数になっているのでしょうか？\nクロップ数は固定ではなく、入力画像に合わせて動的に決定されます。具体的には、`image_preprocessing_molmo.py/select_tiling()` 関数が、画像のリサイズ（アップスケーリングまたはダウンスケーリング）の必要性を最小限に抑えながら、指定されたクロップサイズと最大クロップ数の制約内で画像を分割する最適なグリッド構成をルールベースに決定します。Vision Transformer（ViT）の多くは固定サイズの正方形画像しか処理できないため、グリッド内の各正方形がViT の入力サイズと一致するように画像を複数のクロップに分割し、それぞれを高解像度で処理することで、OCR や詳細なキャプショニングなどに必要な細かい情報を保持します。今回のように、各クロップ画像のサイズが 336×336 ピクセルで、1 枚のクロップを 14×14 ピクセルのパッチに分割する場合、各クロップは 24×24 個（合計576個）のパッチに分割されます。なお、以下は事前に config で定めているハイパーパラメータです。\n- クロップの一辺の長さ : 336\n- パッチの一辺の長さ : 14\n\nパッチ分割自体は動的に変化する要素はなく、ViT の入力サイズとパッチサイズは固定であるため、クロップのように複雑な処理を必要としません。\n\n\n<details><summary>コード全文 ( select_tiling() )</summary>\n\n```python:image_preprocessing_molmo.py/select_tiling()\n\ndef select_tiling(h, w, patch_size, max_num_patches):\n    \"\"\"Decide how best to divide in image of size [w, h] in up to max_num_patches of size patch_size\"\"\"\n    original_size = np.stack([h, w])  # [1, 2]\n    original_res = h * w\n    tilings = []\n    for i in range(1, max_num_patches+1):\n        for j in range(1, max_num_patches+1):\n            if i*j <= max_num_patches:\n                tilings.append((i, j))\n    # sort so argmin and argmax favour smaller tilings in the event of a tie\n    tilings.sort(key=lambda x: (x[0]*x[1], x[0]))\n    candidate_tilings = np.array(tilings, dtype=np.int32)  # [n_resolutions, 2]\n    candidate_resolutions = candidate_tilings * patch_size  # [n_resolutions, 2]\n\n    # How much we would need to scale the image to fit exactly in each tiling\n    original_size = np.stack([h, w], dtype=np.float32)  # [1, 2]\n    required_scale_d = candidate_resolutions.astype(np.float32) / original_size\n    required_scale = np.min(required_scale_d, axis=-1, keepdims=True)  # [n_resolutions, 1]\n    if np.all(required_scale < 1):\n        # We are forced to downscale, so try to minimize the amount of downscaling\n        ix = np.argmax(required_scale)\n    else:\n        # Pick the resolution that required the least upscaling so that it most closely fits the image\n        required_scale = np.where(required_scale < 1.0, 10e9, required_scale)\n        ix = np.argmin(required_scale)\n    return candidate_tilings[ix]\n    \n```\n\n</details>\n\n\n\n\n\n\n\n\n\n\n### 前処理データ\nここから、具体的なデータの中身について迫っていきたいと思います。\n\n```python:Colab\n# 【1】\n# load the processor ←（前処理用オブジェクトのインスタンス化）\nprocessor = AutoProcessor.from_pretrained(repo_name, **arguments)\n\n# 【1】\n# load image and prompt ←（前処理）\ninputs = processor.process(\n    images=[Image.open(\"img/lucy.jpg\")],\n    text=\"Describe this image.\",\n)\ninputs = {k: v.to(model.device).unsqueeze(0) for k, v in inputs.items()}\n```\n\n`processor`オブジェクトのクラスを調べると以下のようになっています。全体像のパートにおけるクラス同士の関係を見てもわかるように、`preprocessing_molmo.py` が `image_preprocessing_molmo.py` を呼び出して使っており、前処理のメインのロジックはほとんど `image_preprocessing_molmo.py` 側で実装されているようです。\n\n```\nクラス名: MolmoProcessor\nモジュール名: transformers_modules.cyan2k.molmo-7B-D-bnb-4bit.51097c4251a023d72485963c1ab69f3b6d6a1ec6.preprocessing_molmo\nクラス定義ファイル: /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/preprocessing_molmo.py\n```            \n```text\n■ 前処理に関係するファイル\n・image_preprocessing_molmo.py\n・preprocessing_molmo.py\n```\n\n\nさて、次は実際の「 __元データ（前処理前データ）__ 」と「 __前処理後データ__ 」を見ていきます。\n元データ（前処理前データ）のデータ形式は「JPEG」と「テキスト」です。前処理後データは `inputs` オブジェクトに格納されていますが、この時点ではどの様なデータになっているでしょうか？それぞれデータを調べてみます。\n\nまずは、__元データ（前処理前データ）__ です。`processor.process()` の引数部分を見てください。\n特に変わった部分はなさそうです。\n\n```shell:元データ（前処理前データ）\n・images\n ‐ 画像フォーマット: JPEG\n ‐ カラーモード: RGB\n ‐ 幅x高さ: (1536, 1536)\n・text\n - \"Describe this image.\"\n```\n\n・`images` の画像\n<img width=\"350\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/dc5cb00c-4f4e-4cf5-ba5d-3654184de50d.png\">\n\n\n次にこちらが __前処理後データ__ （ `inputs` オブジェクト）です。\n`inputs` は4つのデータを内包する dict で、中身は全て tensor 形式のオブジェクトであり、次元等は以下のようになっています。これを見ただけではまだ、各データが何を表しているのかさっぱりわからないと思います。このあと、各データについて説明を付けたので、続きをご覧ください。\n\n```shell:前処理後データ（ inputs オブジェクト）の中身\nkey: input_ids       | shape: torch.Size([981])            | Dtype: torch.int64\nkey: images          | shape: torch.Size([10, 576, 588])   | Dtype: torch.float32\nkey: image_input_idx | shape: torch.Size([10, 144])        | Dtype: torch.int32\nkey: image_masks     | shape: torch.Size([10, 576])        | Dtype: torch.float32\n```\n\n- `input_ids [981]`\n最終的に LLM に入力する際のデータの雛形として、画像もテキストも一次元化して並べる形式になっています。下記画像では「152066」が黄色で着色されており、ここにはパッチ特徴量が格納される予定です。実際にはほとんどが画像特徴用に予約されており、ところどころにある非着色の部分は画像の始まりや改行を表す特殊トークンが予約されています。末端の要素は単語 ID になっており、まだ埋め込み前なので単語ごとに ID が付与された状態です。このデータ自体はあくまで一次元ですが、後続のモデル内処理において特徴量用の次元が拡張され、そこに実際の特徴量が格納されます。Model 側のコードではこの配列が変数 x に相当し、ここをベースにあとでテキストと画像の両方の特徴量を埋めていくことになります。\n<img width=\"550\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/b4524476-517d-4ba6-9555-35eff66db281.png\">\n\n- `images [10, 576, 588]`\nクロップした画像情報そのもので、グローバルクロップとローカルクロップを合わせて計10枚の元データを表します。\n1クロップに対し、パッチ数は __576__ 枚 ( $\\left(\\frac{\\text{crop\\_size}}{\\text{patch\\_size}}\\right)^2  \\=\\ \\left(\\frac{336}{14}\\right)^2 \\=\\  24^2$ ) 、\n1パッチに対し、ピクセル数は __588__（ $ \\text{patch\\_size}^2 \\times \\text{channel} \\=\\  14^2 \\times 3$ ）です。\nこの `images` は、後続の Vision Transformer（OpenAI CLIP）に入力されて特徴ベクトルへと埋め込まれたうえで、最終的に `input_ids` に収められます。\n\n- `image_input_idx [10, 144]`\n画像パッチの番地を示す配列で、プーリング後や特殊トークンを考慮した形になっています。これはクロップ間の重複部分を表すデータでもあり、各パッチ特徴量がどこに格納されるかを示す番地のような役割を果たします。\n\n- `image_masks [10, 576]`\n画像領域とパディングされた非画像領域を区別するための配列です。今回のデータではそもそもサンプルが正方形なため、すべて「画像を表す特殊トークン」や True のマスクが設定されているかと思います。\n\n\n***\n### 実装上の前処理データとの対応\n前処理データについてわかってしまえば、前処理の実装を読み解くことは容易いかと思います。その為、あまり実装について書くことはないのですが、調べる上でひとつ分かりづらいと思った点があったのでそれだけ以下に書いておきます。それは、様々なデータの変数名が似通っているが、メソッドごとで微妙に異なり、最終的にどの前処理後データと対応するのかが分かりづらいという点です。いくつかについてのみ、処理途中の変数名と前処理後データを対応させてまとめましたので、実装を読む際にはご参考にしてください。\n\n***\n\n__`MolmoImageProcessor.preprocess()`__\n\n- `image_tokens` : shape = (972,)\n・前処理後データの `inout_ids` となるデータ。\n<img width=\"550\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/97070faa-81b4-4373-8d0e-7377c96c499e.png\">\n\n- `crops` : shape = (10, 576, 588)\n・前処理後データの `images` となるデータ。\n\n- `patch_ordering` : shape = (1440,)\n・前処理後データの `image_input_idx` となるデータ。\n<img width=\"300\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/a26f5880-c634-439c-b157-f659967d707c.png\">\n\n\n\n- `patch_idx` : shape = (10, 144)\n・前処理後データの `image_input_idx` となるデータ。\n`MolmoImageProcessor.build_image_input_idx()` にて、`patch_ordering` に変換処理をするような形で `patch_idx` が作られます。このメソッドは、トークン列中の画像パッチトークンの位置と、画像パッチの順序付けを使って「トークンID → パッチID」のマッピング処理をするものです。`patch_ordering`の段階ではパッチに対して左上から右下にかけて通し番号が振られているだけでしたが、`patch_idx` になると改行トークンがあるので、トークン位置12の次が改行後は14になっています。下図はわかりやすいよう `(10, 12, 12)` に reshape しています。一番上の最初の要素がグローバルクロップで、残り9枚は局所画像クロップのデータになります。各クロップの端に位置するマージンの領域に関して、`overlap_margins` は4パッチですが、2 × 2 のプーリングをするとラップ長は 2 パッチ分になるので下記画像のように 長さが 2 になります。\n後で LLM への入力シーケンスをフラット化して一次元にしたとき、`patch_idx` の情報がないとどこに何が格納されているのかわからなくなり、データに対して狙った演算や操作をすることが難しくなります。この情報さえあれば、後続の処理でファンシーインデックスを使い狙った位置にアクセスしてデータの操作が可能です。下記画像で言えば、「（LLMへ入力するために一次元化した）入力データの前から160番目の要素（トークン位置160）は、ローカルクロップ一枚目の左上の右隣のパッチの情報ですよ」ということを表してます。\n\n<img width=\"300\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/4178d813-2ff6-4dc3-ad85-1f45831c1983.png\">\n\n\n\n- `img_mask` : shape = (10, 576)\n・前処理後データの `image_masks` となるデータ。\n\n\n\n\n\n***\n__`MolmoImageProcessor.image_to_patches_and_tokens()`__\n\n- `joint`\n・前処理後データの `input_ids` となるデータ。\njoint トークン列は画像の「グリッド構造」をテキストのトークンとして表現し、各パッチの位置や区切り情報をモデルに伝えるための「目印」として利用されます。`image_col_token_id` を使って各行の終わりを示し、行の区切りを明示するなど、`joint` は後続の処理において画像特徴量と対応付けるために必要なデータです。\n\n```shell:具体的なデータのイメージ\n[ image_start_token_id,\n  image_patch_token_id, image_patch_token_id, image_patch_token_id, image_patch_token_id, image_col_token_id,\n  image_patch_token_id, image_patch_token_id, image_patch_token_id, image_patch_token_id, image_col_token_id,\n  image_patch_token_id, image_patch_token_id, image_patch_token_id, image_patch_token_id, image_col_token_id,\n  image_end_token_id ]\n```\n\n- `patch_ordering_arr`\n・前処理後データの `image_input_idx` となるデータ。\n\n- `mask_arr`\n・前処理後データの `image_masks` となるデータ。\n\n\n\n\n\n\n\n\n\n\n## 画像エンコーダ (ViT Image Encoder)\nいよいよLLM自体の処理の解説に移ります。ここからが本題です。\n\n### 推論の実行 - forward() の call\nこの節以降からは以下の処理内部の話になります。\n```python:Colab\n# 【2】\n# load the model\nmodel = AutoModelForCausalLM.from_pretrained(repo_name, **arguments)\n\n# 【2】\n# generate output; maximum 200 new tokens; stop generation when <|endoftext|> is generated\noutput = model.generate_from_batch(\n    inputs,\n    GenerationConfig(max_new_tokens=200, stop_strings=\"<|endoftext|>\"),\n    tokenizer=processor.tokenizer,\n)\n```\n\n\nColabにて、Molmoモデルのインスタンスからファイルの場所を出力します。出力方法は上述の「[デバッグ方法](#デバッグ方法colab環境)」を参照してください。\n```shell\nクラス名: MolmoProcessor\nモジュール名: transformers_modules.cyan2k.molmo-7B-D-bnb-4bit.51097c4251a023d72485963c1ab69f3b6d6a1ec6.preprocessing_molmo\nクラス定義ファイル: /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/preprocessing_molmo.py\n```\n\n\nディープラーニングモデルにおいてモデルの処理のコアとなる部分は、モデルの `forward()` 関数です。これがモデルの処理の一丁目一番地になります。`forward()` 関数がどの順番で呼ばれるのかを調べるため、ソースコードを開き、`forward()` 関数の中に pdb のブレークポイントを仕込みます。そして、推論を実行しデバッガコマンドの`w`を実行することで、スタックトレースを標準出力にプリントすることが出来ます。\n以下が `forward()` を呼び出すまでの過程です。スタックトレースの出力からモデルの挙動にあまり関係のないものを除いて編集したものになります。\n\n\n\n\n```python:スタックトレースの出力（編集あり）\n    <ipython>(11)<cell line: 0>()\n        9 \n        10 # generate output; maximum 200 new tokens; stop generation when <|endoftext|> is generated\n    ---> 11 output = model.generate_from_batch(\n        12     inputs,\n        13     GenerationConfig(max_new_tokens=200, stop_strings=\"<|endoftext|>\"),\n\n    /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/modeling_molmo.py(2468)generate_from_batch()\n    2466             assert attention_mask.shape == (batch_size, mask_len)\n    2467 \n    -> 2468         out = super().generate(\n    2469             batch[\"input_ids\"],\n    2470             generation_config,\n\n    /usr/local/lib/python3.11/dist-packages/transformers/generation/utils.py(2252)generate()\n    2250 \n    2251             # 12. run sample (it degenerates to greedy search when `generation_config.do_sample=False`)\n    -> 2252             result = self._sample(\n    2253                 input_ids,\n    2254                 logits_processor=prepared_logits_processor,\n\n    /usr/local/lib/python3.11/dist-packages/transformers/generation/utils.py(3251)_sample()\n    3249 \n    3250             if is_prefill:\n    -> 3251                 outputs = self(**model_inputs, return_dict=True)\n    3252                 is_prefill = False\n    3253             else:\n\n    /usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py(1736)_wrapped_call_impl()\n    1734             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n    1735         else:\n    -> 1736             return self._call_impl(*args, **kwargs)\n    1737 \n    1738     # torchrec tests the code consistency with the following code\n\n    /usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py(1747)_call_impl()\n    1745                 or _global_backward_pre_hooks or _global_backward_hooks\n    1746                 or _global_forward_hooks or _global_forward_pre_hooks):\n    -> 1747             return forward_call(*args, **kwargs)\n    1748 \n    1749         result = None\n\n    > /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/modeling_molmo.py(2362)forward()\n    2360 \n    2361         # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n    -> 2362         outputs = self.model.forward(\n    2363             input_ids=input_ids,\n    2364             input_embeddings=inputs_embeds,\n```\n\n\n<details><summary>スタックトレースの出力（編集なし）</summary>\n\n```python:スタックトレースの出力（編集なし）\n    <ipython-input-4-11c8696a2549>(11)<cell line: 0>()\n        9 \n        10 # generate output; maximum 200 new tokens; stop generation when <|endoftext|> is generated\n    ---> 11 output = model.generate_from_batch(\n        12     inputs,\n        13     GenerationConfig(max_new_tokens=200, stop_strings=\"<|endoftext|>\"),\n\n    /usr/local/lib/python3.11/dist-packages/torch/utils/_contextlib.py(116)decorate_context()\n        114     def decorate_context(*args, **kwargs):\n        115         with ctx_factory():\n    --> 116             return func(*args, **kwargs)\n        117 \n        118     return decorate_context\n\n    /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/modeling_molmo.py(2468)generate_from_batch()\n    2466             assert attention_mask.shape == (batch_size, mask_len)\n    2467 \n    -> 2468         out = super().generate(\n    2469             batch[\"input_ids\"],\n    2470             generation_config,\n\n    /usr/local/lib/python3.11/dist-packages/torch/utils/_contextlib.py(116)decorate_context()\n        114     def decorate_context(*args, **kwargs):\n        115         with ctx_factory():\n    --> 116             return func(*args, **kwargs)\n        117 \n        118     return decorate_context\n\n    /usr/local/lib/python3.11/dist-packages/transformers/generation/utils.py(2252)generate()\n    2250 \n    2251             # 12. run sample (it degenerates to greedy search when `generation_config.do_sample=False`)\n    -> 2252             result = self._sample(\n    2253                 input_ids,\n    2254                 logits_processor=prepared_logits_processor,\n\n    /usr/local/lib/python3.11/dist-packages/transformers/generation/utils.py(3251)_sample()\n    3249 \n    3250             if is_prefill:\n    -> 3251                 outputs = self(**model_inputs, return_dict=True)\n    3252                 is_prefill = False\n    3253             else:\n\n    /usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py(1736)_wrapped_call_impl()\n    1734             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n    1735         else:\n    -> 1736             return self._call_impl(*args, **kwargs)\n    1737 \n    1738     # torchrec tests the code consistency with the following code\n\n    /usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py(1747)_call_impl()\n    1745                 or _global_backward_pre_hooks or _global_backward_hooks\n    1746                 or _global_forward_hooks or _global_forward_pre_hooks):\n    -> 1747             return forward_call(*args, **kwargs)\n    1748 \n    1749         result = None\n\n    > /root/.cache/huggingface/modules/transformers_modules/cyan2k/molmo-7B-D-bnb-4bit/51097c4251a023d72485963c1ab69f3b6d6a1ec6/modeling_molmo.py(2362)forward()\n    2360 \n    2361         # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n    -> 2362         outputs = self.model.forward(\n    2363             input_ids=input_ids,\n    2364             input_embeddings=inputs_embeds,\n```\n</details>\n\n`-> 2468         out = super().generate()` が呼び出されると、モデル固有の `generate()` メソッドから一歩離れて、Hugging Face Transformers と PyTorch が提供する親クラスの処理に移行します。この `Molmo()` が継承する親クラスでは、生成のために複数の内部メソッドが順番に呼び出され、その中で最終的に `forward()`が実行される仕組みになっています。PyTorch の慣習として、ユーザ実装の `forward()` を直接呼び出すのではなく、モデルインスタンスに対して `model( input )` のように呼び出し可能オブジェクト（`__call__`）を介して入力を与えることが推奨されています。実際スタックトレースを見てみると、モデルの骨組みとなる親クラスの一つ `/usr/local/lib/python3.11/dist-packages/transformers/generation/utils.py`の内部にて、 `model( input )` の形で `forward()` が call されています。\n\n\n\n### 単語埋め込み\n\n`MolmoForCausalLM.forward()` が call されると、すぐに `Molmo.forward()` の処理に移ります。\n`Molmo.forward()` では、はじめに入力データに対するいくつかのバリデーション処理の後、以下のトークンIDから特徴量ベクトルへの変換処理が実行されます。\n```python:Molmo.forward()\nx = self.transformer.wte(input_ids) if input_embeddings is None else input_embeddings  # type: ignore\n```\n属性 `wte` の実体は `Embedding()` です（[全体図](#実際の-model-オブジェクトの構造)参照）。Embeddingは、単語IDをベクトルに変換する“辞書”のようなものです。内部に語彙数×埋め込み次元の行列 W を持ち、入力IDを行番号として該当行をそのまま取り出します（行列積はナシ）。初期値は正規分布でランダムに設定され、学習中は誤差逆伝播で該当行だけが更新される。結果的に意味が近い単語ほど似た方向のベクトルに収束します。\n\n\n<!--\nOpenAI CLIPも同様の仕組みですが、MolmoではCLIPの重みは流用せず自前で埋め込みを学習します。\n-->\n\n\n\n\n\n### ViT ( OpenAI CLIP )\n\n```python:Molmo.forward()\nx = self.transformer.wte(input_ids) if input_embeddings is None else input_embeddings  # type: ignore\n\nnum_image: Optional[int] = None\nif images is not None:\n    # shape: (batch_size, num_image, num_patch, d_model)\n    # cls_embed: (batch_size, num_image, d_model)\n    image_features, cls_embed = self.vision_backbone(images, image_masks)\n    num_image, num_patch = image_features.shape[1:3]\n    assert image_input_idx.shape == (batch_size, num_image, num_patch)\n\n```\n\n`vision_backbone` の中に画像を特徴量埋め込みする機能が入っています。実際にオブジェクトを見てみると、`OLMoPretrainedVisionBackbone` クラスとなっています。[全体図内](#実際の-model-オブジェクトの構造)の `vision_backbone` 以下を見てもわかりますが、ここには大きく3つの機能が実装されています。3つの機能とは、ViT画像エンコーダ(`image_vit`)、アテンションプーリング（`image_pooling_2d`）、コネクタ(`image_projector`)です。\nこの内の一つ、「 ViT 画像エンコーダ( `image_vit` )」の実体が ViT ( OpenAI CLIP ) となっているのです。つまり、`VisionTransformer`クラスがまさに ViT ( OpenAI CLIP ) の画像エンコーダ部分ということになります。\n`OLMoPretrainedVisionBackbone.encode_image()` の中で ViT 埋め込みと、埋め込み特徴量の複数層取り出し及び結合が実行されています。\n\nViT の解説までしていると長過ぎるので踏み込みません。別途、[論文](https://arxiv.org/pdf/2103.00020)をご参照ください。\nとはいっても、使うのは CLIP の中の画像エンコーダ部分のみで、それはほぼ ViT そのものです。そこで実際、ViTの概念図右側（Transformer Encoder）を見てみると、Molmo の ViT 実装も概ねオリジナルの ViT の概念図の通りであることが読み取れます。\n- MultiHeadAttention（黄緑ブロック） → `MultiHeadDotProductAttention`（`attention`）\n- Norm（黄色ブロック） → `LayerNorm`（`attention_norm`）\n- Norm（黄色ブロック） → `LayerNorm`（`ffn_norm`）\n- MLP（水色ブロック） → `ViTMLP`（`feed_forward`）\n\n\n\n<img width=\"550\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/86ba7391-83c0-4b06-ad18-52ab23d9bf03.png\">\n\n\n\n\n\n```shell:ViT（ 実際の model オブジェクトの構造（抜粋））\n    └── vision_backbone: -OLMoPretrainedVisionBackbone\n        ├── image_vit: -VisionTransformer\n        │   ├── patch_embedding: -Linear4bit(in_features=588, out_features=1024, bias=False)\n        │   ├── pre_ln: -LayerNormFp32((1024,), eps=1e-05, elementwise_affine=True)\n        │   └── transformer: -BlockCollection\n        │       └── resblocks: -ModuleList\n        │           └── 0-22: 23 x -ResidualAttentionBlock # <--------- x 23\n        │               ├── attention: -MultiHeadDotProductAttention\n        │               │   ├── wq: -Linear4bit(in_features=1024, out_features=1024, bias=True)\n        │               │   ├── wk: -Linear4bit(in_features=1024, out_features=1024, bias=True)\n        │               │   ├── wv: -Linear4bit(in_features=1024, out_features=1024, bias=True)\n        │               │   ├── wo: -Linear4bit(in_features=1024, out_features=1024, bias=True)\n        │               │   └── residual_dropout: -Dropout(p=0.0, inplace=False)\n        │               ├── feed_forward: -ViTMLP\n        │               │   ├── w1: -Linear4bit(in_features=1024, out_features=4096, bias=True)\n        │               │   ├── act: -QuickGELU()\n        │               │   └── w2: -Linear4bit(in_features=4096, out_features=1024, bias=True)\n        │               ├── attention_norm: -LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n        │               └── ffn_norm: -LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## コネクタ (Connector)\n### アテンションプーリング\n\nViT ( OpenAI CLIP ）での処理を経た後、特徴量に対してプーリング処理をします。\nプーリングといえば近隣の値を足したり平均値や最大値を取ったりするだけではと思ってしまいますが、Attentionを使ったプーリングとは一体何でしょう？\n結論から言うと、アテンションプーリングとは所謂、以下の式で示される __通常の Attention 計算__ と同じです。実際、実装上も ViT で使われているものと同じ `MultiHeadDotProductAttention` クラスが使われています。しかし、アテンション \" プーリング \" ですから、プーリングに相当する工夫がなされています。実装を追っていきそれを確認します。\n\n- Attention Pooling\n```math:\n\\begin{aligned}\n& \\operatorname{Attention}(Q,K,V) \n  = \\operatorname{softmax}\\!\\Bigl(\n         \\frac{QK^T}{\\sqrt{d_k}}\n     \\Bigr)V \\\\\n& y= \\operatorname{Linear}\\Bigl(\n         \\operatorname{MergeHeads}\\bigl(\n             \\operatorname{Attention}(Q,K,V)\n         \\bigr)\n     \\Bigr)\n\\end{aligned}\n```\n\n```python:OLMoPretrainedVisionBackbone.forward()\n# before_rearrange : type = Tensor, shape = (1, 10, 24, 24, 2048)\n# after_rearrange  : type = Tensor, shape = (1440, 4, 2048)\nimage_features = einops.rearrange(\n            image_features,\n            'b n (h dh) (w dw) c -> (b n h w) (dh dw) c',\n            dh=cfg.image_pooling_h,\n            dw=cfg.image_pooling_w,)\n# query            : type = Tensor, shape = (1440, 1, 2048)\nquery = image_features.mean(-2, keepdim=True)\n\n# after_pooling    : type = Tensor, shape = (1440, 1, 1024)\nimage_features = self.image_pooling_2d(query, image_features) # MultiHeadDotProductAttention()\n```\n\nViT（OpenAI CLIP）でクロップ画像をエンコードした後、本実装では第3層と第10層のパッチ特徴をチャネル方向で連結して最終的なパッチ特徴量を構築します。これは単一層のみを用いる場合に比べ、若干の性能向上をもたらします。\nつづいて `einops.rearrange` を用いて、バッチ数やクロップ数、ウィンドウサイズ（隣接する 2 × 2 パッチの小領域）ごとにまとめて、形状を変換します。ここで、各ウィンドウ内のパッチ特徴量の平均を取り、次元を 4→1 に落としたものをクエリとして用意します。\n最後に、`self.image_pooling_2d()`（ `MultiHeadDotProductAttention` クラス）に、キー（K）・バリュー（V）としてウィンドウ内の全パッチ特徴量、クエリとして先ほどの平均特徴量を与え、Attention 計算を実行します。ここで Attention 演算によりウィンドウ内の情報を重み付きで統合し、元の 4 次元分の情報を 1 次元に集約させることでプーリングが実現します。さらに、複数層の特徴量を連結してできた高次元部分は、`self.wo`（出力線形層）を通すことで最終的に LLM モデル埋め込み次元（1024）へ射影されます。この一連の流れにより、単純な平均プーリング以上に「重要なパッチ」を強調したプーリングが可能となり、視覚特徴の集約精度が向上します。\n\n> 簡単に書くと、Transformer の Attention と機構は同じですが、今回のように Pooling が目的の場合、query ベクトルの次元を4→1に落として `K` および `V` と行列積を取ることで次元が落ちる機構です。こうして上記コードの通り、`image_features` は Attention Pooling によって4→1に次元が落ちています。\n\n余談ですが、einops（アインオプス）をここで初めてみて、すごく便利だと思いました。因数を指定して変形したい次元形状に変えられるのは、本当に直感的にやりたいことが実現出来てかなりいいなと思いました。\n\n\n### LLM 埋め込み空間へのマッピング（投影）\n\nこちらがマッピング処理のエントリーポイントになります。\n```python:OLMoPretrainedVisionBackbone.forward()\nif self.grad_checkpointing:\n    from torch.utils.checkpoint import checkpoint\n    image_features = checkpoint(self.image_projector, image_features, use_reentrant=False)\nelse:\n    image_features = self.image_projector(image_features)\n```\n\n論文の中ではモデルを形作る4つのコンポーネントの1つとして扱われていますが、その実体は全てのコードを貼り付けられるぐらい量も少なく、ロジックも平易なものです（※`reset_parameters` のみ省略）。線形写像に活性化関数という、ディープラーニング事始めといった具合です。説明は不要でしょう。\n\n```python\nclass MLP(nn.Module):\n    def __init__(self, config: FullMolmoConfig, input_dim: int, dropout: float = 0.0):\n        super().__init__()\n        self.config = config\n        self.hidden_size = (\n            config.mlp_hidden_size if config.mlp_hidden_size is not None else config.mlp_ratio * config.d_model\n        )\n        self.initializer_range = config.initializer_range\n\n        self.w1 = nn.Linear(\n            input_dim,\n            self.hidden_size // 2,\n            bias=False,\n            device=config.init_device,\n            )\n        self.w2 = nn.Linear(\n            self.hidden_size // 2,\n            config.d_model,\n            bias=False,\n            device=config.init_device,\n            )\n        self.w3 = nn.Linear(\n            input_dim,\n            self.hidden_size // 2,\n            bias=False,\n            device=config.init_device,\n            )\n        # Activation function.\n        self.act = Activation.build(config)\n        self.dropout = Dropout(dropout)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        x = self.w2(self.act(self.w1(x), self.w3(x)))\n        x = self.dropout(x)\n        return x\n```\n\n\n\n\n\n\n\n\n\n### LLMへクロップ重複部分をパスしないようにする\n\n前処理の段階でも説明しましたが、画像をクロップする際に重なりがあります。論文にはこの重なりがあることにより情報の見切れを防ぐことが出来るため、精度が向上すると書かれてあります。しかし、重なり部分をそのままLLMに渡してしまうと、一つしかないオブジェクトが2つカウントされてしまったり、情報を2重で渡してしまうことになります。\nそこで入力画像をクロップした際に発生した重複部分をLLMにパスしないようにする仕組みが以下のコード箇所になります。\n\n```python:Molmo.forward()\nx[batch_idx[valid], image_input_idx[valid]] += image_features[valid]\n```\n\n\nこの処理ではファンシーインデックスが活用されているため、コードが直感的に分かりづらくなっています。\nもう少し周辺のコードから見てみます。\n\n```python:Molmo.forward()\nif images is not None:\n    # shape: (batch_size, num_image, num_patch, d_model)\n    # cls_embed: (batch_size, num_image, d_model)\n    image_features, cls_embed = self.vision_backbone(images, image_masks)\n    num_image, num_patch = image_features.shape[1:3]\n    assert image_input_idx.shape == (batch_size, num_image, num_patch)\n\n    # [A]\n    # inster the image feature into the embedding.\n    image_features = image_features.view(batch_size, num_image * num_patch, -1)\n    image_input_idx = image_input_idx.view(batch_size, num_image * num_patch)\n\n    valid = image_input_idx >= 0\n    batch_idx = torch.arange(batch_size, device=x.device)\n    batch_idx = torch.tile(batch_idx[:, None], [1, image_features.shape[1]])\n\n    # For hf demo/endpoint\n    image_features = image_features.to(x.device)\n\n    # [B]\n    x[batch_idx[valid], image_input_idx[valid]] += image_features[valid]\n```\n\n`# [A]` とコメントアウトした箇所から該当の処理が始まり、`# [B]` において、重複部分の無効化が実行されています。`# [B]` 時点での各データの形状は以下のとおりです。\n\n```python\nx:                                                torch.Size([1, 981, 3584])\nbatch_idx:                                        torch.Size([1, 1440])\nimage_input_idx:                                  torch.Size([1, 1440])\nvalid:                                            torch.Size([1, 1440])\nimage_features:                                   torch.Size([1, 1440, 3584])\n-----------------------------------------------------------------------------------\n# 1つ目のインデックス指定（[B] の左辺）\nbatch_idx[valid]:                                 torch.Size([928])\n# 2つ目のインデックス指定（[B] の左辺）\nimage_input_idx[valid]:                           torch.Size([928])\n# [B] の左辺\nx[batch_idx[valid], image_input_idx[valid]]:      torch.Size([928, 3584])\n# [B] の右辺\nimage_features[valid]:                            torch.Size([928, 3584])\n```\n\n一部、データの中身も覗いてみます。\n\n- `batch_idx`\nファンシーインデックスで更新対象を対応させるためのただのインデックス番号。インデックス番号を入れるだけのマスク行列です（ここでは\"隠す\"という意味でのマスクではありません）。\n今回の例の場合、バッチサイズは 1 なので全て 0 のマスクになります。\n\n<img width=\"350\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/8ed7e5f7-0106-4522-b84d-33a35ffdb2fc.png\">\n\n\n- `image_input_idx`\n見やすさのため、`[10, 12, 12]` に reshape しています。\nパッチ特徴量について、169の次の170は次のクロップ画像（画像内 Group2）の左上の要素。\n<img width=\"350\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/c6f3045f-a277-4867-8c1c-ebb8cbf13dab.png\">\n\n\nここまでデータの内容を把握したうえで改めて元のコードを参照します。\n```python:Molmo.forward()\nx[batch_idx[valid], image_input_idx[valid]] += image_features[valid]\n```\n\n- __左辺__\nLLM への入力シーケンス `x` の次元 `[1, 981, 3584]` は左から、バッチ、シーケンス、特徴量を表します。\n「バッチ（`batch_idx[valid]`）」、「シーケンス（`image_input_idx[valid]`）」それぞれの次元に対し、インデックス番号を抽出したものを指定し、適切な `x` のパッチ格納場所を有効化します。\n- __右辺__\n`image_input_idx` で作った有効領域のマスク（`valid`）を用いて、画像特徴量の非重複部分だけを抽出します。\n\n左辺が分かりづらいですが、一つずつ紐解いてゆけば解るかと思います。両辺を同じ形にしてから代入してやりたいという意図です。ここまでの説明でも難しい場合は、一度ファンシーインデックスの簡単な例を調べて、自分で実行してみるのがおすすめです。ファンシーインデックスは自分で触らないと分かりづらいところではあります。\n\n\n\n__[ 自分用のメモ ]__\n自分用に取ったメモですが、せっかくなので誰かの理解の一助になればと思い、メモも載せておきます。情報を整理するために自分用として書いたメモなのでわかりやすくまとまってはいませんが、図で表されている分、直感的ではあると思います。\n\n<img width=\"450\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3913772/f264c8bd-3f08-4b2d-a0e9-dbb7be98ae82.png\">\n\n\n\n\n\n\n\n\n## Decoder-only Transformer (LLM)\n\n### 1回の `Molmo.forward()` イテレーションにおける処理\n\n今更ですが、前提のお話として、テキスト生成における単語の生成は一語づつ行われます。一語ずつ単語の分布が生成されて出力をフィードバックしながらループすることで、文章を生成しているのです。`Molmo.forward()` はあくまで一回の順伝搬であり、実行一回につき生成される単語は一語です。外側の `generate()` が `Molmo.forward()`をループ実行させて、EOS がでると生成処理は終了します。\n\nここで一つ疑問が湧きます。`Molmo.forward()` ループ時に、フィードバックした同じデータに対し、画像特徴量を算出する処理（データの特徴量埋め込みの処理）を何度もやるのでしょうか？当然、そのようなことはせずにキャッシュを保存して一度計算した特徴量は次回からは再利用しています。次の一語の生成に必須な計算のみを繰り返して文章が生成されていくのです。\n\n\n\n\n\n#### LLM Decoder への入力前処理\n\n[Decoder への入力前処理](https://huggingface.co/allenai/Molmo-7B-D-0924/blob/main/modeling_molmo.py#L1884)として、入力シーケンスデータ（ `x` ）の前処理およびアテンションマスクの作成があります。一連の主な処理内容は以下です。\n\n- 位置埋め込みの付与\n- ドロップアウト\n- スケーリング\n- `attention_mask` の float 変換＆負バイアス化\n- `attention_bias`（因果マスク・追加バイアス）の初期化・トリミング\n- mask と bias の合成＆数値安定化\n\n```python:Molmo.forward()\n\n    if not self.config.rope:\n        # Get positional embeddings.\n        # shape: (1, seq_len)\n        pos = torch.arange(past_length, past_length + seq_len, dtype=torch.long, device=x.device).unsqueeze(0)\n        # shape: (1, seq_len, d_model)\n        pos_emb = self.transformer.wpe(pos)  # type: ignore\n        x = pos_emb + x\n\n    # Add input + positional embeddings and apply dropout.\n    # shape: (batch_size, seq_len, d_model)\n    x = self.transformer.emb_drop(x)  # type: ignore\n\n    # …\n    # 途中省略\n    # …\n    \n        # Add in the masking bias.\n        if attention_mask is not None:\n            attention_bias = attention_bias + attention_mask\n            # Might get -infs after adding attention mask, since dtype.min + dtype.min = -inf.\n            # `F.scaled_dot_product_attention()` doesn't handle -inf like you'd expect, instead\n            # it can produce NaNs.\n            ensure_finite_(attention_bias, check_neg_inf=True, check_pos_inf=False)\n```\n\n単調な処理が続くので基本的に各項の説明は省略しますが `attention_bias` に関してだけ少し触れておきます。こちらは `attention_mask` とその存在がややこしいというか紛らわしいです。\n`attention_bias` とは、セルフアテンションのスコアに加算されるバイアス項です。アテンションスコアに情報を付与する枠組みであり、`attention_mask` から `attention_bias` が導出されています。`attention_mask` はモデルに与える「マスクの意図」を表す入力であり、`attention_bias` は実際にスコア計算に加えられる数値バイアスです。多くの実装ではこの二者は表裏一体であり、`attention_mask` と `attention_bias` は一対のものとして扱われています。この二つは、役割は同じで表現が異なるだけです。\n- `attention_mask` : ユーザ/高レベルが指定するマスク\n- `attention_bias` : 内部計算で用いるマスクの実体\n\n\n\n\n\n\n\n\n\n__ALiBi__ という手法に関する[こちらの Wiki][link-1]の一節に、attention_bias のしっくりとくる良い説明がありましたので、紹介のため載せておきます。ALiBi は今回の推論で用いられている手法ではありませんが、`attention_bias` の類のものです。\n\n[link-1]: https://en.wikipedia.org/wiki/Transformer_(deep_learning_architecture)#:~:text=%5Bedit%5D-,ALiBi%20(Attention%20with%20Linear%20Biases)%5B72%5D%20is%20not,%F0%9D%91%89,-Here%2C\n\n> ALiBi (Attention with Linear Biases) is not a replacement for the positional encoder on the original transformer. Instead, it is an additional positional encoder that is directly plugged into the attention mechanism.\nALiBi（線形バイアス付きアテンション）は、元のトランスフォーマーの位置エンコーダを置き換えるものではありません。これは、アテンション機構に直接接続される追加の位置エンコーダです。\n\n> The idea being that the linear bias matrix is a softened mask.\n線形バイアス行列は、緩和されたマスクであるという考え方です。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### LLM Decoder での計算\n\nいよいよ主要な処理としては最後になるLLM Decoderでの処理に入ります。\n該当のコード箇所は[こちら](https://huggingface.co/cyan2k/molmo-7B-D-bnb-4bit/blob/main/modeling_molmo.py#L2186)です。\n\n\n\n\n##### LLMの実体\nまずはLLMの実体を確認します。下記、[全体図](#実際の-model-オブジェクトの構造)の抜粋を参照してください。\nLLMの実体は `blocks` というインスタンス属性に格納されているオブジェクトです。`ModuleList` はレイヤーを格納しているだけのクラスなので、LLM のメインのコンポーネントと言えるのは `MolmoSequentialBlock` ということになるでしょう。\n\n```shell\n- MolmoForCausalLM\n└── model: -Molmo\n    ├── transformer: -ModuleDict\n    │   ├── wte: -Embedding()\n    │   ├── emb_drop: -Dropout(p=0, inplace=False)\n    │   ├── ln_f: -RMSLayerNorm()\n    │   ├── blocks: -ModuleList\n    │   │   └── 0-27: 28 x -MolmoSequentialBlock # <--------- x 28\n    │   │       ├── dropout: -Dropout(p=0, inplace=False)\n    │   │       ├── act: -SwiGLU()\n    │   │       ├── attn_out: -Linear4bit(in_features=3584, out_features=3584, bias=False)\n    │   │       ├── ff_out: -Linear4bit(in_features=18944, out_features=3584, bias=False)\n    │   │       ├── rotary_emb: -RotaryEmbedding()\n    │   │       ├── attn_norm: -RMSLayerNorm()\n    │   │       ├── ff_norm: -RMSLayerNorm()\n    │   │       ├── att_proj: -Linear4bit(in_features=3584, out_features=4608, bias=True)\n    │   │       └── ff_proj: -Linear4bit(in_features=3584, out_features=37888, bias=False)\n    │   └── ff_out: -Linear(in_features=3584, out_features=152064, bias=False)\n```\n\n具体的な実装をざっと確認します。\nモデルのコード内には `MolmoBlock()` というクラスが存在しますが、こちらもLLMの本体の一部です。`MolmoSequentialBlock()` は この`MolmoBlock()` を継承しているため、実質、この2つのクラスがLLMの実体と言えるでしょう。\n\n```python:実装の状態（簡略図）\n# 実装メソッドと継承関係（主要なメソッドのみ抜粋）\nclass MolmoBlock(nn.Module):\n    def _scaled_dot_product_attention\n    def attention\n    def forward\n\nclass MolmoSequentialBlock(MolmoBlock):\n    def forward()\n```\n\n```shell:処理順序の包含関係\n-Molmo.forward()\n└── -MolmoSequentialBlock.forward × (28)\n    └── -Molmoblock.attention\n        └── -Molmoblock.scaled_dot_product_attention\n```\n\n`Molmo()` クラスにおいては、下記のようにして LLM の本体（28ブロック分の`MolmoSequentialBlock()`）がインスタンス属性へセットされます。\n\n```python:Molmo.__init__()\nblocks = [MolmoBlock.build(i, config, self.__cache) for i in range(config.n_layers)]\nif self.config.block_group_size > 1:\n    raise NotImplementedError()\nelse:\n    self.transformer.update({\"blocks\": nn.ModuleList(blocks)})\n```\n\n\n\n\n\n\n##### LLM（大規模言語モデル）での計算\nLLM の計算に入ります。論文の説明通り、本稿で取り扱うモデル（Molmo-7B-D）におけるLLMデコーダは、Qwen2をベースとしており、新たに追加で学習を行ったものです。Qwen2はGPT系のモデルであり、Transformerアーキテクチャに基づいています。細かなテクニックを除けば、基本的な仕組みはTransformerと同様であるため、Transformerの基本的な構造を理解していれば、全体の処理の流れを把握することは難しくないでしょう。\nこちらがLLM Decoderを実行するコードです。\n\n```python:Molmo.forward()\n# Apply blocks one-by-one.\nif self.config.block_group_size == 1:\n    #--【A】--\n    for block_idx, block in enumerate(self.transformer.blocks):\n        if output_hidden_states:\n            # add hidden states\n            all_hidden_states.append(x)\n\n        layer_past = None if past_key_values is None else past_key_values[block_idx]\n        #--【B】--\n        # x = [1, 981, 3584]     ⇐ Molmo.forward() 一周目のみ\n        # x = [1,   1, 3584]     ⇐ Molmo.forward() 二周目以降\n        x, cache = block(x, attention_bias=attention_bias, position_ids=position_ids, drop_mask=response_mask, layer_past=layer_past, use_cache=use_cache)\n\n        if attn_key_values is not None:\n            assert cache is not None\n            attn_key_values.append(cache)\n```\n\n\n\n\n__【 A 部 : トランスフォーマーブロックのイテレーション】__\nself.transformer.blocks（28 層の MolmoSequentialBlock）を enumerate で回し、先頭から順に処理を進めます。各イテレーションで変数 `x` には直前の層までで得られた最新の系列表現が格納されており、この `x` を新たに取り出したブロックに渡すことで、時系列的に情報が伝播していきます。\n\n__【 B 部 : 各ブロックへの入力と適用処理】__\nまず過去ステップの key / value を保持している `past_key_values` が渡されていれば、その層に対応する要素を引き出し `layer_past` として用意します。続いて `block()` を呼び出し、画像特徴量とテキスト特徴量が格納された現在の入力系列 `x` に対して Attention 処理を行います。\n\n__【 出力 】__\n各ブロック呼び出しから返却されるのは二つの値です。一つ目の `x` はそのブロックを通過した後の系列表現で、次の層への入力となる「最新の文脈埋め込み」を指します。特にシーケンスの最後尾は次トークンの分布情報を含むため、最終出力時には最新の `x` を末尾だけ切り出して次の語生成に繋げることが可能です。\n二つ目の `cache` は、Attention 計算で用いた key・value 行列をまとめたタプルで、デコーダの逐次生成時に「履歴として蓄積されたメモリ（コンテキスト情報）」として再利用されます。最終的に28回の反復処理を終えた段階で、この `x` が最終的なデコーダ出力として、またすべての `cache` が `attn_key_values` に集約されて戻されます。\n\n\n\n基本的な LLM Decoder モデルなのであまり特筆すべきところはありませんが、より詳しく上記 `block` の実装の中身（ `MolmoSequentialBlock()` ）を見てみます。\n\n\n```shell\n1.  Attention 用入力の正規化と準備  \n(処理の意図) 残差前に正規化をかけるかどうかを分岐し、Attention 射影の準備を行う  \n  • config.norm_after=False の場合 ▶︎ atten_in = self.attn_norm(x)  \n  • config.norm_after=True の場合  ▶︎ atten_in = x  \n  • atten_in を self.attn_proj に渡すために保持  \n\n----------------------------------------\n2.  Q/K/V の一括射影と分割  \n(処理の意図) １回の線形変換で Query, Key, Value を得る  \n  • qkv = self.att_proj(atten_in)  \n  • config.clip_qkv が指定されていれば qkv.clamp_(min=-clip, max=clip)  \n  • q, k, v = qkv.split(self.fused_dims, dim=-1)  \n\n----------------------------------------\n3.  マルチヘッドセルフアテンションの計算  \n(処理の意図) 各ヘッドごとに scaled dot product attention を計算し、元の次元に戻す  \n  • att, cache = self.attention(q, k, v, attention_bias, position_ids, drop_mask, layer_past, use_cache)  \n\n  --- 'self.attention' の内部処理 ---------------\n  a) Q/KV の形状変換  \n     - B, T, C = q.size()  \n     - q → view→transpose → (B, nh, T, hs)  \n     - k, v → view→transpose → (B, n_kv_h, T, hs)  \n  b) 相対位置埋め込み（RoPE）  \n     - if use_position_ids and rope: q, k = self.rotary_emb(q, k, position_ids)  \n  c) 過去キー・値の連結  \n     - if layer_past:  \n         k = cat(past_key, k, dim=-2)  \n         v = cat(past_value, v, dim=-2)  \n     - present = (k, v) if use_cache else None  \n  d) 注意バイアスの整形  \n     - slice attention_bias[:, :, key_len-query_len:key_len, :key_len]  \n     - attention_bias = _cast_attn_bias(sliced_bias, dtype)  \n  e) _scaled_dot_product_attention の呼び出し  \n     --- '_scaled_dot_product_attention' の内部処理 ---------------  \n     i)  マスクをデバイスへ転送  \n         - if attn_mask is not None: attn_mask = attn_mask.to(q.device)  \n     ii) FlashAttention が利用可能か判定  \n         - if flash_attn_func and attn_mask is None:  \n             r = flash_attn_func(q.T, k.T, v.T, dropout_p, causal=is_causal)  \n             return r.T  \n     iii) GQA（Grouped Query Attention）対応  \n         - num_q_heads ≠ num_kv_heads の場合 k, v を repeat_interleave  \n     iv) PyTorch 標準 SDPA 呼び出し  \n         output = F.scaled_dot_product_attention(q, k, v, attn_mask, dropout_p, is_causal)  \n         return output  \n     -------------------------------------------------------------  \n  f) ヘッド再結合と射影  \n     - att: (B, nh, T, hs) → transpose→contiguous→view → (B, T, C)  \n     - out = self.attn_out(att)  \n     - return out, present  \n  -------------------------------------------------------------  \n\n----------------------------------------\n4.  Attention 後の正規化と残差結合  \n(処理の意図) Post-LN モードなら正規化をかけ、残差＋ドロップアウトを適用  \n  • if config.norm_after: att = self.attn_norm(att)  \n  • x = x + self.dropout(att, drop_mask)  \n  • og_x = x  ※FFN 用残差として保持  \n\n----------------------------------------\n5.  フィードフォワードネットワーク（FFN）の適用  \n(処理の意図) 位置ごとの非線形変換で表現力を補強  \n  • if not config.norm_after: x = self.ff_norm(x)  \n  • x = self.ff_proj(x)                ▶︎ 線形変換 (d_model→hidden)  \n  • x = self.act(x)                   ▶︎ SwiGLU 等の活性化  \n  • x = self.ff_out(x)                ▶︎ 出力射影 (hidden×multiplier→d_model)  \n  • if config.norm_after: x = self.ff_norm(x)  \n  • x = self.dropout(x, drop_mask)  \n  • x = og_x + x                      ▶︎ 残差結合  \n\n----------------------------------------\n6.  最終出力とキャッシュの返却  \n(処理の意図) ブロックの出力テンソルと次ステップ用キャッシュを呼び出し元に返す  \n  • return x, cache  \n\n```\n\n\n\n\n__【 2 : Q/K/V の分割】__\n\n2周目以降は最新の生成トークン1語のみの処理になります。Attention 計算に必要な以前までの情報には後述の Attention キャッシュを利用します。\nこれらの Attention キャッシュが何かわからないという方向けに、KVキャッシュを説明する記事をいくつか載せましたので、参照してみてください。記事を読んでもよくわからない場合は、とりあえず読み進めてみてください。続きにも詳しく書いております。\n\n```python:MolmoSequentialBlock.forward()\n# (q), k, v = [1, 981, (3584) 512]   ⇐ Molmo.forward() 一周目のみ\n# (q), k, v = [1,   1, (3584) 512]   ⇐ Molmo.forward() 二周目以降\nq, k, v = qkv.split(self.fused_dims, dim=-1)\n\n# Get attention scores.\nif self._activation_checkpoint_fn is not None:\n    att, cache = self._activation_checkpoint_fn(  # type: ignore\n        self.attention, q, k, v, attention_bias, position_ids=position_ids, layer_past=layer_past, use_cache=use_cache\n    )\nelse:\n    # att = [1, 981, 3584]     ⇐ Molmo.forward() 一周目のみ\n    # att = [1,   1, 3584]     ⇐ Molmo.forward() 二周目以降\n    att, cache = self.attention(q, k, v, attention_bias, position_ids=position_ids, layer_past=layer_past, use_cache=use_cache)\n```\n\nhttps://en.wikipedia.org/wiki/Transformer_(deep_learning_architecture)#:~:text=%5B11%5D-,KV%20caching,-%5Bedit%5D\n\nhttps://huggingface.co/docs/transformers/v4.44.0/kv_cache\n\nhttps://medium.com/@florian_algo/main-stages-of-auto-regressive-decoding-for-llm-inference-915d6e0a4418\n\n\n\n\n\n\n__【 3-c : Attention キャッシュの保存と再利用】__\nLLM の逐次生成では、Attention 計算の過去の `key`・ `value` を「コンテキスト」（または「メモリ」、「履歴」）として持ち続けることで、一度計算した注意重みを再利用しながら効率良く長い依存関係を扱えます。\n各 `MolmoSequentialBlock` の呼び出し時には、Attention 計算で用いたキー・バリュー行列を\n```python:MolmoBlock.attention()\npresent = (k, v) if use_cache else None\n```\nとしてまとめ、`cache` として返却します。そして、28層の `block`( `MolmoSequentialBlock` ) ループの中で `attn_key_values.append(cache)` によって蓄積します。こうして得られた `attn_key_values` は、`Molmo.forward()` の戻り値として **`past_key_values`** という名前で受け取られます。そして、次ステップにおける `Molmo.forward()` の LLM デコーディング時にフィードバックされ、再び `layer_past=past_key_values[i]` として `block` 各層に渡されます。\nこのようにキャッシュを保持し、フィードバックすることでコンテキストが捉えられます\n\n\nよりイメージを鮮明にするために、`past_key_values` の具体的なデータ形状も確認しておきます。`past_key_values` は実際に `Molmo.forward()` の引数を保存して調べたので簡易的な例ではなく実際の情報になります（調べるのに結構時間がかかりました）。\nちなみに、私は`past_key_values`を最初に見たとき、past の key の value（過去のkeyの値）と思っていたのですが、正しい理解はPast key and value（過去の `key` と `value`）です。\n\n**構造およびテンソル形状**\n`past_key_values` は長さ  (28, 2) のリストで、各要素は `(k, v)` のタプルです。リストインデックス `0`～`27` がそれぞれ `MolmoSequentialBlock` の 28 層に対応します。各 `k` または `v` は `(1, 4, seq_len, 128)` の形状を持ち、推論を重ねるごとに `seq_len`（過去トークン数）が増加します（例: 981 → 1081 …）。ここで `4` は Attention のキー／バリューヘッド数（`effective_n_kv_heads`）です。`past_key_values` の形状をまとめて書くとするならば、 `[28, 2, 1, 4, seq_len, 128]` のような形状をしています。\n> ※ 誤解を避けるために補足すると、先に示した `[28, 2, 1, 4, seq_len, 128]` のような「リストと torch.Tensor の混在表記」は便宜的な説明であり、実際にはリスト内の各要素が純粋なテンソルオブジェクトで管理されています。\n\n\n\n\n\n\n\n\n\n\n\n\n__【 3-e-iv : Scaled Dot-Product Attention の実装】__\nLLM Decoderにおける計算のコアである Attention の計算です。下記コードより Attention の計算にエントリーし結果を得ます。\n```python:MolmoSequentialBlock.forward()\n# Get attention scores.\nif self._activation_checkpoint_fn is not None:\n    att, cache = self._activation_checkpoint_fn(  # type: ignore\n        self.attention, q, k, v, attention_bias, position_ids=position_ids, layer_past=layer_past, use_cache=use_cache\n    )\nelse:\n    # att = [1, 981, 3584]     ⇐ Molmo.forward() 一周目のみ\n    # att = [1,   1, 3584]     ⇐ Molmo.forward() 二周目以降\n    att, cache = self.attention(q, k, v, attention_bias, position_ids=position_ids, layer_past=layer_past, use_cache=use_cache)\n```\n\nAttention の計算は、PyTorch 標準の `scaled_dot_product_attention()` 関数をそのまま呼び出して実装されています。該当箇所は `F._scaled_dot_product_attention()`という１行で、クエリ（q）とキー（k）の内積をスケーリングし、ソフトマックスを経てバリュー（v）に適用する処理を内部で一括して行います。\nキャッシュによる次元の変化としては、二周目以降は query（ および attention_mask ）の長さが 1 となるので生成される att ( attention )の長さも 1 になるという仕組みです。\n\n```python:MolmoBlock._scaled_dot_product_attention()\nfrom torch.nn import functional as F\n# …\n# 省略\n# …\n\n    def _scaled_dot_product_attention(\n        self,\n        # …\n        # 省略\n        # …\n\n            # ⇓ Molmo.forward() 一周目のみ\n            # q, k, v   = [1, 28, 981, 128]\n            # attn_mask = [1,  1, 981, 981]\n            return F.scaled_dot_product_attention(\n                                       # ⇓ Molmo.forward() 二周目以降\n                q,                     # [1, 28,       1,     128]\n                k,                     # [1, 28, seq_len,     128]\n                v,                     # [1, 28, seq_len,     128]\n                attn_mask=attn_mask,   # [1,  1,       1, seq_len]\n                dropout_p=dropout_p,\n                is_causal=is_causal,\n            )\n```\n\n\n\n\n\n#### LLM計算後の後処理\n\n\n最後の処理として、LLM デコーダーから得られた隠れ状態を「最終的なトークン単位のロジット（次の一単語の分布）」に変換する __後処理__ があります。\n\n\n\n```python:Molmo.forward()\n#--【A】--\nif images is not None and self.config.use_cls_feature:\n    assert num_image is not None\n    x = torch.cat(\n        [x[:, :1], x[:, num_image+1:], torch.zeros_like(x[:, :num_image])],\n        dim=1,\n    )\n\n#--【B】--\nif last_logits_only:\n    # shape: (batch_size, 1, d_model)\n    if append_last_valid_logits is not None:\n        last_valid_output = x[\n            torch.arange(x.shape[0], device=x.device), append_last_valid_logits.to(x.device)]\n        x = last_valid_output.unsqueeze(1)\n    else:\n        x = x[:, -1, :].unsqueeze(1)\n\n#--【C】--\n# Apply final layer norm.\n# shape: (batch_size, seq_len or 1, d_model)\nx = self.transformer.ln_f(x)  # type: ignore\nif output_hidden_states:\n    # add final hidden state post-final-layernorm, following HuggingFace's convention\n    all_hidden_states.append(x)\n\n#--【D】--\n# Get logits.\n# shape: (batch_size, seq_len or 1, vocab_size)\nif self.config.weight_tying:\n    logits = F.linear(x, self.transformer.wte.weight, None)  # type: ignore\nelse:\n    logits = self.transformer.ff_out(x)  # type: ignore\nif self.config.scale_logits:\n    logits.mul_(1 / math.sqrt(self.config.d_model))\n\n#--【E】--\nif not last_logits_only and append_last_valid_logits is not None:\n    last_valid_logit = logits[\n        torch.arange(logits.shape[0], device=logits.device), append_last_valid_logits]\n    logits = torch.cat([logits[:, :-1], last_valid_logit[:, None]], dim=1)\n\nreturn ModelOutput(logits=logits, attn_key_values=attn_key_values, hidden_states=tuple(all_hidden_states) if output_hidden_states else None)  # type: ignore[arg-type]\n\n```\n\n__[ A. 画像特徴量処理（CLS特徴利用時）]__\n\n画像が入力され、かつ CLS トークンを利用する設定が有効な場合、モデルはまず入力系列の先頭にある CLS 埋め込みを保持し、その直後に続く画像パッチの埋め込みをすべて取り除いてから、同じ数だけのゼロ埋めベクトルを末尾に追加します。これにより、画像から抽出された複数のパッチ特徴量は学習や生成の過程で扱われなくなり、代わりに画像全体の要約情報を担う CLS 特徴のみが残ることで計算効率とメモリ使用量の削減を図ります。背景には、Vision Transformer の設計として最初の CLS トークンが全パッチ情報を集約する役割を果たすという考え方があり、このモードでは個々のパッチを扱わずに CLS トークンだけで画像情報を表現するという意図があります。\n\n__[ B. 最後のロジット抽出処理]__\n\n自動回帰生成の高速化を目的として、モデルは系列全体の特徴を計算した後に、出力すべき最後のトークンに対応するベクトルのみを抜き出します。具体的には、バッチごとに指定された有効位置があればそこから特徴を抜き出し、なければ系列の末尾要素を取り出して次元を調整します。こうすることで、生成に必要な情報だけを手早く取得し、不要な全系列データの保持を避けることでメモリ使用量を節約しつつ推論速度を向上させる設計になっています。\n\n__[ C. 最終層正規化]__\n\n最後の Transformer ブロックを通り抜けた後、出力ベクトルには標準的な LayerNorm が適用されます。この正規化は、各次元の値を均一化して数値的な安定性を確保し、勾配の伝搬を安定化させる役割を果たします。GPT 系モデルではポストノルム構成が一般的であり、このステップによって学習時や推論時の振る舞いがより安定するよう意図されています。\n\n\n__[ D. ロジット計算]__\n\n正規化済みの特徴ベクトルから最終的な出力ロジットを計算する際、モデル設定に応じて埋め込み層の重みをそのまま再利用するか、あるいは専用の線形層を用いるかが切り替えられます。埋め込み層と出力層の重みを共有する「Weight Tying」を有効にすればパラメータ数を削減しつつ性能を維持できる一方で、専用出力層を使うとより柔軟な変換が可能になります。このトレードオフを反映して、両者を切り替えられるようになっています。\n\n\n__[ E. 最終ロジット調整]__\n\nバッチ処理では、バッチ内の異なるサンプルがそれぞれ異なる有効長を持つ場合、「本当の最後のトークン」の位置は各サンプルで異なります。このコードは、各サンプルの実際に有効な最後の位置のlogitsを、出力の最後尾に配置することで、次のトークン予測や損失計算を正確に行うためのものです。\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-06-07T15:12:14+09:00",
        "group": null,
        "id": "569885eee5f1622255c7",
        "likes_count": 1,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 1,
        "tags": [
          {
            "name": "DeepLearning",
            "versions": []
          },
          {
            "name": "AI",
            "versions": []
          },
          {
            "name": "Transformer",
            "versions": []
          },
          {
            "name": "huggingface",
            "versions": []
          },
          {
            "name": "LLM",
            "versions": []
          }
        ],
        "title": "マルチモーダルLLM（Molmo）の仕組み ‐ 世界モデル（2）",
        "updated_at": "2025-06-08T11:42:00+09:00",
        "url": "https://qiita.com/shinya_2024/items/569885eee5f1622255c7",
        "user": {
          "description": "",
          "facebook_id": "",
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "shinya_2024",
          "items_count": 5,
          "linkedin_id": "shinya-matsubara-ba230a1a0/",
          "location": "",
          "name": "",
          "organization": "",
          "permanent_id": 3913772,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3913772/da598f076d99e4a97c021c0d162cfce49f130686/large.png?1733925502",
          "team_only": false,
          "twitter_screen_name": "s_matsubara_jp",
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7471911907196045,
        "quality_score": 19,
        "python_code_score": 5,
        "python_code_blocks": 23
      },
      {
        "rendered_body": "<h1 data-sourcepos=\"1:1-1:107\">\n<span id=\"金融データ活用推進協会fudaと金融庁共催の第３回金融データ活用チャレンジ\" class=\"fragment\"></span><a href=\"#%E9%87%91%E8%9E%8D%E3%83%87%E3%83%BC%E3%82%BF%E6%B4%BB%E7%94%A8%E6%8E%A8%E9%80%B2%E5%8D%94%E4%BC%9Afuda%E3%81%A8%E9%87%91%E8%9E%8D%E5%BA%81%E5%85%B1%E5%82%AC%E3%81%AE%E7%AC%AC%EF%BC%93%E5%9B%9E%E9%87%91%E8%9E%8D%E3%83%87%E3%83%BC%E3%82%BF%E6%B4%BB%E7%94%A8%E3%83%81%E3%83%A3%E3%83%AC%E3%83%B3%E3%82%B8\"><i class=\"fa fa-link\"></i></a>金融データ活用推進協会(FUDA)と金融庁共催の第３回金融データ活用チャレンジ</h1>\n<h2 data-sourcepos=\"3:1-3:12\">\n<span id=\"最初に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9D%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最初に</h2>\n<p data-sourcepos=\"5:1-6:72\">今回、生成AIのAPIを無料で提供いただいた日本マイクロソフトさん、日立製作所さん、本当にありがとうございます。今回、両者のAPIを使用させていただきました。ただ、私のRAGをそもそも理解できていなかったのか、コンテキストサイズが大きすぎたのかは、わかりませんでしたが、<strong>llama3.3:70b-instruct-fp16</strong>と<strong>Qwen 2.5:72b</strong>は思った様な回答が返ってこず、早々に諦めてしまいました。本来であれば、いろいろと考察ができれば良かったのですが、次回にこの様な機会があれば、もっと前処理をしっかりとして、いろいろな評価ができればなと思っています。<br>\n貴重な機会をいただき、大変ありがとうございます。</p>\n<h2 data-sourcepos=\"8:1-8:18\">\n<span id=\"コンペ概略\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9A%E6%A6%82%E7%95%A5\"><i class=\"fa fa-link\"></i></a>コンペ概略</h2>\n<ol data-sourcepos=\"10:1-20:88\">\n<li data-sourcepos=\"10:1-10:590\">\n<p data-sourcepos=\"10:4-10:590\">企業の統合報告書・サステナビリティレポートのPDFファイルが存在し、その情報をコンテキストとして、質問の回答を得るものとなっています。日本マイクロソフトさんよりAzure Open AIで提供されたGPT 4o-mini version 2024-10-24なので、これを調べてみると「ナレッジカットオフは2023年10月に設定されている」となっています。一方、今回の出題元となっている統合報告書・サステナビリティレポートは、2024年度の後のもとなっている様子です</p>\n</li>\n<li data-sourcepos=\"11:1-13:0\">\n<p data-sourcepos=\"11:4-12:70\">1.の情報に対して、Retrieval Augmented Generation(RAG)システムを構築し、用意された質問（query.csv）に対する回答を生成し、その回答を作成する。<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fstatic.signate.jp%2Fcompetitions%2F1515%2FALHiAfdbNQ4GwoYwbUihSsXIigzVtpWUmTCaBTlS.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=31d51c3f80f06137547a9e66c8d98701\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fstatic.signate.jp%2Fcompetitions%2F1515%2FALHiAfdbNQ4GwoYwbUihSsXIigzVtpWUmTCaBTlS.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=31d51c3f80f06137547a9e66c8d98701\" alt=\"RAG概略図\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fstatic.signate.jp%2Fcompetitions%2F1515%2FALHiAfdbNQ4GwoYwbUihSsXIigzVtpWUmTCaBTlS.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3aa9155307ff54871726c7428438c375 1x\" data-canonical-src=\"https://static.signate.jp/competitions/1515/ALHiAfdbNQ4GwoYwbUihSsXIigzVtpWUmTCaBTlS.png\" loading=\"lazy\"></a><br>\n<a href=\"https://signate.jp/competitions/1515#abstract\" rel=\"nofollow noopener\" target=\"_blank\">https://signate.jp/competitions/1515#abstract</a>より引用</p>\n</li>\n<li data-sourcepos=\"14:1-20:88\">\n<p data-sourcepos=\"0:0-0:0\">回答の精度は、<a href=\"https://arxiv.org/abs/2406.04744\" rel=\"nofollow noopener\" target=\"_blank\">Comprehensive RAG Benchmark (CRAG)</a>という次で示されるスコアの平均値を競うというものとなっています</p>\n<table data-sourcepos=\"14:4-20:88\">\n<thead>\n<tr data-sourcepos=\"14:4-14:188\">\n<th data-sourcepos=\"14:162-14:167\">分類</th>\n<th data-sourcepos=\"14:169-14:174\">得点</th>\n<th data-sourcepos=\"14:176-14:187\">評価基準</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"17:4-17:100\">\n<td data-sourcepos=\"17:5-17:11\">Perfect</td>\n<td data-sourcepos=\"17:13-17:13\">1</td>\n<td data-sourcepos=\"17:15-17:98\">質問に対して正確に答え、虚偽の内容が含まれていない回答。</td>\n</tr>\n<tr data-sourcepos=\"18:4-18:171\">\n<td data-sourcepos=\"18:5-18:14\">Acceptable</td>\n<td data-sourcepos=\"18:16-18:18\">0.5</td>\n<td data-sourcepos=\"18:20-18:169\">質問に対して有用な答えを提供しているが、答えの有用性を損なわない程度の軽微な誤りが含まれている回答。</td>\n</tr>\n<tr data-sourcepos=\"19:4-19:142\">\n<td data-sourcepos=\"19:5-19:11\">Missing</td>\n<td data-sourcepos=\"19:13-19:13\">0</td>\n<td data-sourcepos=\"19:15-19:140\">質問に対して「わかりません」「見つけられませんでした」などの具体的な答えがない回答。</td>\n</tr>\n<tr data-sourcepos=\"20:4-20:88\">\n<td data-sourcepos=\"20:5-20:13\">Incorrect</td>\n<td data-sourcepos=\"20:15-20:16\">-1</td>\n<td data-sourcepos=\"20:18-20:86\">質問に対して間違った、または関連性のない回答。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<p data-sourcepos=\"21:1-22:129\"><a href=\"https://signate.jp/competitions/1515#evaluation\" rel=\"nofollow noopener\" target=\"_blank\">https://signate.jp/competitions/1515#evaluation</a>より引用<br>\nということは、正解があっても間違えが多いとスコアは、大きく減点されるということですね。</p>\n<p data-sourcepos=\"25:1-27:355\">試しに、ChatGPT 4oを使って、お題のquery.csvの質問をしてみると、Webを検索して、次の様な結果となっています。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3712766%2F6a1e94bf-eb36-4ab2-8ab0-e1dd0843a96c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=688d9c986da443b43949083e7dd613b4\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3712766%2F6a1e94bf-eb36-4ab2-8ab0-e1dd0843a96c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=688d9c986da443b43949083e7dd613b4\" alt=\"スクリーンショット 2025-02-16 6.59.59.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3712766%2F6a1e94bf-eb36-4ab2-8ab0-e1dd0843a96c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c9229777f729737f603a30209e427080 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3712766/6a1e94bf-eb36-4ab2-8ab0-e1dd0843a96c.png\" loading=\"lazy\"></a><br>\nこうやってみると、結構近いしいところWebから取得できそうですが、やはり適切なコンテキストを与えないと、質問の解釈に誤りが生じたり、ハルシネーションを引き起こすのは想像に難しくなく、今回のコンペの目的がここにあることは容易に理解できました。</p>\n<h2 data-sourcepos=\"34:1-34:15\">\n<span id=\"1-前処理\" class=\"fragment\"></span><a href=\"#1-%E5%89%8D%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1. 前処理</h2>\n<p data-sourcepos=\"36:1-36:572\">お題として提供されたデータは、PDFとなっていました。一部のPDFは、暗号化がされており、オープンソースのPDF解析ライブラリが機能しないなどの問題がありました。このため、まず最初にCairoを使用して、<code>pdftocairo</code>でPDFのバージョンを1.5にするということを行いました。マルチモーダルに対応した多くの生成AI APIは、ダイレクトにPDFを読み込ませることができなかったことから、各ページをPNGの画像として、用意しました。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"38:1-43:3\"><div class=\"highlight\"><pre><code><span class=\"k\">for </span>pdffile <span class=\"k\">in</span> <span class=\"k\">*</span>.pdf\n<span class=\"k\">do\n    </span>pdftopng <span class=\"nv\">$pdffile</span>\n<span class=\"k\">done</span>\n</code></pre></div></div>\n<p data-sourcepos=\"45:1-45:101\">また、Azure Document Intelligenceを使用して、PDFの内容をmarkdownにしてみました。</p>\n<h1 data-sourcepos=\"48:1-48:104\">\n<span id=\"ragシステム構築への挑戦pdfドキュメントを活用したqaシステムの開発記録\" class=\"fragment\"></span><a href=\"#rag%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E7%AF%89%E3%81%B8%E3%81%AE%E6%8C%91%E6%88%A6pdf%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E6%B4%BB%E7%94%A8%E3%81%97%E3%81%9Fqa%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%96%8B%E7%99%BA%E8%A8%98%E9%8C%B2\"><i class=\"fa fa-link\"></i></a>RAGシステム構築への挑戦：PDFドキュメントを活用したQ&amp;Aシステムの開発記録</h1>\n<h2 data-sourcepos=\"50:1-50:15\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n<p data-sourcepos=\"52:1-52:305\">近年、生成AIを活用した情報検索や質問応答システムが注目を集めています。その中でも、外部知識を組み込むRAG（Retrieval-Augmented Generation）技術は、特定領域の文書に基づいた高精度な回答を提供できるため、非常に有用です。</p>\n<p data-sourcepos=\"54:1-54:369\">今回、私たちは企業の統合報告書や有価証券報告書をコンテキストとして、指定された100問の質問に回答するRAGシステムの開発に挑戦しました。本記事では、PDFドキュメントの前処理から質問応答システムの設計、そして発生した課題とその解決策までを詳しく記録します。</p>\n<hr data-sourcepos=\"56:1-57:0\">\n<h2 data-sourcepos=\"58:1-58:39\">\n<span id=\"1-pdfドキュメントの前処理\" class=\"fragment\"></span><a href=\"#1-pdf%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E5%89%8D%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1. PDFドキュメントの前処理</h2>\n<p data-sourcepos=\"60:1-60:230\">今回のRAGシステムでは、19種類のPDFドキュメントをコンテキストとして利用しました。しかし、PDF形式には様々な課題が伴います。特に、次のような問題に直面しました。</p>\n<ul data-sourcepos=\"62:1-65:0\">\n<li data-sourcepos=\"62:1-62:135\">\n<strong>PDFの暗号化</strong>：一部のPDFが暗号化されており、オープンソースのPDF解析ライブラリが機能しない。</li>\n<li data-sourcepos=\"63:1-63:114\">\n<strong>PDFバージョンの違い</strong>：生成AI APIが一部のPDFフォーマットをサポートしていない。</li>\n<li data-sourcepos=\"64:1-65:0\">\n<strong>マルチモーダルAPIの制限</strong>：PDFを直接読み込めないAPIが多い。</li>\n</ul>\n<p data-sourcepos=\"66:1-66:84\">これらの課題を解決するため、次のアプローチを取りました。</p>\n<h3 data-sourcepos=\"68:1-68:35\">\n<span id=\"11-pdfバージョンの変更\" class=\"fragment\"></span><a href=\"#11-pdf%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E5%A4%89%E6%9B%B4\"><i class=\"fa fa-link\"></i></a>1.1 PDFバージョンの変更</h3>\n<p data-sourcepos=\"70:1-70:209\">暗号化の問題に対処するため、<code>pdftocairo</code>コマンドを用いてPDFのバージョンを<code>1.5</code>に統一しました。これにより、PDF解析ライブラリの互換性が向上しました。</p>\n<div class=\"code-frame\" data-lang=\"bash\" data-sourcepos=\"72:1-77:3\"><div class=\"highlight\"><pre><code><span class=\"k\">for </span>pdf <span class=\"k\">in</span> <span class=\"k\">*</span>.pdf\n<span class=\"k\">do\n     </span>pdftocairo <span class=\"nt\">-png</span> <span class=\"nv\">$pdf</span>\n<span class=\"k\">done</span>\n</code></pre></div></div>\n<p data-sourcepos=\"79:1-79:153\">このスクリプトにより、各PDFをページごとのPNG画像に変換し、マルチモーダルAPIでも処理可能な形式にしました。</p>\n<hr data-sourcepos=\"81:1-82:0\">\n<h2 data-sourcepos=\"83:1-83:36\">\n<span id=\"2-テキストデータの抽出\" class=\"fragment\"></span><a href=\"#2-%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%8A%BD%E5%87%BA\"><i class=\"fa fa-link\"></i></a>2. テキストデータの抽出</h2>\n<p data-sourcepos=\"85:1-85:305\">画像化されたPDFページからテキストを抽出するため、Azure Document Intelligenceを活用しました。このサービスはOCR機能を備えており、構造化されたMarkdown形式でテキストを出力できるため、後の検索・回答処理が容易になりました。</p>\n<h3 data-sourcepos=\"87:1-87:26\">\n<span id=\"21-ocr処理フロー\" class=\"fragment\"></span><a href=\"#21-ocr%E5%87%A6%E7%90%86%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>2.1 OCR処理フロー</h3>\n<ol data-sourcepos=\"89:1-129:0\">\n<li data-sourcepos=\"89:1-89:49\">PDFをそのままBlobでアップロード。</li>\n<li data-sourcepos=\"90:1-126:7\">Azure Document IntelligenceでOCR処理を実施。この際、以下のPythonスクリプトを使用しました。\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"91:5-126:7\"><div class=\"highlight\"><pre><code><span class=\"c1\">#!/usr/bin/env python3\n# import libraries\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">azure.core.credentials</span> <span class=\"kn\">import</span> <span class=\"n\">AzureKeyCredential</span>\n<span class=\"kn\">from</span> <span class=\"n\">azure.ai.documentintelligence</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentIntelligenceClient</span>\n<span class=\"kn\">from</span> <span class=\"n\">azure.ai.documentintelligence.models</span> <span class=\"kn\">import</span> <span class=\"n\">AnalyzeResult</span>\n<span class=\"kn\">from</span> <span class=\"n\">azure.ai.documentintelligence.models</span> <span class=\"kn\">import</span> <span class=\"n\">AnalyzeDocumentRequest</span>\n\n<span class=\"c1\"># set `&lt;your-endpoint&gt;` and `&lt;your-key&gt;` variables with the values from the Azure portal\n</span><span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">&lt;my-endpoint&gt;</span><span class=\"sh\">\"</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">&lt;my-key&gt;</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># PDFをBase64形式に変換する関数\n</span><span class=\"k\">def</span> <span class=\"nf\">convert_pdf_to_base64</span><span class=\"p\">(</span><span class=\"n\">pdf_file_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">pdf_file_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">rb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pdf_file</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"nf\">b64encode</span><span class=\"p\">(</span><span class=\"n\">pdf_file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># レイアウト解析を実行する関数\n</span><span class=\"k\">def</span> <span class=\"nf\">analyze_layout</span><span class=\"p\">(</span><span class=\"n\">pdf_path</span><span class=\"p\">):</span>\n    <span class=\"n\">base64_pdf</span> <span class=\"o\">=</span> <span class=\"nf\">convert_pdf_to_base64</span><span class=\"p\">(</span><span class=\"n\">pdf_path</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">DocumentIntelligenceClient</span><span class=\"p\">(</span><span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">credential</span><span class=\"o\">=</span><span class=\"nc\">AzureKeyCredential</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span>\n    <span class=\"n\">poller</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">begin_analyze_document</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">prebuilt-layout</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nc\">AnalyzeDocumentRequest</span><span class=\"p\">(</span><span class=\"n\">bytes_source</span><span class=\"o\">=</span><span class=\"n\">base64_pdf</span><span class=\"p\">),</span>\n        <span class=\"n\">output_content_format</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">markdown</span><span class=\"sh\">\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">poller</span><span class=\"p\">.</span><span class=\"nf\">result</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">pdf_path</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.pdf</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.md</span><span class=\"sh\">\"</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 実行\n</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">pdf_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">./documents/</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\">_out.pdf</span><span class=\"sh\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)]</span>\n    <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"n\">pdf_files</span><span class=\"p\">:</span>\n        <span class=\"nf\">analyze_layout</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n</code></pre></div></div>\n</li>\n<li data-sourcepos=\"127:1-129:0\">出力結果をMarkdown形式で保存<br>\nこのステップで、表やセクション構造などの文書情報が失われることなく取得できましたが、Figの情報が微妙だったり、一部複雑な表が崩れていました。表については、チャンキングを行う際に、一旦<code>pandas</code>の<code>pd.read_html()</code>を使用して、Markdownで出力しなおすという処理を噛ませました。</li>\n</ol>\n<p data-sourcepos=\"130:1-130:377\">また、図の一部は、必要なテキスト情報が抽出されていますが、順序性などが読み取れないものであったことから、一部の画像ページは、Claude 3.5 Sonnet(無料の5USD分)を使って、置き換える試みをしました。おそらく、図については、もっと適切な処理が必要だった様に思いました。</p>\n<hr data-sourcepos=\"132:1-133:0\">\n<h2 data-sourcepos=\"134:1-134:48\">\n<span id=\"3-キーワード抽出と埋め込み生成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E6%8A%BD%E5%87%BA%E3%81%A8%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. キーワード抽出と埋め込み生成</h2>\n<p data-sourcepos=\"136:1-136:323\">質問に適した文書部分を特定するため、BERT埋め込みを活用しました。当初、KeyBERTを使用してキーワードを抽出しようとしましたが、出力の品質が期待に満たなかったため、断念しました。その後、以下のチャンキング処理を実装しました。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"138:1-208:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">#!/usr/bin/env python3.12\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">import</span> <span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">tiktoken</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">from</span> <span class=\"n\">sentence_transformers</span> <span class=\"kn\">import</span> <span class=\"n\">SentenceTransformer</span>\n\n<span class=\"n\">document_dir</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./markdown</span><span class=\"sh\">'</span>\n<span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">tiktoken</span><span class=\"p\">.</span><span class=\"nf\">get_encoding</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">o200k_base</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">bert_model</span> <span class=\"o\">=</span> <span class=\"nc\">SentenceTransformer</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">paraphrase-multilingual-MiniLM-L12-v2</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">strip_tags</span><span class=\"p\">(</span><span class=\"n\">md_content</span><span class=\"p\">):</span>\n    <span class=\"n\">md_content</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">&lt;!--[\\s\\S]*?--&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">md_content</span><span class=\"p\">)</span>\n    <span class=\"n\">md_content</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">\\n{3,}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"se\">\\n\\n</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">md_content</span><span class=\"p\">)</span>\n    <span class=\"n\">md_content</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">#\\s+</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\"># </span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">md_content</span><span class=\"p\">)</span>\n    <span class=\"n\">md_content</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">^[●・]\\s*</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">- </span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">md_content</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">MULTILINE</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">md_content</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_markdown_with_headers</span><span class=\"p\">(</span><span class=\"n\">markdown_text</span><span class=\"p\">,</span> <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">):</span>\n    <span class=\"n\">chunks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current_chunk</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current_headers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">markdown_text</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">^(#{1,4})\\s+(.*)</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">.</span><span class=\"nf\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">.</span><span class=\"nf\">group</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">level</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">current_headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">title</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">current_headers</span> <span class=\"o\">=</span> <span class=\"n\">current_headers</span><span class=\"p\">[:</span><span class=\"n\">level</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">title</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">current_chunk</span><span class=\"p\">:</span>\n                <span class=\"n\">chunks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"sh\">\"</span><span class=\"s\"> / </span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">current_headers</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">current_chunk</span><span class=\"p\">)))</span>\n                <span class=\"n\">current_chunk</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">current_chunk</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">current_chunk</span><span class=\"p\">:</span>\n        <span class=\"n\">chunks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"sh\">\"</span><span class=\"s\"> / </span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">current_headers</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">current_chunk</span><span class=\"p\">)))</span>\n    <span class=\"n\">processed_chunks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">content</span> <span class=\"ow\">in</span> <span class=\"n\">chunks</span><span class=\"p\">:</span>\n        <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_tokens</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">),</span> <span class=\"n\">max_tokens</span><span class=\"p\">):</span>\n                <span class=\"n\">processed_chunks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">max_tokens</span><span class=\"p\">])))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">processed_chunks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">processed_chunks</span>\n\n<span class=\"n\">md_paths</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">markdown/*.md</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">chuncks_array</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">md_paths</span><span class=\"p\">:</span>\n    <span class=\"n\">doc_id</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">markdown/(\\d{1,2})\\.md</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">\\1</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">))</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">md_doc</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n        <span class=\"n\">chunks</span> <span class=\"o\">=</span> <span class=\"nf\">split_markdown_with_headers</span><span class=\"p\">(</span><span class=\"nf\">strip_tags</span><span class=\"p\">(</span><span class=\"n\">md_doc</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">chunk_id</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">chunks</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">chuncks_array</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n                <span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span>\n                <span class=\"sh\">'</span><span class=\"s\">chunk_id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">chunk_id</span><span class=\"p\">,</span>\n                <span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">,</span>\n                <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">chunk</span><span class=\"p\">,</span>\n                <span class=\"sh\">'</span><span class=\"s\">text_size</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">),</span>\n                <span class=\"sh\">'</span><span class=\"s\">estimate_tokens</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">))</span>\n            <span class=\"p\">})</span>\n<span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">chuncks_array</span><span class=\"p\">).</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">chunked_text.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"210:1-210:33\">\n<span id=\"4-ベクター情報の作成\" class=\"fragment\"></span><a href=\"#4-%E3%83%99%E3%82%AF%E3%82%BF%E3%83%BC%E6%83%85%E5%A0%B1%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4. ベクター情報の作成</h2>\n<p data-sourcepos=\"212:1-212:174\">埋め込み生成には、日本マイクロソフトから提供された<code>text-embedding-3-large</code>を使用しました。次のPythonスクリプトで実装しました。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"214:1-296:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">#!/usr/bin/env python3.12\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">import</span> <span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"n\">openai</span> <span class=\"kn\">import</span> <span class=\"n\">AzureOpenAI</span>\n\n<span class=\"n\">AZURE_OPENAI_API_KEY</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">AZURE_OPENAI_API_KEY</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">AZURE_OPENAI_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">AZURE_OPENAI_ENDPOINT</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">API_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">API_VERSION</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">DEPLOYMENT_ID_FOR_CHAT_COMPLETION</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">4omini</span><span class=\"sh\">\"</span>\n<span class=\"n\">DEPLOYMENT_ID_FOR_EMBEDDING</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">embedding</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">DOCUMENT_DIR</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./markdown</span><span class=\"sh\">'</span>\n<span class=\"n\">TARGET_PATH</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./chunked_text.ftr</span><span class=\"sh\">'</span>\n\n<span class=\"n\">df_text</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_feather</span><span class=\"p\">(</span><span class=\"n\">TARGET_PATH</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">AzureOpenAI</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">AZURE_OPENAI_API_KEY</span><span class=\"p\">,</span>\n    <span class=\"n\">azure_endpoint</span><span class=\"o\">=</span><span class=\"n\">AZURE_OPENAI_ENDPOINT</span><span class=\"p\">,</span>\n    <span class=\"n\">api_version</span><span class=\"o\">=</span><span class=\"n\">API_VERSION</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">embeddings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> \n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df_text</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">page</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">embeddings</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">,</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">DEPLOYMENT_ID_FOR_EMBEDDING</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">embedding_vector</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">embedding</span>\n\n        <span class=\"c1\"># embeddings リストに追加\n</span>        <span class=\"n\">embeddings</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">embedding_vector</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">エラー: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n\n<span class=\"n\">df_text</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">vector</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">embeddings</span>\n\n<span class=\"n\">df_text</span><span class=\"p\">.</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">chunked_emb.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">DOCUMENT_DIR</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./markdown</span><span class=\"sh\">'</span>\n<span class=\"n\">QUERY_PATH</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./query.csv</span><span class=\"sh\">'</span>\n<span class=\"n\">VECTOR_PATH</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">text_vectors_20250129.ftr</span><span class=\"sh\">'</span>\n\n\n<span class=\"n\">df_query</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">QUERY_PATH</span><span class=\"p\">)</span>\n\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df_query</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n\n    <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Embedding API を使って質問をベクトル化\n</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">embeddings</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">question</span><span class=\"p\">,</span>\n        <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">DEPLOYMENT_ID_FOR_EMBEDDING</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">question_vector</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">embedding</span>\n\n    <span class=\"n\">output</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span>\n        <span class=\"n\">index</span><span class=\"p\">,</span> \n        <span class=\"n\">question</span><span class=\"p\">,</span>\n        <span class=\"n\">question_vector</span>\n    <span class=\"p\">])</span>\n\n<span class=\"n\">df_out</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">vector</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">df_out</span><span class=\"p\">.</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">query.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"300:1-300:190\">最終的に、質問応答タスクにはBERTベースの言語モデルを採用し、埋め込み空間で最も関連性の高い文書をコンテキストとして提示しました。</p>\n<p data-sourcepos=\"302:1-302:249\">さらに、Cosine類似度を計算する前に、次のような質問文から固有名詞を抜き出すプロンプトを用意しました。(トークン数もそれほど多くなく、Gの前段として問題がないと判断しました)</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"304:1-339:3\"><div class=\"highlight\"><pre><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">QUERY_PATH</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">index,problem</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">''</span><span class=\"p\">)</span>\n\n<span class=\"n\">sys_content</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"sh\">'</span><span class=\"s\">文章から企業や商品名等の固有名詞を抽出を行います。\n</span><span class=\"sh\">'</span>\n    <span class=\"sh\">'</span><span class=\"s\">回答は先頭の番号ごとに記載し、固有名詞がなければ空欄にします。\n</span><span class=\"sh\">'</span>\n    <span class=\"sh\">'</span><span class=\"s\">書式は項番,固有名詞とします。</span><span class=\"sh\">'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">usr_content</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"sh\">'</span><span class=\"s\">次の文章から固有名詞を抽出してください。\n\n</span><span class=\"sh\">'</span>\n    <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"sh\">'</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">DEPLOYMENT_ID_FOR_CHAT_COMPLETION</span><span class=\"p\">,</span>\n        <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">system</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">sys_content</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">usr_content</span><span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">output_tmp.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"341:1-343:498\">本来、DBを構築すべきですが、諸般の事情で、事前に準備したFeatherフォーマットのファイルを使って、質問とコンテキストを用意することにし、質問とチャンク化されたテキスト情報の類似度は、次の様にしました。<br>\n<br>\nチャンク化されたテキストは、おおよそ一つが500文字程度であったことから、ここでは、一つの質問に対して、類似度が高い9個の内容を単純に結合し、それをプロンプトにくべる内容としました。これにより、一つの質問に対する入力トークンがテキスト情報については、4000〜6000程度になっていたと思います。表や図は大きくなるため、小さくならないものもあった。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"345:1-436:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n\n<span class=\"n\">DOCUMENT_DIR</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./markdown</span><span class=\"sh\">'</span>\n<span class=\"n\">QUERY_PATH</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./query.ftr</span><span class=\"sh\">'</span>\n<span class=\"n\">VECTOR_PATH</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./chunked_emb.ftr</span><span class=\"sh\">'</span>\n<span class=\"n\">SIM_DOC_INFO</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">output_tmp.csv</span><span class=\"sh\">'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cosine_similarity</span><span class=\"p\">(</span><span class=\"n\">vec_a</span><span class=\"p\">,</span> <span class=\"n\">vec_b</span><span class=\"p\">):</span>\n    <span class=\"sh\">'''</span><span class=\"s\">\n    </span><span class=\"sh\">'''</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">vec_a</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">vec_b</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"nf\">norm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"nf\">norm</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">df_sim_doc</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">SIM_DOC_INFO</span><span class=\"p\">)</span>\n<span class=\"n\">df_query</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_feather</span><span class=\"p\">(</span><span class=\"n\">QUERY_PATH</span><span class=\"p\">)</span>\n<span class=\"n\">vector_rec</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_feather</span><span class=\"p\">(</span><span class=\"n\">VECTOR_PATH</span><span class=\"p\">)</span>\n\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">docids</span> <span class=\"o\">=</span> <span class=\"n\">vector_rec</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">to_list</span><span class=\"p\">()</span>\n<span class=\"n\">page_number_list</span> <span class=\"o\">=</span> <span class=\"n\">vector_rec</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">page</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">to_list</span><span class=\"p\">()</span>\n<span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"n\">vector_rec</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">to_list</span><span class=\"p\">()</span>\n<span class=\"n\">embeddings</span> <span class=\"o\">=</span> <span class=\"n\">vector_rec</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">vector</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">to_list</span><span class=\"p\">()</span>\n\n<span class=\"n\">doc_pages</span> <span class=\"o\">=</span> <span class=\"n\">vector_rec</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"sh\">'</span><span class=\"s\">page</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">max</span><span class=\"p\">()</span>\n\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df_query</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n\n    <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">q_vector</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">vector</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n    <span class=\"n\">target_doc</span> <span class=\"o\">=</span> <span class=\"n\">df_sim_doc</span><span class=\"p\">[</span><span class=\"n\">df_sim_doc</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">index</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">to_list</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">(doc = </span><span class=\"si\">{</span><span class=\"n\">target_doc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">target_doc</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">None</span><span class=\"si\">}</span><span class=\"s\">)問い合わせ: </span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 【4-3】先ほどのテキストに対して、コサイン類似度を計算\n</span>    <span class=\"n\">similarities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">embedding_vector</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">embeddings</span><span class=\"p\">):</span>\n        <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"nf\">cosine_similarity</span><span class=\"p\">(</span><span class=\"n\">embedding_vector</span><span class=\"p\">,</span> <span class=\"n\">q_vector</span><span class=\"p\">)</span>\n        <span class=\"n\">similarities</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">docids</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">page_number_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">texts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">score</span><span class=\"p\">))</span>\n        <span class=\"c1\"># df_outと比較して、固有名詞が含まれている場合は、その企業情報のみにする。\n</span>    \n    <span class=\"c1\"># どの会社か特定できている場合\n</span>    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">target_doc</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">similarities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">similarities</span> <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target_doc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n    \n    <span class=\"c1\"># 類似度スコアが高い順にソート\n</span>    <span class=\"n\">similarities</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 上位5件のみとして、ページ順にソーティング\n</span>    <span class=\"n\">similarities</span> <span class=\"o\">=</span> <span class=\"n\">similarities</span><span class=\"p\">[:</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># 固有名詞が見つからず、複数のドキュメントが混在しているものがあるため\n</span>    <span class=\"n\">max_docs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">amax</span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">similarities</span><span class=\"p\">])</span>\n    <span class=\"n\">similarities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">similarities</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">max_docs</span><span class=\"p\">]</span>\n\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sim</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">sim</span> <span class=\"ow\">in</span> <span class=\"n\">similarities</span><span class=\"p\">]</span>\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">pages</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sim</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">sim</span> <span class=\"ow\">in</span> <span class=\"n\">similarities</span><span class=\"p\">]</span>\n\n    <span class=\"n\">similarities</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span>\n        <span class=\"n\">index</span><span class=\"p\">,</span> \n        <span class=\"n\">question</span><span class=\"p\">,</span>\n        <span class=\"n\">similarities</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># doc\n</span>        <span class=\"n\">pages</span><span class=\"p\">,</span> <span class=\"c1\"># pages\n</span>        <span class=\"n\">scores</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"se\">\\n\\n</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">([</span><span class=\"n\">sim</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">sim</span> <span class=\"ow\">in</span> <span class=\"n\">similarities</span><span class=\"p\">]),</span>\n    <span class=\"p\">])</span>\n\n\n<span class=\"n\">df_sim_doc</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> \n                          <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">,</span> \n                                    <span class=\"sh\">'</span><span class=\"s\">pages</span><span class=\"sh\">'</span><span class=\"p\">,</span> \n                                    <span class=\"sh\">'</span><span class=\"s\">scores</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                                    <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"n\">df_sim_doc</span><span class=\"p\">.</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">problem_a9.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"438:1-438:35\">\n<span id=\"5-gpt-4o-miniでの試行結果\" class=\"fragment\"></span><a href=\"#5-gpt-4o-mini%E3%81%A7%E3%81%AE%E8%A9%A6%E8%A1%8C%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>5. GPT-4o-miniでの試行結果</h2>\n<p data-sourcepos=\"440:1-440:484\">EmbeddingとCosine Similarityの後に、次の<strong>G</strong>部分を作成しました。先ほどの類似度検索したFeatherを読み込み、それに類似度が上位4位以内のページの画像を合わせて、プロンプトするものとしました。画像は、１ページあたり1000程度のコンテキストと処理されていた様であり、今回チャンキングした情報に比べるとそれほど大きくなく、使い勝手が良さそうでした。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"442:1-677:4\"><div class=\"highlight\"><pre><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">datetime</span> <span class=\"k\">as</span> <span class=\"n\">dt</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"n\">base64</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tiktoken</span>\n\n<span class=\"kn\">from</span> <span class=\"n\">openai</span> <span class=\"kn\">import</span> <span class=\"n\">AzureOpenAI</span><span class=\"p\">,</span> <span class=\"n\">OpenAI</span>\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"n\">warnings</span><span class=\"p\">.</span><span class=\"nf\">filterwarnings</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ignore</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">DEPLOYMENT_ID_FOR_CHAT_COMPLETION</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">4omini</span><span class=\"sh\">\"</span>\n<span class=\"n\">AZURE_OPENAI_API_KEY</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">AZURE_OPENAI_API_KEY</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">AZURE_OPENAI_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">AZURE_OPENAI_ENDPOINT</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">API_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">API_VERSION</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">PNG_DIR</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./png</span><span class=\"sh\">'</span>\n\n\n<span class=\"n\">SYS_CONTENT</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">\n# Role\nあなたは統合報告書・ESGレポートを分析する優秀なアナリストです。\nユーザーはこれら報告書等を活用にするにあたり、あなたに質問をするので、それに回答することでサポートします。\n\n# Your Task\n\n## **Input**\n\n---コンテキスト---: &lt;Markdown形式で記述された統合報告書の一部分&gt;\n---質問---: &lt;コンテキストに対する質問&gt;\n\n## **Output**\nmarkdown形式で回答します。\n\n```markdown\n# 回答\n&lt;回答内容&gt;\n\n## 根拠\n&lt;回答の理由&gt;\n\n## **Process**\n\n1. 質問の内容から想定される回答について、回答内容に対する正規表現を用意します。\n2. 質問内容の解釈とその思考過程がわかる様に段階的に回答の根拠を&lt;回答の理由&gt;を記述します。可能な限り記載してください。また計算が伴う場合は、計算式も詳細に記してください。\n3. &lt;回答の理由&gt;と&lt;回答内容&gt;が整合しているか、矛盾がなく無関係となっていないか確認します。\n4. &lt;回答内容&gt;が1.の正規表現に合致するか確認します。合致していなければ、1.から3.を繰り返します。\n\n## Policy\n\n* &lt;回答内容&gt;は54文字以内とします。\n* 統合報告書・ESGレポートの画像が提供される場合があります。その場合は、コンテキストは画像情報の補助的なものとなります。\n* 計算は精度が高いものを使用し、四捨五入等の丸め処理は最後に行ってください。\n* &lt;回答内容&gt;は可能な限り短くし、「YYYY年度の〜は、〇〇〇〇名です」となる場合は「〇〇〇〇名」の様にしてください。\n* 計算が伴う回答を行う際は、**できる限り精度の高い手法**を用います。\n* 質問に単位が含まれている場合、その単位の通りに回答します。例: 822,391円に対して何万円であれば82万円、3,000千円に対して、何円であれば3,000,000円\n* 質問に「小数第一位を四捨五入して答えてください。」という場合があります。計算した結果の数値が81.912%の場合、回答の数値は「82%」となります。\n* 質問が「カタカナで答えてください」や「ひらがな・カタカナ・漢字を全て含む」という質問などに注意してください。\n* コンテキストから見つからない場合、回答: わからない(根拠: &lt;回答の理由&gt;)とします。\n</span><span class=\"sh\">'''</span>\n\n<span class=\"n\">amendment</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n8,ダイドーグループが2012年に立ち上げたチャネルの国内飲料事業の中での売上は何％か,3％\n9,ウエルシアホールディングスが掲げる2030のありたい姿はなんですか？,地域No.1の健康ステーション\n10,日本化薬グループが「TCFD提言」に賛同したのは何年何月ですか？,2022年3月\n11,花王の製品ライフサイクル全体のCO2 排出量において2019年度と2020年度ではどちらの数値が大きいか,2019年度\n12,電通グループの電力使用に伴うCO2排出量ゼロを達成した撮影スタジオの名称を答えよ。,FACTORY ANZEN STUDIO\n13,ダイドーグループの国内飲料事業では保有している自販機台数は約何台ですか？,約27万台\n14,2024年2月29日現在、ウエルシアホールディングスの子会社は全部で何社ですか？,14社\n</span><span class=\"sh\">'''</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">conv_img_to_base64</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    PDFファイルを読み込み、Base64形式に変換する。\n    \n    Args:\n        pdf_file_path (str): PDFファイルのパス。\n    \n    Returns:\n      Base64形式の文字列。\n    </span><span class=\"sh\">\"\"\"</span>\n    \n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># PDFファイルを読み込む\n</span>        <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">rb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">im_file</span><span class=\"p\">:</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">im_file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n            \n            <span class=\"c1\"># Base64形式に変換\n</span>            <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"nf\">b64encode</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">エラーが発生しました: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">AzureOpenAI</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">AZURE_OPENAI_API_KEY</span><span class=\"p\">,</span>\n    <span class=\"n\">azure_endpoint</span><span class=\"o\">=</span><span class=\"n\">AZURE_OPENAI_ENDPOINT</span><span class=\"p\">,</span>\n    <span class=\"n\">api_version</span><span class=\"o\">=</span><span class=\"n\">API_VERSION</span>\n<span class=\"p\">)</span>\n\n\n\n<span class=\"c1\"># 質問をOpenAI APIに送信し回答を取得\n</span><span class=\"k\">def</span> <span class=\"nf\">get_answer</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">doc_id</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"p\">:</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]):</span>\n    <span class=\"sh\">'''</span><span class=\"s\">\n    </span><span class=\"sh\">'''</span>\n    <span class=\"n\">usr_content</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'''</span><span class=\"s\">次のコンテキストを参照して回答してください:\n</span><span class=\"si\">{</span><span class=\"n\">context</span><span class=\"si\">}</span><span class=\"s\">\n\n---質問---\n</span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s\">\n</span><span class=\"sh\">'''</span>\n\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">system</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">SYS_CONTENT</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>  <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">usr_content</span><span class=\"p\">},</span>\n        <span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"n\">pages</span><span class=\"p\">:</span>\n        <span class=\"n\">png_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">./png/</span><span class=\"si\">{</span><span class=\"n\">doc_id</span><span class=\"si\">}</span><span class=\"s\">-</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">:</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span> <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">image_url</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">image_url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">data:image/jpeg;base64,</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"nf\">conv_img_to_base64</span><span class=\"p\">(</span><span class=\"n\">png_path</span><span class=\"p\">)}</span>\n        <span class=\"p\">})</span>\n\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">DEPLOYMENT_ID_FOR_CHAT_COMPLETION</span><span class=\"p\">,</span>\n            <span class=\"c1\"># max_tokens=54,   \n</span>            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">message</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">total_tokens</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">usage</span><span class=\"p\">.</span><span class=\"n\">total_tokens</span><span class=\"p\">,</span>\n        <span class=\"n\">prompt_tokens</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">usage</span><span class=\"p\">.</span><span class=\"n\">prompt_tokens</span>\n        <span class=\"k\">return</span> <span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"n\">total_tokens</span><span class=\"p\">,</span> <span class=\"n\">prompt_tokens</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">EXCEPTION</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span>\n        <span class=\"c1\"># return f\"エラー: {e}\"\n</span>\n\n\n<span class=\"c1\"># 回答を保存するリスト\n</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">df_query</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">problem_a9.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">df_query</span><span class=\"p\">.</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"c1\"># df_query = df_query.head(5)\n</span><span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">tiktoken</span><span class=\"p\">.</span><span class=\"nf\">get_encoding</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">o200k_base</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 各質問に対して回答を取得し保存\n</span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df_query</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">doc_id</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"c1\"># page = row[1]['page']\n</span>    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">pages</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n\n    <span class=\"n\">target_pages</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">pages</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">target_pages</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">target_pages</span><span class=\"p\">)</span>\n\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s\"> (est_context_tokens = </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">))</span><span class=\"si\">:</span><span class=\"p\">,</span><span class=\"si\">}</span><span class=\"s\">)</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">)</span>\n\n    <span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"n\">total_tokens</span><span class=\"p\">,</span> <span class=\"n\">prompt_tokens</span> <span class=\"o\">=</span> <span class=\"nf\">get_answer</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> \n                                                     <span class=\"n\">doc_id</span><span class=\"o\">=</span><span class=\"n\">doc_id</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"n\">target_pages</span>\n                                                     <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">answer</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">EXCEPTION</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">わかりません。。。</span><span class=\"sh\">'</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">answer</span><span class=\"si\">}</span><span class=\"s\">(total_tokens = </span><span class=\"si\">{</span><span class=\"n\">total_tokens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">)</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> \n                    <span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"n\">total_tokens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">prompt_tokens</span><span class=\"p\">])</span>\n\n    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">10</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">index</span> <span class=\"o\">!=</span> <span class=\"mi\">99</span><span class=\"p\">:</span>\n        <span class=\"n\">df_ans</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> \n                            <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">question</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">doc_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> \n                                    <span class=\"sh\">'</span><span class=\"s\">pages</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">context</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">answer_detail</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                                    <span class=\"sh\">'</span><span class=\"s\">total_tokens</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">prompt_tokens</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n        <span class=\"n\">df_ans</span><span class=\"p\">.</span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">context</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">df_ans</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_ans</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer_detail</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"nf\">extract</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\"># 回答\\n(.*)\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">df_ans</span><span class=\"p\">.</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">predictions_checkpoint.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">df_ans</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> \n                    <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">question</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">doc_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> \n                            <span class=\"sh\">'</span><span class=\"s\">pages</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">context</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">answer_detail</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                            <span class=\"sh\">'</span><span class=\"s\">total_tokens</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">prompt_tokens</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"n\">df_ans</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_ans</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer_detail</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"nf\">extract</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\"># 回答\\n(.*)\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"p\">.</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">strftime</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">%Y%m%dT%H%M%S</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">### </span><span class=\"si\">{</span><span class=\"n\">now</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">output_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">pred_4omini_</span><span class=\"si\">{</span><span class=\"n\">now</span><span class=\"si\">}</span><span class=\"s\">.csv</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">結果がCSVに保存されました: </span><span class=\"si\">{</span><span class=\"n\">output_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">df_ans</span><span class=\"p\">.</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">pred_4omini_</span><span class=\"si\">{</span><span class=\"n\">now</span><span class=\"si\">}</span><span class=\"s\">.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">df_ans</span><span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">]].</span><span class=\"nf\">to_csv</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8-sig</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"680:1-680:306\">当初は、このプロンプトを日本マイクロソフトさん提供の<strong>GPT-4o-mini</strong>で試行しましたが、回答が冗長で、暫定スコアが<code>0.42</code>(最終スコアは<code>0.35</code>で、この時は最も近似の4ページまでを送信)と、期待した結果が得られませんでした。</p>\n<h3 data-sourcepos=\"682:1-682:8\">\n<span id=\"例\" class=\"fragment\"></span><a href=\"#%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>例:</h3>\n<div class=\"code-frame\" data-lang=\"plain\" data-sourcepos=\"684:1-686:3\"><div class=\"highlight\"><pre><code>1,株式会社キッツの取締役の報酬のうち株式報酬の割合は何％？\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"markdown\" data-sourcepos=\"688:1-694:3\"><div class=\"highlight\"><pre><code><span class=\"gh\"># 回答</span>\n取締役の報酬における株式報酬の割合は20%です。\n\n<span class=\"gu\">## 根拠</span>\n取締役の報酬等構成比の表において、株式報酬が20%と記載されているため。\n</code></pre></div></div>\n<p data-sourcepos=\"696:1-696:214\">回答が詳細すぎることが、AcceptableやIncorrectになってしまい、適切にコンテキストを捉えているものの、スコアに影響した可能性が大いにある様に見えました。</p>\n<h2 data-sourcepos=\"698:1-698:57\">\n<span id=\"7-gemini-20-flash-thinking-exp-01-21-の試行結果\" class=\"fragment\"></span><a href=\"#7-gemini-20-flash-thinking-exp-01-21-%E3%81%AE%E8%A9%A6%E8%A1%8C%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>7. Gemini 2.0 flash-thinking-exp-01-21 の試行結果</h2>\n<p data-sourcepos=\"700:1-702:156\">GPT-4o-miniでうまくいかなかったため、<strong>gemini-2.0-flash</strong>と<strong>gemini-2.0-flash-thinking-exp-01-21</strong>を代わりに利用したところ、冗長な回答はなくなり、スコアはやや上昇しました。<br>\ngemini-2.0-flashは、回答と根拠で矛盾が見られるものが増加しました。おいおい、回答の根拠を考えてる間に何が起きたんだい？と言わんばかりに...<br>\nそのため、<strong>gemini-2.0-flash-thinking-exp-01-21</strong>に切り替えると、矛盾は少なくなりましたが、それでも少し見られました。</p>\n<p data-sourcepos=\"705:1-705:416\">また、画像を前後追加し、一つの４ページ分から12ページ分としました。入力コンテキストを長くしても特段問題がなく、他のモデルは長くすると、やはり回答が矛盾したり、必要な情報を見つけることができていなかった様子です。このことからすると、本来のRAGの趣旨からはズレていたのかもしれません。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"707:1-976:4\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">re</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">import</span> <span class=\"n\">datetime</span> <span class=\"k\">as</span> <span class=\"n\">dt</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"n\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"n\">base64</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">import</span> <span class=\"n\">tiktoken</span>\n\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">from</span> <span class=\"n\">google</span> <span class=\"kn\">import</span> <span class=\"n\">genai</span>\n<span class=\"kn\">from</span> <span class=\"n\">google.genai</span> <span class=\"kn\">import</span> <span class=\"n\">types</span>\n\n<span class=\"n\">warnings</span><span class=\"p\">.</span><span class=\"nf\">filterwarnings</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ignore</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n\n\n<span class=\"n\">PNG_DIR</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">./png</span><span class=\"sh\">'</span>\n\n\n<span class=\"n\">SYS_CONTENT</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">\n# Role\nあなたは統合報告書・ESGレポートを分析する優秀なアナリストです。\nユーザーはこれら報告書等を活用にするにあたり、あなたに質問をするので、それに回答することでサポートします。\n\n# Your Task\n\n## **Input**\n\n---コンテキスト---: &lt;Markdown形式で記述された統合報告書の一部分&gt;\n---質問---: &lt;コンテキストに対する質問&gt;\n\n## **Output**\nmarkdown形式で回答します。\n\n```markdown\n# 回答\n&lt;回答内容&gt;\n\n## 根拠\n&lt;回答の理由&gt;\n\n## **Process**\n\n1. 質問の内容から想定される回答について、回答内容に対する正規表現を用意します。\n2. 質問内容の解釈とその思考過程がわかる様に段階的に回答の根拠を&lt;回答の理由&gt;を記述します。可能な限り記載してください。また計算が伴う場合は、計算式も詳細に記してください。\n3. &lt;回答の理由&gt;と&lt;回答内容&gt;が整合しているか、矛盾がなく無関係となっていないか確認します。\n4. &lt;回答内容&gt;が1.の正規表現に合致するか確認します。合致していなければ、1.から3.を繰り返します。\n\n## Policy\n\n* &lt;回答内容&gt;は54文字以内とします。\n* 統合報告書・ESGレポートの画像が提供される場合があります。その場合は、コンテキストは画像情報の補助的なものとなります。\n* 計算は精度が高いものを使用し、四捨五入等の丸め処理は最後に行ってください。\n* &lt;回答内容&gt;は可能な限り短くし、「YYYY年度の〜は、〇〇〇〇名です」となる場合は「〇〇〇〇名」の様にしてください。\n* 計算が伴う回答を行う際は、**できる限り精度の高い手法**を用います。\n* 質問に単位が含まれている場合、その単位の通りに回答します。例: 822,391円に対して何万円であれば82万円、3,000千円に対して、何円であれば3,000,000円\n* 質問に「小数第一位を四捨五入して答えてください。」という場合があります。計算した結果の数値が81.912%の場合、回答の数値は「82%」となります。\n* 質問が「カタカナで答えてください」や「ひらがな・カタカナ・漢字を全て含む」という質問などに注意してください。\n* コンテキストから見つからない場合、回答: わからない(根拠: &lt;回答の理由&gt;)とします。\n\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n</span><span class=\"sh\">'''</span>\n\n<span class=\"n\">amendment</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n8,ダイドーグループが2012年に立ち上げたチャネルの国内飲料事業の中での売上は何％か,3％\n9,ウエルシアホールディングスが掲げる2030のありたい姿はなんですか？,地域No.1の健康ステーション\n10,日本化薬グループが「TCFD提言」に賛同したのは何年何月ですか？,2022年3月\n11,花王の製品ライフサイクル全体のCO2 排出量において2019年度と2020年度ではどちらの数値が大きいか,2019年度\n12,電通グループの電力使用に伴うCO2排出量ゼロを達成した撮影スタジオの名称を答えよ。,FACTORY ANZEN STUDIO\n13,ダイドーグループの国内飲料事業では保有している自販機台数は約何台ですか？,約27万台\n14,2024年2月29日現在、ウエルシアホールディングスの子会社は全部で何社ですか？,14社\n</span><span class=\"sh\">'''</span>\n\n<span class=\"c1\">#         usr_content = f'''---コンテキスト---\n# {context}\n</span>\n<span class=\"c1\"># ---質問---\n# {question}\n# '''\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">conv_img_to_base64</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    PDFファイルを読み込み、Base64形式に変換する。\n    \n    Args:\n        pdf_file_path (str): PDFファイルのパス。\n    \n    Returns:\n      Base64形式の文字列。\n    </span><span class=\"sh\">\"\"\"</span>\n    \n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># PDFファイルを読み込む\n</span>        <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">rb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">im_file</span><span class=\"p\">:</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">im_file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n            \n            <span class=\"c1\"># Base64形式に変換\n</span>            <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"nf\">b64encode</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">エラーが発生しました: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_images_vertically</span><span class=\"p\">(</span><span class=\"n\">doc_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"c1\"># フォルダ内のPNGファイルを取得し、ソート\n</span>\n    <span class=\"n\">png_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">PNG_DIR</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">doc_id</span><span class=\"si\">}</span><span class=\"s\">-</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">:</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span> <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">page</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">png_path_prev</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">PNG_DIR</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">doc_id</span><span class=\"si\">}</span><span class=\"s\">-</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"si\">:</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span> <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>    \n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">png_path_prev</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">PNG_DIR</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">doc_id</span><span class=\"si\">}</span><span class=\"s\">-</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"si\">:</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span> <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">png_path_next</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">PNG_DIR</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">doc_id</span><span class=\"si\">}</span><span class=\"s\">-</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">:</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span> <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">isfile</span><span class=\"p\">(</span><span class=\"n\">png_path_next</span><span class=\"p\">):</span>\n        <span class=\"n\">png_path_next</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">PNG_DIR</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">doc_id</span><span class=\"si\">}</span><span class=\"s\">-</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"si\">:</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span> <span class=\"k\">if</span> <span class=\"n\">doc_id</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">png_path_prev</span><span class=\"p\">,</span> <span class=\"n\">png_path</span><span class=\"p\">,</span> <span class=\"n\">png_path_next</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\"># 画像を読み込む\n</span>    <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># 結合後の画像サイズを計算（幅は最大値、高さは合計）\n</span>    <span class=\"n\">max_width</span> <span class=\"o\">=</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">images</span><span class=\"p\">)</span>\n    <span class=\"n\">total_height</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">images</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 新しいキャンバスを作成\n</span>    <span class=\"n\">merged_image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">RGB</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">max_width</span><span class=\"p\">,</span> <span class=\"n\">total_height</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">white</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 各画像を結合\n</span>    <span class=\"n\">y_offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">images</span><span class=\"p\">:</span>\n        <span class=\"n\">merged_image</span><span class=\"p\">.</span><span class=\"nf\">paste</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y_offset</span><span class=\"p\">))</span>\n        <span class=\"n\">y_offset</span> <span class=\"o\">+=</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">height</span>  <span class=\"c1\"># 高さを加算\n</span>\n    <span class=\"k\">return</span> <span class=\"n\">merged_image</span>\n\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">GEMINI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">genai</span><span class=\"p\">.</span><span class=\"nc\">Client</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_answer</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">doc_id</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"p\">:</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gemini-2.0-flash-thinking-exp-01-21</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"sh\">'''</span><span class=\"s\">\n    </span><span class=\"sh\">'''</span>\n    <span class=\"n\">usr_content</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'''</span><span class=\"s\">次のコンテキストを参照して回答してください:\n</span><span class=\"si\">{</span><span class=\"n\">context</span><span class=\"si\">}</span><span class=\"s\">\n\n---質問---\n</span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s\">\n</span><span class=\"sh\">'''</span>\n\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SYS_CONTENT</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"n\">usr_content</span><span class=\"p\">]</span>\n    <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">merge_images_vertically</span><span class=\"p\">(</span><span class=\"n\">doc_id</span><span class=\"o\">=</span><span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"n\">page</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"n\">pages</span><span class=\"p\">]</span>\n\n\n    <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nf\">generate_content</span><span class=\"p\">(</span>\n            <span class=\"c1\"># model=\"gemini-2.0-flash\",\n</span>            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model_name</span><span class=\"p\">,</span>\n            <span class=\"c1\"># temperature=0.0,\n</span>            <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">text</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">EXCEPTION</span><span class=\"sh\">\"</span>\n\n\n\n<span class=\"c1\"># 回答を保存するリスト\n</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">df_query</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_feather</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">problem_a9.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">df_query</span><span class=\"p\">.</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"c1\"># df_query = df_query.head(5)\n</span><span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">tiktoken</span><span class=\"p\">.</span><span class=\"nf\">get_encoding</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">o200k_base</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">target_indexes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">target_indexes</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">df_query</span> <span class=\"o\">=</span> <span class=\"n\">df_query</span><span class=\"p\">[</span><span class=\"n\">df_query</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">isin</span><span class=\"p\">(</span><span class=\"n\">target_indexes</span><span class=\"p\">)]</span> <span class=\"c1\">#.sort_values(['doc', 'index'], ascending=True)\n</span>\n<span class=\"c1\"># 各質問に対して回答を取得し保存\n</span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df_query</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">doc_id</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">doc</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">pages</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">problem</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n\n    <span class=\"n\">target_pages</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">pages</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">target_pages</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">target_pages</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">:</span><span class=\"mi\">02</span><span class=\"n\">d</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s\"> (est_context_tokens = </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">))</span><span class=\"si\">:</span><span class=\"p\">,</span><span class=\"si\">}</span><span class=\"s\">)</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">)</span>\n\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"nf\">get_answer</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> \n                        <span class=\"n\">doc_id</span><span class=\"o\">=</span><span class=\"n\">doc_id</span><span class=\"p\">,</span>\n                        <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"n\">target_pages</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">answer</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">EXCEPTION</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">わかりません。。。</span><span class=\"sh\">'</span>\n        <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"nf\">get_answer</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> \n                            <span class=\"n\">doc_id</span><span class=\"o\">=</span><span class=\"n\">doc_id</span><span class=\"p\">,</span>\n                            <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"n\">target_pages</span><span class=\"p\">,</span>\n                            <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gemini-2.0-flash</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">answer</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">EXCEPTION</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n            <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">わかりません。。。</span><span class=\"sh\">'</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">answer</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">([</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> \n                    <span class=\"n\">answer</span><span class=\"p\">,</span> \n                    <span class=\"p\">])</span>\n\n<span class=\"n\">df_ans</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> \n                      <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">question</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">doc_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> \n                               <span class=\"sh\">'</span><span class=\"s\">pages</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">context</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">answer_detail</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                            <span class=\"c1\">#    'total_tokens', 'prompt_tokens'\n</span>                               <span class=\"p\">])</span>\n\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"p\">.</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">strftime</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">%Y%m%dT%H%M%S</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">output_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">predictions_</span><span class=\"si\">{</span><span class=\"n\">now</span><span class=\"si\">}</span><span class=\"s\">.csv</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">結果がCSVに保存されました: </span><span class=\"si\">{</span><span class=\"n\">output_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">target_indexes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">df_ans</span><span class=\"p\">.</span><span class=\"nf\">to_feather</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">predictions_detail_</span><span class=\"si\">{</span><span class=\"n\">now</span><span class=\"si\">}</span><span class=\"s\">.ftr</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">df_ans</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_ans</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer_detail</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"nf\">extract</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\"># 回答\\n(.*)\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">### </span><span class=\"si\">{</span><span class=\"n\">now</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">target_indexes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">df_ans</span><span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">]].</span><span class=\"nf\">to_csv</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8-sig</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n\n</code></pre></div></div>\n<h2 data-sourcepos=\"978:1-978:39\">\n<span id=\"8-回答整合性の確認と修正\" class=\"fragment\"></span><a href=\"#8-%E5%9B%9E%E7%AD%94%E6%95%B4%E5%90%88%E6%80%A7%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%81%A8%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>8. 回答整合性の確認と修正</h2>\n<p data-sourcepos=\"980:1-980:159\">そこで、次の様に、一旦回答した内容結果を改めて確認し、内容がおかしければ修正するという処理を追加しました。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"982:1-1067:4\"><div class=\"highlight\"><pre><code><span class=\"n\">SYS_CONTENT</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">\n# Role\nあなたは統合報告書・ESGレポートを分析する優秀なアナリストです。\nユーザーはこれら報告書等を活用にするにあたり、あなたに質問をするので、それに回答することでサポートします。\n\n# Your Task\n統合報告書の質問に対して、回答とその根拠が記載されたものがありますが、その内容が整合していないものがあります。\nこのため、整合していないものについて修正を行って、最終的な回答とすることをサポートします。\n\n## **Input**\n\n---前回の回答---: &lt;以前の回答と根拠&gt;\n\n---質問---: &lt;質問&gt;\n\n## **Output**\n修正した回答と根拠をmarkdown形式で回答します。\n\n```markdown\n# 回答\n&lt;回答内容&gt;\n\n## 根拠\n&lt;回答の理由&gt;\n\n## **Process**\n\n1. 前回の回答について、&lt;回答内容&gt;と&lt;回答の理由&gt;が整合しているか確認します。まず、&lt;回答の理由&gt;を分析し、&lt;回答内容&gt;と整合していない場合は、&lt;回答内容&gt;を更新します。\n2. 1.で&lt;回答内容&gt;と&lt;回答の理由&gt;が整合していれば、&lt;回答内容&gt;と&lt;回答の理由&gt;はそのままとします。\n3. &lt;回答内容&gt;と&lt;質問&gt;の単位や求める書式に合致するか確認し、異なっている場合は、単位や数量を変更します。\n\n## Policy\n\n* &lt;回答内容&gt;は54文字以内とします。\n* &lt;回答内容&gt;は可能な限り短くし、「YYYY年度の〜は、〇〇〇〇名です」となる場合は「〇〇〇〇名」の様にしてください。さらに質問と比較して、冗長と思われる表現を除いてください。\n* コンテキストは&lt;回答の理由&gt;であるため、&lt;回答の理由&gt;と&lt;回答内容&gt;のみで整合性を確認し、外部の情報を用いません。\n* 計算が伴う回答を行う際は、**できる限り精度の高い手法**を用い、四捨五入等の丸め処理は最後に行ってください。\n* 質問に単位が含まれている場合、その単位の通りに回答します。\n* 質問が「カタカナで答えてください」や「ひらがな・カタカナ・漢字を全て含む」という質問などに注意してください。\n* 必ず、回答: わからない(根拠: &lt;回答の理由&gt;)とします。\n\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n</span><span class=\"sh\">'''</span>\n\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">GEMINI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">genai</span><span class=\"p\">.</span><span class=\"nc\">Client</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 質問をOpenAI APIに送信し回答を取得\n</span><span class=\"k\">def</span> <span class=\"nf\">get_answer</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">prev_ans</span><span class=\"p\">):</span>\n    <span class=\"sh\">'''</span><span class=\"s\">\n    </span><span class=\"sh\">'''</span>\n    <span class=\"n\">usr_content</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'''</span><span class=\"s\">「前回の回答」の&lt;回答&gt;と&lt;根拠&gt;が整合しているか確認し、回答を修正してください。\nまた、「質問」が求める数量や単位などに合致しているか確認してください。\n---前回の回答---\n</span><span class=\"si\">{</span><span class=\"n\">prev_ans</span><span class=\"si\">}</span><span class=\"s\">\n\n---質問---\n</span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s\">\n</span><span class=\"sh\">'''</span>\n\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SYS_CONTENT</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">\n</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"n\">usr_content</span><span class=\"p\">]</span>\n    \n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nf\">generate_content</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gemini-2.0-flash</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">text</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">EXCEPTION</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span>\n</code></pre></div></div>\n<p data-sourcepos=\"1069:1-1069:354\">この様に二段階としたところ、暫定スコアが0.73(最終スコアが0.71)まで上がりました。なお、回答を見直す処理は、<strong>gemini-2.0-flash-thinking-exp-01-21</strong>より<strong>gemini-2.0-flash</strong>の方が良かった様でした。<strong>gemini-2.0-flash-thinking-exp-01-21</strong>は余計なことをする様な印象がありました。</p>\n<h2 data-sourcepos=\"1071:1-1071:15\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h2>\n<p data-sourcepos=\"1073:1-1073:526\">今回、初めてRAGに関するコンペに参加し、試行錯誤することができました。生成AIは、ChatGPT 4oを利用しているのですが、APIを使ったことはなく、大変学びになりました。また、Azureを使ってこなかったのですが、さまざまなサービス・機能があるので、いろいろと活用してみたいなと感じました。(コードをベタベタと貼った内容になってしまいましたが、何か使える部分があれば幸いです。)</p>\n<p data-sourcepos=\"1075:1-1075:60\">運営の皆様、誠にありがとうございました。</p>\n<p data-sourcepos=\"1077:1-1077:78\"><em>なお、こちらは、ChatGPT 4oを使って作成・編集しました。</em></p>\n",
        "body": "# 金融データ活用推進協会(FUDA)と金融庁共催の第３回金融データ活用チャレンジ\n\n## 最初に\n\n今回、生成AIのAPIを無料で提供いただいた日本マイクロソフトさん、日立製作所さん、本当にありがとうございます。今回、両者のAPIを使用させていただきました。ただ、私のRAGをそもそも理解できていなかったのか、コンテキストサイズが大きすぎたのかは、わかりませんでしたが、**llama3.3:70b-instruct-fp16**と**Qwen 2.5:72b**は思った様な回答が返ってこず、早々に諦めてしまいました。本来であれば、いろいろと考察ができれば良かったのですが、次回にこの様な機会があれば、もっと前処理をしっかりとして、いろいろな評価ができればなと思っています。\n貴重な機会をいただき、大変ありがとうございます。\n\n## コンペ概略\n\n1. 企業の統合報告書・サステナビリティレポートのPDFファイルが存在し、その情報をコンテキストとして、質問の回答を得るものとなっています。日本マイクロソフトさんよりAzure Open AIで提供されたGPT 4o-mini version 2024-10-24なので、これを調べてみると「ナレッジカットオフは2023年10月に設定されている」となっています。一方、今回の出題元となっている統合報告書・サステナビリティレポートは、2024年度の後のもとなっている様子です\n2. 1.の情報に対して、Retrieval Augmented Generation(RAG)システムを構築し、用意された質問（query.csv）に対する回答を生成し、その回答を作成する。![RAG概略図](https://static.signate.jp/competitions/1515/ALHiAfdbNQ4GwoYwbUihSsXIigzVtpWUmTCaBTlS.png)\n[https://signate.jp/competitions/1515#abstract][SIGNATE_2]より引用\n\n3. 回答の精度は、[Comprehensive RAG Benchmark (CRAG)][CRAG]という次で示されるスコアの平均値を競うというものとなっています\n    |分類|得点|評価基準|\n    |---|---|---|\n    |Perfect|1|質問に対して正確に答え、虚偽の内容が含まれていない回答。|\n    |Acceptable|0.5|質問に対して有用な答えを提供しているが、答えの有用性を損なわない程度の軽微な誤りが含まれている回答。|\n    |Missing|0|質問に対して「わかりません」「見つけられませんでした」などの具体的な答えがない回答。|\n    |Incorrect|-1|質問に対して間違った、または関連性のない回答。|\n[https://signate.jp/competitions/1515#evaluation][SIGNATE_1]より引用\nということは、正解があっても間違えが多いとスコアは、大きく減点されるということですね。\n\n\n試しに、ChatGPT 4oを使って、お題のquery.csvの質問をしてみると、Webを検索して、次の様な結果となっています。\n![スクリーンショット 2025-02-16 6.59.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3712766/6a1e94bf-eb36-4ab2-8ab0-e1dd0843a96c.png)\n こうやってみると、結構近いしいところWebから取得できそうですが、やはり適切なコンテキストを与えないと、質問の解釈に誤りが生じたり、ハルシネーションを引き起こすのは想像に難しくなく、今回のコンペの目的がここにあることは容易に理解できました。\n\n\n[CRAG]: https://arxiv.org/abs/2406.04744\n[SIGNATE_1]: https://signate.jp/competitions/1515#evaluation\n[SIGNATE_2]: https://signate.jp/competitions/1515#abstract\n\n## 1. 前処理\n\nお題として提供されたデータは、PDFとなっていました。一部のPDFは、暗号化がされており、オープンソースのPDF解析ライブラリが機能しないなどの問題がありました。このため、まず最初にCairoを使用して、`pdftocairo`でPDFのバージョンを1.5にするということを行いました。マルチモーダルに対応した多くの生成AI APIは、ダイレクトにPDFを読み込ませることができなかったことから、各ページをPNGの画像として、用意しました。\n\n```bash\nfor pdffile in *.pdf\ndo\n    pdftopng $pdffile\ndone\n```\n\nまた、Azure Document Intelligenceを使用して、PDFの内容をmarkdownにしてみました。\n\n\n# RAGシステム構築への挑戦：PDFドキュメントを活用したQ&Aシステムの開発記録\n\n## はじめに\n\n近年、生成AIを活用した情報検索や質問応答システムが注目を集めています。その中でも、外部知識を組み込むRAG（Retrieval-Augmented Generation）技術は、特定領域の文書に基づいた高精度な回答を提供できるため、非常に有用です。\n\n今回、私たちは企業の統合報告書や有価証券報告書をコンテキストとして、指定された100問の質問に回答するRAGシステムの開発に挑戦しました。本記事では、PDFドキュメントの前処理から質問応答システムの設計、そして発生した課題とその解決策までを詳しく記録します。\n\n---\n\n## 1. PDFドキュメントの前処理\n\n今回のRAGシステムでは、19種類のPDFドキュメントをコンテキストとして利用しました。しかし、PDF形式には様々な課題が伴います。特に、次のような問題に直面しました。\n\n- **PDFの暗号化**：一部のPDFが暗号化されており、オープンソースのPDF解析ライブラリが機能しない。\n- **PDFバージョンの違い**：生成AI APIが一部のPDFフォーマットをサポートしていない。\n- **マルチモーダルAPIの制限**：PDFを直接読み込めないAPIが多い。\n\nこれらの課題を解決するため、次のアプローチを取りました。\n\n### 1.1 PDFバージョンの変更\n\n暗号化の問題に対処するため、`pdftocairo`コマンドを用いてPDFのバージョンを`1.5`に統一しました。これにより、PDF解析ライブラリの互換性が向上しました。\n\n```bash\nfor pdf in *.pdf\ndo\n     pdftocairo -png $pdf\ndone\n```\n\nこのスクリプトにより、各PDFをページごとのPNG画像に変換し、マルチモーダルAPIでも処理可能な形式にしました。\n\n---\n\n## 2. テキストデータの抽出\n\n画像化されたPDFページからテキストを抽出するため、Azure Document Intelligenceを活用しました。このサービスはOCR機能を備えており、構造化されたMarkdown形式でテキストを出力できるため、後の検索・回答処理が容易になりました。\n\n### 2.1 OCR処理フロー\n\n1. PDFをそのままBlobでアップロード。\n2. Azure Document IntelligenceでOCR処理を実施。この際、以下のPythonスクリプトを使用しました。  \n    ```python\n    #!/usr/bin/env python3\n    # import libraries\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.documentintelligence import DocumentIntelligenceClient\n    from azure.ai.documentintelligence.models import AnalyzeResult\n    from azure.ai.documentintelligence.models import AnalyzeDocumentRequest\n    \n    # set `<your-endpoint>` and `<your-key>` variables with the values from the Azure portal\n    endpoint = \"<my-endpoint>\"\n    key = \"<my-key>\"\n    \n    # PDFをBase64形式に変換する関数\n    def convert_pdf_to_base64(pdf_file_path):\n        with open(pdf_file_path, \"rb\") as pdf_file:\n            return base64.b64encode(pdf_file.read()).decode('utf-8')\n    \n    # レイアウト解析を実行する関数\n    def analyze_layout(pdf_path):\n        base64_pdf = convert_pdf_to_base64(pdf_path)\n        client = DocumentIntelligenceClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n        poller = client.begin_analyze_document(\n            \"prebuilt-layout\", AnalyzeDocumentRequest(bytes_source=base64_pdf),\n            output_content_format=\"markdown\"\n        )\n        result = poller.result()\n        with open(f'{pdf_path.replace(\".pdf\", \".md\")}', 'w') as f:\n            f.write(result.content)\n    \n    # 実行\n    if __name__ == \"__main__\":\n        pdf_files = [f'./documents/{i}_out.pdf' for i in range(1, 20)]\n        for file in pdf_files:\n            analyze_layout(file)\n    ```\n3. 出力結果をMarkdown形式で保存\nこのステップで、表やセクション構造などの文書情報が失われることなく取得できましたが、Figの情報が微妙だったり、一部複雑な表が崩れていました。表については、チャンキングを行う際に、一旦`pandas`の`pd.read_html()`を使用して、Markdownで出力しなおすという処理を噛ませました。\n\nまた、図の一部は、必要なテキスト情報が抽出されていますが、順序性などが読み取れないものであったことから、一部の画像ページは、Claude 3.5 Sonnet(無料の5USD分)を使って、置き換える試みをしました。おそらく、図については、もっと適切な処理が必要だった様に思いました。\n\n---\n\n## 3. キーワード抽出と埋め込み生成\n\n質問に適した文書部分を特定するため、BERT埋め込みを活用しました。当初、KeyBERTを使用してキーワードを抽出しようとしましたが、出力の品質が期待に満たなかったため、断念しました。その後、以下のチャンキング処理を実装しました。\n\n```python\n#!/usr/bin/env python3.12\nimport os\nimport re\nimport io\nimport glob\nimport tiktoken\nimport numpy as np\nimport pandas as pd\nfrom sentence_transformers import SentenceTransformer\n\ndocument_dir = './markdown'\nencoding = tiktoken.get_encoding(\"o200k_base\")\nbert_model = SentenceTransformer(\"paraphrase-multilingual-MiniLM-L12-v2\")\n\ndef strip_tags(md_content):\n    md_content = re.sub(r'<!--[\\s\\S]*?-->', '', md_content)\n    md_content = re.sub(r'\\n{3,}', '\\n\\n', md_content)\n    md_content = re.sub(r'#\\s+', '# ', md_content)\n    md_content = re.sub(r'^[●・]\\s*', '- ', md_content, flags=re.MULTILINE)\n    return md_content\n\ndef split_markdown_with_headers(markdown_text, max_tokens=512):\n    chunks = []\n    current_chunk = []\n    current_headers = []\n    lines = markdown_text.split(\"\\n\")\n    for line in lines:\n        match = re.match(r'^(#{1,4})\\s+(.*)', line)\n        if match:\n            level = len(match.group(1))\n            title = match.group(2)\n            if level == 1:\n                current_headers = [title]\n            else:\n                current_headers = current_headers[:level - 1] + [title]\n            if current_chunk:\n                chunks.append((\" / \".join(current_headers), \"\\n\".join(current_chunk)))\n                current_chunk = []\n        else:\n            current_chunk.append(line)\n    if current_chunk:\n        chunks.append((\" / \".join(current_headers), \"\\n\".join(current_chunk)))\n    processed_chunks = []\n    for title, content in chunks:\n        words = content.split()\n        if len(words) > max_tokens:\n            for i in range(0, len(words), max_tokens):\n                processed_chunks.append((title, \" \".join(words[i:i+max_tokens])))\n        else:\n            processed_chunks.append((title, content))\n    return processed_chunks\n\nmd_paths = glob.glob('markdown/*.md')\nchuncks_array = []\nfor path in md_paths:\n    doc_id = int(re.sub(r'markdown/(\\d{1,2})\\.md', r'\\1', path))\n    with open(path, 'r') as f:\n        md_doc = f.read()\n        chunks = split_markdown_with_headers(strip_tags(md_doc))\n        for chunk_id, (title, chunk) in enumerate(chunks, 1):\n            chuncks_array.append({\n                'doc': doc_id,\n                'chunk_id': chunk_id,\n                'title': title,\n                'text': chunk,\n                'text_size': len(chunk),\n                'estimate_tokens': len(encoding.encode(chunk))\n            })\npd.DataFrame(chuncks_array).to_feather('chunked_text.ftr')\n```\n\n## 4. ベクター情報の作成\n\n埋め込み生成には、日本マイクロソフトから提供された`text-embedding-3-large`を使用しました。次のPythonスクリプトで実装しました。\n\n```python\n#!/usr/bin/env python3.12\nimport os\nimport re\nimport io\nimport sys\nimport glob\nimport pandas as pd\nimport numpy as np\n\nfrom openai import AzureOpenAI\n\nAZURE_OPENAI_API_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_ENDPOINT = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nAPI_VERSION = os.getenv(\"API_VERSION\")\n\nDEPLOYMENT_ID_FOR_CHAT_COMPLETION = \"4omini\"\nDEPLOYMENT_ID_FOR_EMBEDDING = \"embedding\"\n\nDOCUMENT_DIR = './markdown'\nTARGET_PATH = './chunked_text.ftr'\n\ndf_text = pd.read_feather(TARGET_PATH)\n\nclient = AzureOpenAI(\n    api_key=AZURE_OPENAI_API_KEY,\n    azure_endpoint=AZURE_OPENAI_ENDPOINT,\n    api_version=API_VERSION\n)\n\nembeddings = [] \n\nfor row in df_text.iterrows():\n    doc = row[1]['doc']\n    page = row[1]['page']\n    text = row[1]['text']\n    try:\n        response = client.embeddings.create(\n            input=text,\n            model=DEPLOYMENT_ID_FOR_EMBEDDING\n        )\n        embedding_vector = response.data[0].embedding\n\n        # embeddings リストに追加\n        embeddings.append(embedding_vector)\n    except Exception as e:\n        print(doc, page)\n        print(f'エラー: {e}', file=sys.stderr)\n\ndf_text['vector'] = embeddings\n\ndf_text.to_feather('chunked_emb.ftr')\n\n\nDOCUMENT_DIR = './markdown'\nQUERY_PATH = './query.csv'\nVECTOR_PATH = 'text_vectors_20250129.ftr'\n\n\ndf_query = pd.read_csv(QUERY_PATH)\n\noutput = []\n\nfor row in df_query.iterrows():\n\n    index, question = row[1]['index'], row[1]['problem']\n\n    # Embedding API を使って質問をベクトル化\n    response = client.embeddings.create(\n        input=question,\n        model=DEPLOYMENT_ID_FOR_EMBEDDING\n    )\n    question_vector = response.data[0].embedding\n\n    output.append([\n        index, \n        question,\n        question_vector\n    ])\n\ndf_out = pd.DataFrame(output, columns=['index', 'problem', 'vector'])\ndf_out.to_feather('query.ftr')\n```\n\n\n\n最終的に、質問応答タスクにはBERTベースの言語モデルを採用し、埋め込み空間で最も関連性の高い文書をコンテキストとして提示しました。\n\nさらに、Cosine類似度を計算する前に、次のような質問文から固有名詞を抜き出すプロンプトを用意しました。(トークン数もそれほど多くなく、Gの前段として問題がないと判断しました)\n\n```python\nwith open(QUERY_PATH, 'r') as f:\n    query = f.read()\n\nquery = query.replace('index,problem','')\n\nsys_content = (\n    '文章から企業や商品名等の固有名詞を抽出を行います。\n'\n    '回答は先頭の番号ごとに記載し、固有名詞がなければ空欄にします。\n'\n    '書式は項番,固有名詞とします。'\n)\nusr_content = (\n    '次の文章から固有名詞を抽出してください。\n\n'\n    f'{query}'\n)\n\ntry:\n    response = client.chat.completions.create(\n        model=DEPLOYMENT_ID_FOR_CHAT_COMPLETION,\n        messages=[\n            {\"role\": \"system\", \"content\": sys_content},\n            {\"role\": \"user\", \"content\": usr_content}\n        ]\n    )\n    print(response)\n    answer = response.choices[0].message.content.strip()\nexcept Exception as e:\n    print(e, file=sys.stderr)\n\nwith open('output_tmp.csv', 'w') as f:\n    f.write(answer)\n```\n\n本来、DBを構築すべきですが、諸般の事情で、事前に準備したFeatherフォーマットのファイルを使って、質問とコンテキストを用意することにし、質問とチャンク化されたテキスト情報の類似度は、次の様にしました。\\\n\\\nチャンク化されたテキストは、おおよそ一つが500文字程度であったことから、ここでは、一つの質問に対して、類似度が高い9個の内容を単純に結合し、それをプロンプトにくべる内容としました。これにより、一つの質問に対する入力トークンがテキスト情報については、4000〜6000程度になっていたと思います。表や図は大きくなるため、小さくならないものもあった。\n\n```python\n#!/usr/bin/env python3\nimport os\nimport re\nimport sys\nimport glob\nimport pandas as pd\nimport numpy as np\n\n\nDOCUMENT_DIR = './markdown'\nQUERY_PATH = './query.ftr'\nVECTOR_PATH = './chunked_emb.ftr'\nSIM_DOC_INFO = 'output_tmp.csv'\n\ndef cosine_similarity(vec_a, vec_b):\n    '''\n    '''\n    a = np.array(vec_a)\n    b = np.array(vec_b)\n\n    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))\n\n\ndf_sim_doc = pd.read_csv(SIM_DOC_INFO)\ndf_query = pd.read_feather(QUERY_PATH)\nvector_rec = pd.read_feather(VECTOR_PATH)\n\noutput = []\n\ndocids = vector_rec['doc'].to_list()\npage_number_list = vector_rec['page'].to_list()\ntexts = vector_rec['text'].to_list()\nembeddings = vector_rec['vector'].to_list()\n\ndoc_pages = vector_rec.groupby('doc')['page'].max()\n\noutput = []\n\n\nfor row in df_query.iterrows():\n\n    index, question, q_vector = row[1]['index'], row[1]['problem'], row[1]['vector']\n\n    target_doc = df_sim_doc[df_sim_doc['index'] == index]['doc'].to_list()\n    print(f\"{index:02d}(doc = {target_doc[0] if len(target_doc) > 0 else None})問い合わせ: {question}\")\n\n    # 【4-3】先ほどのテキストに対して、コサイン類似度を計算\n    similarities = []\n    \n    for i, embedding_vector in enumerate(embeddings):\n        score = cosine_similarity(embedding_vector, q_vector)\n        similarities.append((docids[i], page_number_list[i], texts[i], score))\n        # df_outと比較して、固有名詞が含まれている場合は、その企業情報のみにする。\n    \n    # どの会社か特定できている場合\n    if len(target_doc) > 0:\n        similarities = [row for row in similarities if row[0] == target_doc[0]]\n    \n    # 類似度スコアが高い順にソート\n    similarities.sort(key=lambda r: r[3], reverse=True)\n\n    # 上位5件のみとして、ページ順にソーティング\n    similarities = similarities[:9]\n\n    # 固有名詞が見つからず、複数のドキュメントが混在しているものがあるため\n    max_docs = np.amax([s[0] for s in similarities])\n    similarities = [s for s in similarities if s[0] == max_docs]\n\n    pages = [sim[1] for sim in similarities]\n    pages = sorted(set(pages), key=pages.index)\n    scores = [sim[3] for sim in similarities]\n\n    similarities.sort(key=lambda r: r[1], reverse=False)\n    output.append([\n        index, \n        question,\n        similarities[0][0], # doc\n        pages, # pages\n        scores,\n        '\\n\\n'.join([sim[2] for sim in similarities]),\n    ])\n\n\ndf_sim_doc = pd.DataFrame(output, \n                          columns=['index', 'problem', 'doc', \n                                    'pages', \n                                    'scores',\n                                    'text'])\n\ndf_sim_doc.to_feather('problem_a9.ftr')\n```\n\n## 5. GPT-4o-miniでの試行結果\n\nEmbeddingとCosine Similarityの後に、次の**G**部分を作成しました。先ほどの類似度検索したFeatherを読み込み、それに類似度が上位4位以内のページの画像を合わせて、プロンプトするものとしました。画像は、１ページあたり1000程度のコンテキストと処理されていた様であり、今回チャンキングした情報に比べるとそれほど大きくなく、使い勝手が良さそうでした。\n\n````python\n#!/usr/bin/env python3\nimport re\nimport os\nimport io\nimport sys\nimport glob\nimport datetime as dt\nimport pandas as pd\nimport warnings\nimport base64\nimport time\n\nimport tiktoken\n\nfrom openai import AzureOpenAI, OpenAI\nfrom PIL import Image\n\nwarnings.filterwarnings('ignore')\n\nDEPLOYMENT_ID_FOR_CHAT_COMPLETION = \"4omini\"\nAZURE_OPENAI_API_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\nAZURE_OPENAI_ENDPOINT = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\nAPI_VERSION = os.getenv(\"API_VERSION\")\nPNG_DIR = './png'\n\n\nSYS_CONTENT = '''\n# Role\nあなたは統合報告書・ESGレポートを分析する優秀なアナリストです。\nユーザーはこれら報告書等を活用にするにあたり、あなたに質問をするので、それに回答することでサポートします。\n\n# Your Task\n\n## **Input**\n\n---コンテキスト---: <Markdown形式で記述された統合報告書の一部分>\n---質問---: <コンテキストに対する質問>\n\n## **Output**\nmarkdown形式で回答します。\n\n```markdown\n# 回答\n<回答内容>\n\n## 根拠\n<回答の理由>\n\n## **Process**\n\n1. 質問の内容から想定される回答について、回答内容に対する正規表現を用意します。\n2. 質問内容の解釈とその思考過程がわかる様に段階的に回答の根拠を<回答の理由>を記述します。可能な限り記載してください。また計算が伴う場合は、計算式も詳細に記してください。\n3. <回答の理由>と<回答内容>が整合しているか、矛盾がなく無関係となっていないか確認します。\n4. <回答内容>が1.の正規表現に合致するか確認します。合致していなければ、1.から3.を繰り返します。\n\n## Policy\n\n* <回答内容>は54文字以内とします。\n* 統合報告書・ESGレポートの画像が提供される場合があります。その場合は、コンテキストは画像情報の補助的なものとなります。\n* 計算は精度が高いものを使用し、四捨五入等の丸め処理は最後に行ってください。\n* <回答内容>は可能な限り短くし、「YYYY年度の〜は、〇〇〇〇名です」となる場合は「〇〇〇〇名」の様にしてください。\n* 計算が伴う回答を行う際は、**できる限り精度の高い手法**を用います。\n* 質問に単位が含まれている場合、その単位の通りに回答します。例: 822,391円に対して何万円であれば82万円、3,000千円に対して、何円であれば3,000,000円\n* 質問に「小数第一位を四捨五入して答えてください。」という場合があります。計算した結果の数値が81.912%の場合、回答の数値は「82%」となります。\n* 質問が「カタカナで答えてください」や「ひらがな・カタカナ・漢字を全て含む」という質問などに注意してください。\n* コンテキストから見つからない場合、回答: わからない(根拠: <回答の理由>)とします。\n'''\n\namendment = '''\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n8,ダイドーグループが2012年に立ち上げたチャネルの国内飲料事業の中での売上は何％か,3％\n9,ウエルシアホールディングスが掲げる2030のありたい姿はなんですか？,地域No.1の健康ステーション\n10,日本化薬グループが「TCFD提言」に賛同したのは何年何月ですか？,2022年3月\n11,花王の製品ライフサイクル全体のCO2 排出量において2019年度と2020年度ではどちらの数値が大きいか,2019年度\n12,電通グループの電力使用に伴うCO2排出量ゼロを達成した撮影スタジオの名称を答えよ。,FACTORY ANZEN STUDIO\n13,ダイドーグループの国内飲料事業では保有している自販機台数は約何台ですか？,約27万台\n14,2024年2月29日現在、ウエルシアホールディングスの子会社は全部で何社ですか？,14社\n'''\n\n\ndef conv_img_to_base64(image_path):\n    \"\"\"\n    PDFファイルを読み込み、Base64形式に変換する。\n    \n    Args:\n        pdf_file_path (str): PDFファイルのパス。\n    \n    Returns:\n      Base64形式の文字列。\n    \"\"\"\n    \n    try:\n        # PDFファイルを読み込む\n        with open(image_path, \"rb\") as im_file:\n            image = im_file.read()\n            \n            # Base64形式に変換\n            return base64.b64encode(image).decode('utf-8')\n    except Exception as e:\n        print(f\"エラーが発生しました: {e}\")\n        return None\n\n\n\nclient = AzureOpenAI(\n    api_key=AZURE_OPENAI_API_KEY,\n    azure_endpoint=AZURE_OPENAI_ENDPOINT,\n    api_version=API_VERSION\n)\n\n\n\n# 質問をOpenAI APIに送信し回答を取得\ndef get_answer(question, context, doc_id:int, pages:list[int]):\n    '''\n    '''\n    usr_content = f'''次のコンテキストを参照して回答してください:\n{context}\n\n---質問---\n{question}\n'''\n\n    message = [\n        {\"role\": \"system\", \"content\": SYS_CONTENT},\n        {\"role\": \"user\",  \"content\": [\n            {\"type\": \"text\", \"text\": usr_content},\n        ]}\n    ]\n\n    for page in pages:\n        png_path = f'./png/{doc_id}-' + (f'{page:003d}.png' if doc_id in (3, 6, 8, 10, 16) else f'{page:02d}.png')\n        message[1]['content'].append({\n            \"type\": \"image_url\",\n            \"image_url\": {\"url\": 'data:image/jpeg;base64,' + conv_img_to_base64(png_path)}\n        })\n\n\n    try:\n        response = client.chat.completions.create(\n            model=DEPLOYMENT_ID_FOR_CHAT_COMPLETION,\n            # max_tokens=54,   \n            temperature=0.0,\n            messages=message\n        )\n\n        answer = response.choices[0].message.content.strip()\n        total_tokens = response.usage.total_tokens,\n        prompt_tokens = response.usage.prompt_tokens\n        return answer, total_tokens, prompt_tokens\n    except Exception as e:\n        print(e, file=sys.stderr)\n        return \"EXCEPTION\", None, None\n        # return f\"エラー: {e}\"\n\n\n\n# 回答を保存するリスト\nresults = []\n\ndf_query = pd.read_feather('problem_a9.ftr')\n\nprint(df_query.head(5))\n# df_query = df_query.head(5)\nencoding = tiktoken.get_encoding(\"o200k_base\")\n\n\n# 各質問に対して回答を取得し保存\nfor row in df_query.iterrows():\n    index = row[1]['index']\n    doc_id = row[1]['doc']\n    # page = row[1]['page']\n    pages = list(row[1]['pages'])\n    question = row[1]['problem']\n    context = row[1]['text']\n\n\n    target_pages = sorted(set(pages), key=pages.index)[:5]\n    target_pages = sorted(target_pages)\n\n\n    print(f'{index:02d}: {question} (est_context_tokens = {len(encoding.encode(context)):,})')\n    print(pages)\n\n    answer, total_tokens, prompt_tokens = get_answer(question, context, \n                                                     doc_id=doc_id,\n                                                     pages=target_pages\n                                                     )\n    if answer == 'EXCEPTION':\n        answer = 'わかりません。。。'\n\n    print(f'{answer}(total_tokens = {total_tokens[0]})')\n\n    time.sleep(5)\n    \n    results.append([index, question, doc_id, pages, context, \n                    answer, total_tokens[0], prompt_tokens])\n\n    if (index + 1) % 10 == 0 and index != 99:\n        df_ans = pd.DataFrame(results, \n                            columns=['index', 'question', 'doc_id', \n                                    'pages', 'context', 'answer_detail',\n                                    'total_tokens', 'prompt_tokens'])\n\n        df_ans.drop(columns=['context'], inplace=True)\n        df_ans['answer'] = df_ans['answer_detail'].str.extract(r'# 回答\\n(.*)\\n')\n\n        df_ans.to_feather('predictions_checkpoint.ftr')\n\ndf_ans = pd.DataFrame(results, \n                    columns=['index', 'question', 'doc_id', \n                            'pages', 'context', 'answer_detail',\n                            'total_tokens', 'prompt_tokens'])\n\ndf_ans['answer'] = df_ans['answer_detail'].str.extract(r'# 回答\\n(.*)\\n')\n\nnow = dt.datetime.now().strftime('%Y%m%dT%H%M%S')\n\nprint(f'### {now}')\n\noutput_path = f\"pred_4omini_{now}.csv\"\nprint(f\"結果がCSVに保存されました: {output_path}\")\ndf_ans.to_feather(f'pred_4omini_{now}.ftr')\ndf_ans[['index', 'answer']].to_csv(output_path, index=False, header=None, encoding=\"utf-8-sig\")\n````\n\n\n当初は、このプロンプトを日本マイクロソフトさん提供の**GPT-4o-mini**で試行しましたが、回答が冗長で、暫定スコアが`0.42`(最終スコアは`0.35`で、この時は最も近似の4ページまでを送信)と、期待した結果が得られませんでした。\n\n### 例:\n\n```plain\n1,株式会社キッツの取締役の報酬のうち株式報酬の割合は何％？\n```\n\n```markdown\n# 回答\n取締役の報酬における株式報酬の割合は20%です。\n\n## 根拠\n取締役の報酬等構成比の表において、株式報酬が20%と記載されているため。\n```\n\n回答が詳細すぎることが、AcceptableやIncorrectになってしまい、適切にコンテキストを捉えているものの、スコアに影響した可能性が大いにある様に見えました。\n\n## 7. Gemini 2.0 flash-thinking-exp-01-21 の試行結果\n\nGPT-4o-miniでうまくいかなかったため、**gemini-2.0-flash**と**gemini-2.0-flash-thinking-exp-01-21**を代わりに利用したところ、冗長な回答はなくなり、スコアはやや上昇しました。\ngemini-2.0-flashは、回答と根拠で矛盾が見られるものが増加しました。おいおい、回答の根拠を考えてる間に何が起きたんだい？と言わんばかりに...\nそのため、**gemini-2.0-flash-thinking-exp-01-21**に切り替えると、矛盾は少なくなりましたが、それでも少し見られました。\n\n\nまた、画像を前後追加し、一つの４ページ分から12ページ分としました。入力コンテキストを長くしても特段問題がなく、他のモデルは長くすると、やはり回答が矛盾したり、必要な情報を見つけることができていなかった様子です。このことからすると、本来のRAGの趣旨からはズレていたのかもしれません。\n\n````python\nimport re\nimport os\nimport io\nimport sys\nimport glob\nimport datetime as dt\nimport pandas as pd\nimport warnings\nimport base64\nimport time\nimport tiktoken\n\nfrom PIL import Image\nfrom google import genai\nfrom google.genai import types\n\nwarnings.filterwarnings('ignore')\n\n\n\nPNG_DIR = './png'\n\n\nSYS_CONTENT = '''\n# Role\nあなたは統合報告書・ESGレポートを分析する優秀なアナリストです。\nユーザーはこれら報告書等を活用にするにあたり、あなたに質問をするので、それに回答することでサポートします。\n\n# Your Task\n\n## **Input**\n\n---コンテキスト---: <Markdown形式で記述された統合報告書の一部分>\n---質問---: <コンテキストに対する質問>\n\n## **Output**\nmarkdown形式で回答します。\n\n```markdown\n# 回答\n<回答内容>\n\n## 根拠\n<回答の理由>\n\n## **Process**\n\n1. 質問の内容から想定される回答について、回答内容に対する正規表現を用意します。\n2. 質問内容の解釈とその思考過程がわかる様に段階的に回答の根拠を<回答の理由>を記述します。可能な限り記載してください。また計算が伴う場合は、計算式も詳細に記してください。\n3. <回答の理由>と<回答内容>が整合しているか、矛盾がなく無関係となっていないか確認します。\n4. <回答内容>が1.の正規表現に合致するか確認します。合致していなければ、1.から3.を繰り返します。\n\n## Policy\n\n* <回答内容>は54文字以内とします。\n* 統合報告書・ESGレポートの画像が提供される場合があります。その場合は、コンテキストは画像情報の補助的なものとなります。\n* 計算は精度が高いものを使用し、四捨五入等の丸め処理は最後に行ってください。\n* <回答内容>は可能な限り短くし、「YYYY年度の〜は、〇〇〇〇名です」となる場合は「〇〇〇〇名」の様にしてください。\n* 計算が伴う回答を行う際は、**できる限り精度の高い手法**を用います。\n* 質問に単位が含まれている場合、その単位の通りに回答します。例: 822,391円に対して何万円であれば82万円、3,000千円に対して、何円であれば3,000,000円\n* 質問に「小数第一位を四捨五入して答えてください。」という場合があります。計算した結果の数値が81.912%の場合、回答の数値は「82%」となります。\n* 質問が「カタカナで答えてください」や「ひらがな・カタカナ・漢字を全て含む」という質問などに注意してください。\n* コンテキストから見つからない場合、回答: わからない(根拠: <回答の理由>)とします。\n\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n'''\n\namendment = '''\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n8,ダイドーグループが2012年に立ち上げたチャネルの国内飲料事業の中での売上は何％か,3％\n9,ウエルシアホールディングスが掲げる2030のありたい姿はなんですか？,地域No.1の健康ステーション\n10,日本化薬グループが「TCFD提言」に賛同したのは何年何月ですか？,2022年3月\n11,花王の製品ライフサイクル全体のCO2 排出量において2019年度と2020年度ではどちらの数値が大きいか,2019年度\n12,電通グループの電力使用に伴うCO2排出量ゼロを達成した撮影スタジオの名称を答えよ。,FACTORY ANZEN STUDIO\n13,ダイドーグループの国内飲料事業では保有している自販機台数は約何台ですか？,約27万台\n14,2024年2月29日現在、ウエルシアホールディングスの子会社は全部で何社ですか？,14社\n'''\n\n#         usr_content = f'''---コンテキスト---\n# {context}\n\n# ---質問---\n# {question}\n# '''\n\ndef conv_img_to_base64(image_path):\n    \"\"\"\n    PDFファイルを読み込み、Base64形式に変換する。\n    \n    Args:\n        pdf_file_path (str): PDFファイルのパス。\n    \n    Returns:\n      Base64形式の文字列。\n    \"\"\"\n    \n    try:\n        # PDFファイルを読み込む\n        with open(image_path, \"rb\") as im_file:\n            image = im_file.read()\n            \n            # Base64形式に変換\n            return base64.b64encode(image).decode('utf-8')\n    except Exception as e:\n        print(f\"エラーが発生しました: {e}\")\n        return None\n\n\n\ndef merge_images_vertically(doc_id=1, page=2):\n    # フォルダ内のPNGファイルを取得し、ソート\n\n    png_path = f'{PNG_DIR}/{doc_id}-' + (f'{page:003d}.png' if doc_id in (3, 6, 8, 10, 16) else f'{page:02d}.png')\n    if page == 1:\n        png_path_prev = f'{PNG_DIR}/{doc_id}-' + (f'{page+2:003d}.png' if doc_id in (3, 6, 8, 10, 16) else f'{page+2:02d}.png')    \n    else:\n        png_path_prev = f'{PNG_DIR}/{doc_id}-' + (f'{page-1:003d}.png' if doc_id in (3, 6, 8, 10, 16) else f'{page-1:02d}.png')\n\n    png_path_next = f'{PNG_DIR}/{doc_id}-' + (f'{page+1:003d}.png' if doc_id in (3, 6, 8, 10, 16) else f'{page+1:02d}.png')\n    if not os.path.isfile(png_path_next):\n        png_path_next = f'{PNG_DIR}/{doc_id}-' + (f'{page-2:003d}.png' if doc_id in (3, 6, 8, 10, 16) else f'{page-2:02d}.png')\n\n    paths = [png_path_prev, png_path, png_path_next]\n    \n    # 画像を読み込む\n    images = [Image.open(file) for file in sorted(paths)]\n\n    # 結合後の画像サイズを計算（幅は最大値、高さは合計）\n    max_width = max(img.width for img in images)\n    total_height = sum(img.height for img in images)\n\n    # 新しいキャンバスを作成\n    merged_image = Image.new(\"RGB\", (max_width, total_height), \"white\")\n\n    # 各画像を結合\n    y_offset = 0\n    for img in images:\n        merged_image.paste(img, (0, y_offset))\n        y_offset += img.height  # 高さを加算\n\n    return merged_image\n\napi_key = os.getenv('GEMINI_API_KEY')\nclient = genai.Client(api_key=api_key)\n\n\ndef get_answer(question, context, doc_id:int, pages:list[int], model_name=\"gemini-2.0-flash-thinking-exp-01-21\"):\n    '''\n    '''\n    usr_content = f'''次のコンテキストを参照して回答してください:\n{context}\n\n---質問---\n{question}\n'''\n\n    message = [SYS_CONTENT + '\\n' + usr_content]\n    images = [merge_images_vertically(doc_id=doc_id, page=page) for page in pages]\n\n\n    message.extend(images)\n    \n    try:\n        response = client.models.generate_content(\n            # model=\"gemini-2.0-flash\",\n            model=model_name,\n            # temperature=0.0,\n            contents=message,\n        )\n\n        return response.text\n    except Exception as e:\n        print(e, file=sys.stderr)\n        return \"EXCEPTION\"\n\n\n\n# 回答を保存するリスト\nresults = []\n\ndf_query = pd.read_feather('problem_a9.ftr')\n\nprint(df_query.head(5))\n# df_query = df_query.head(5)\nencoding = tiktoken.get_encoding(\"o200k_base\")\n\n\ntarget_indexes = []\n\nif len(target_indexes) > 0:\n    df_query = df_query[df_query['index'].isin(target_indexes)] #.sort_values(['doc', 'index'], ascending=True)\n\n# 各質問に対して回答を取得し保存\nfor row in df_query.iterrows():\n    index = row[1]['index']\n    doc_id = row[1]['doc']\n    pages = list(row[1]['pages'])\n    question = row[1]['problem']\n    context = row[1]['text']\n\n\n    target_pages = sorted(set(pages), key=pages.index)[:5]\n    target_pages = sorted(target_pages)\n\n    print(f'{index:02d}: {question} (est_context_tokens = {len(encoding.encode(context)):,})')\n    print(pages)\n\n    answer = get_answer(question, context, \n                        doc_id=doc_id,\n                        pages=target_pages)\n    if answer == 'EXCEPTION':\n        answer = 'わかりません。。。'\n        answer = get_answer(question, context, \n                            doc_id=doc_id,\n                            pages=target_pages,\n                            model_name=\"gemini-2.0-flash\")\n        if answer == 'EXCEPTION':\n            answer = 'わかりません。。。'\n\n    print(f'{answer}')\n\n    time.sleep(14)\n    \n    results.append([index, question, doc_id, pages, context, \n                    answer, \n                    ])\n\ndf_ans = pd.DataFrame(results, \n                      columns=['index', 'question', 'doc_id', \n                               'pages', 'context', 'answer_detail',\n                            #    'total_tokens', 'prompt_tokens'\n                               ])\n\nnow = dt.datetime.now().strftime('%Y%m%dT%H%M%S')\n\noutput_path = f\"predictions_{now}.csv\"\nprint(f\"結果がCSVに保存されました: {output_path}\")\n\nif len(target_indexes) == 0:\n    df_ans.to_feather(f'predictions_detail_{now}.ftr')\n\ndf_ans['answer'] = df_ans['answer_detail'].str.extract(r'# 回答\\n(.*)\\n')\nprint(f'### {now}')\n\nif len(target_indexes) == 0:\n    df_ans[['index', 'answer']].to_csv(output_path, index=False, header=None, encoding=\"utf-8-sig\")\n\n\n````\n\n## 8. 回答整合性の確認と修正\n\nそこで、次の様に、一旦回答した内容結果を改めて確認し、内容がおかしければ修正するという処理を追加しました。\n\n````python\nSYS_CONTENT = '''\n# Role\nあなたは統合報告書・ESGレポートを分析する優秀なアナリストです。\nユーザーはこれら報告書等を活用にするにあたり、あなたに質問をするので、それに回答することでサポートします。\n\n# Your Task\n統合報告書の質問に対して、回答とその根拠が記載されたものがありますが、その内容が整合していないものがあります。\nこのため、整合していないものについて修正を行って、最終的な回答とすることをサポートします。\n\n## **Input**\n\n---前回の回答---: <以前の回答と根拠>\n\n---質問---: <質問>\n\n## **Output**\n修正した回答と根拠をmarkdown形式で回答します。\n\n```markdown\n# 回答\n<回答内容>\n\n## 根拠\n<回答の理由>\n\n## **Process**\n\n1. 前回の回答について、<回答内容>と<回答の理由>が整合しているか確認します。まず、<回答の理由>を分析し、<回答内容>と整合していない場合は、<回答内容>を更新します。\n2. 1.で<回答内容>と<回答の理由>が整合していれば、<回答内容>と<回答の理由>はそのままとします。\n3. <回答内容>と<質問>の単位や求める書式に合致するか確認し、異なっている場合は、単位や数量を変更します。\n\n## Policy\n\n* <回答内容>は54文字以内とします。\n* <回答内容>は可能な限り短くし、「YYYY年度の〜は、〇〇〇〇名です」となる場合は「〇〇〇〇名」の様にしてください。さらに質問と比較して、冗長と思われる表現を除いてください。\n* コンテキストは<回答の理由>であるため、<回答の理由>と<回答内容>のみで整合性を確認し、外部の情報を用いません。\n* 計算が伴う回答を行う際は、**できる限り精度の高い手法**を用い、四捨五入等の丸め処理は最後に行ってください。\n* 質問に単位が含まれている場合、その単位の通りに回答します。\n* 質問が「カタカナで答えてください」や「ひらがな・カタカナ・漢字を全て含む」という質問などに注意してください。\n* 必ず、回答: わからない(根拠: <回答の理由>)とします。\n\n### Example\n\n質問と回答の例を示す。\nindex,質問,回答\n1,大成温調が積極的に資源配分を行うとしている高付加価値セグメントを全てあげてください。,改修セグメント、医療用・産業用セグメント、官公庁セグメント\n2,花王の生産拠点数は何拠点ですか？,36拠点\n3,電通グループPurposeは何ですか？,an invitation to the never before.\n4,2023年度の大成温調の連結純資産配当率（DOE）は何%でしたか？,3.0％\n5,ダイドーグループの従業員数において、2012年から2023年までの12年間で、医薬品関連が食品を下回った年を全てあげてください。,2013年、2015年、2016年、2017年\n6,東洋紡の取締役の在籍期間において、0~3年と4~9年ではどちらの方が取締役の人数が多いか,0~3年\n7,東洋紡グループのコア技術を4つ答えてください。,高分子技術、バイオ・メディカル技術、環境技術、分析・シミュレーション技術\n'''\n\napi_key = os.getenv('GEMINI_API_KEY')\nclient = genai.Client(api_key=api_key)\n\n\n# 質問をOpenAI APIに送信し回答を取得\ndef get_answer(question, prev_ans):\n    '''\n    '''\n    usr_content = f'''「前回の回答」の<回答>と<根拠>が整合しているか確認し、回答を修正してください。\nまた、「質問」が求める数量や単位などに合致しているか確認してください。\n---前回の回答---\n{prev_ans}\n\n---質問---\n{question}\n'''\n\n    message = [SYS_CONTENT + '\n' + usr_content]\n    \n    try:\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\",\n            contents=message,\n        )\n\n        return response.text\n    except Exception as e:\n        print(e, file=sys.stderr)\n        return \"EXCEPTION\", None, None\n````\n\nこの様に二段階としたところ、暫定スコアが0.73(最終スコアが0.71)まで上がりました。なお、回答を見直す処理は、**gemini-2.0-flash-thinking-exp-01-21**より**gemini-2.0-flash**の方が良かった様でした。**gemini-2.0-flash-thinking-exp-01-21**は余計なことをする様な印象がありました。\n\n## おわりに\n\n今回、初めてRAGに関するコンペに参加し、試行錯誤することができました。生成AIは、ChatGPT 4oを利用しているのですが、APIを使ったことはなく、大変学びになりました。また、Azureを使ってこなかったのですが、さまざまなサービス・機能があるので、いろいろと活用してみたいなと感じました。(コードをベタベタと貼った内容になってしまいましたが、何か使える部分があれば幸いです。)\n\n運営の皆様、誠にありがとうございました。\n\n*なお、こちらは、ChatGPT 4oを使って作成・編集しました。*\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-02-17T06:23:31+09:00",
        "group": null,
        "id": "e83cfc1f137a95448902",
        "likes_count": 2,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 4,
        "tags": [
          {
            "name": "コンペティション",
            "versions": []
          },
          {
            "name": "rag",
            "versions": []
          }
        ],
        "title": "第3回金融データ活用チャレンジに参加 コードをまとめてみる",
        "updated_at": "2025-02-20T04:49:36+09:00",
        "url": "https://qiita.com/kMUTOU/items/e83cfc1f137a95448902",
        "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 1,
          "followers_count": 3,
          "github_login_name": "kMUTOU",
          "id": "kMUTOU",
          "items_count": 4,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 3712766,
          "profile_image_url": "https://avatars.githubusercontent.com/u/27621436?v=4",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7445828914642334,
        "quality_score": 19,
        "python_code_score": 6,
        "python_code_blocks": 8
      },
      {
        "rendered_body": "<hr data-sourcepos=\"1:1-2:0\">\n<h1 data-sourcepos=\"3:1-3:104\">\n<span id=\"初心者向けgoogle-colab-or-notebooklm-でpdfの表をexcelに変換する完全ガイド\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91google-colab-or-notebooklm-%E3%81%A7pdf%E3%81%AE%E8%A1%A8%E3%82%92excel%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E5%AE%8C%E5%85%A8%E3%82%AC%E3%82%A4%E3%83%89\"><i class=\"fa fa-link\"></i></a>【初心者向け】\"Google Colab\" or \"NotebookLM\" でPDFの表をExcelに変換する完全ガイド</h1>\n<p data-sourcepos=\"5:1-5:544\">「PDFに含まれる表をExcelにまとめたい！」そんなとき、手動でコピペしていると時間もかかるし、ミスも増える…。しかし、<strong>Google Colab</strong>と<strong>NotebookLM</strong>を上手に使えば、PDFから表を抽出してExcelに書き出す作業がぐっと楽になります。プログラミング初心者でもわかるように、ステップバイステップでやり方を紹介します。さらに、トラブルシューティングや応用例も含めて、充実した内容をお届けします！</p>\n<hr data-sourcepos=\"7:1-8:0\">\n<h2 data-sourcepos=\"9:1-9:9\">\n<span id=\"目次\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%AC%A1\"><i class=\"fa fa-link\"></i></a>目次</h2>\n<ol data-sourcepos=\"11:1-33:0\">\n<li data-sourcepos=\"11:1-11:57\"><strong>はじめに：なぜGoogle ColabとNotebookLM？</strong></li>\n<li data-sourcepos=\"12:1-12:95\"><strong>事前準備：Google ColabのセットアップとPDFファイルのアップロード</strong></li>\n<li data-sourcepos=\"13:1-17:50\">\n<strong>Google ColabでPDFの表をExcelに変換する方法</strong>\n<ul data-sourcepos=\"14:5-17:50\">\n<li data-sourcepos=\"14:5-14:57\">3.1 必要なライブラリのインストール</li>\n<li data-sourcepos=\"15:5-15:54\">3.2 PDFから表を抽出する（tabula-py）</li>\n<li data-sourcepos=\"16:5-16:44\">3.3 Excelファイルに書き出す</li>\n<li data-sourcepos=\"17:5-17:50\">3.4 Excelファイルをダウンロード</li>\n</ul>\n</li>\n<li data-sourcepos=\"18:1-21:54\">\n<strong>NotebookLMでPDFの表を抽出し、Excel化する方法</strong>\n<ul data-sourcepos=\"19:5-21:54\">\n<li data-sourcepos=\"19:5-19:49\">4.1 NotebookLMへのPDFアップロード</li>\n<li data-sourcepos=\"20:5-20:57\">4.2 表形式のデータをリクエストする</li>\n<li data-sourcepos=\"21:5-21:54\">4.3 NotebookLMの出力結果をExcelに転記</li>\n</ul>\n</li>\n<li data-sourcepos=\"22:1-25:51\">\n<strong>トラブルシューティング：よくある問題と対処法</strong>\n<ul data-sourcepos=\"23:5-25:51\">\n<li data-sourcepos=\"23:5-23:54\">5.1 スキャンPDF・画像ベースの問題</li>\n<li data-sourcepos=\"24:5-24:57\">5.2 複雑な表のレイアウトによる問題</li>\n<li data-sourcepos=\"25:5-25:51\">5.3 エラーメッセージが出る場合</li>\n</ul>\n</li>\n<li data-sourcepos=\"26:1-26:54\"><strong>tabula-py以外の方法：camelot-pyの活用</strong></li>\n<li data-sourcepos=\"27:1-30:45\">\n<strong>応用例：さらに便利に使うためのヒント</strong>\n<ul data-sourcepos=\"28:5-30:45\">\n<li data-sourcepos=\"28:5-28:36\">7.1 複数PDFを一括処理</li>\n<li data-sourcepos=\"29:5-29:45\">7.2 毎月の定期レポート作成</li>\n<li data-sourcepos=\"30:5-30:45\">7.3 データ分析やグラフ作成</li>\n</ul>\n</li>\n<li data-sourcepos=\"31:1-31:17\"><strong>まとめ</strong></li>\n<li data-sourcepos=\"32:1-33:0\"><strong>よくある質問（FAQ）</strong></li>\n</ol>\n<hr data-sourcepos=\"34:1-35:0\">\n<h2 data-sourcepos=\"36:1-36:55\">\n<span id=\"1-はじめになぜgoogle-colabとnotebooklm\" class=\"fragment\"></span><a href=\"#1-%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB%E3%81%AA%E3%81%9Cgoogle-colab%E3%81%A8notebooklm\"><i class=\"fa fa-link\"></i></a>1. はじめに：なぜGoogle ColabとNotebookLM？</h2>\n<p data-sourcepos=\"38:1-38:327\"><strong>Google Colab</strong>は、ブラウザ上でPythonを実行できる無料のサービスです。わざわざ自分のPCにPythonをインストールしなくても、すぐにPythonコードを試すことができます。また、データ分析や機械学習を学ぶ際にも広く使われている人気ツールです。</p>\n<p data-sourcepos=\"40:1-40:309\">一方、<strong>NotebookLM</strong>はGoogleが提供するAIツールで、PDFやテキストドキュメントなどの内容をAIが解析してくれます。文章内の表やデータを見つけ出して構造化したり、必要に応じて要約や分類なども行ってくれる便利なサービスです。</p>\n<p data-sourcepos=\"42:1-42:37\">この2つを組み合わせると、</p>\n<ul data-sourcepos=\"44:1-46:0\">\n<li data-sourcepos=\"44:1-44:129\">Google Colab上でPDFをPythonのライブラリ（例：tabula-py, camelot-py）を用いて表を抽出し、Excelに変換</li>\n<li data-sourcepos=\"45:1-46:0\">NotebookLM上でAI解析を活用して、PDFの表形式データを素早くテキストやExcelにまとめる</li>\n</ul>\n<p data-sourcepos=\"47:1-47:133\">といったことが可能になります。<strong>初心者でも扱いやすい</strong>環境なので、ぜひ活用してみましょう。</p>\n<hr data-sourcepos=\"49:1-50:0\">\n<h2 data-sourcepos=\"51:1-51:93\">\n<span id=\"2-事前準備google-colabのセットアップとpdfファイルのアップロード\" class=\"fragment\"></span><a href=\"#2-%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99google-colab%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%A8pdf%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>2. 事前準備：Google ColabのセットアップとPDFファイルのアップロード</h2>\n<p data-sourcepos=\"53:1-53:42\">まずはGoogle Colabを準備します。</p>\n<ol data-sourcepos=\"55:1-68:0\">\n<li data-sourcepos=\"55:1-57:0\">\n<p data-sourcepos=\"55:5-56:152\"><strong>Googleアカウントの用意</strong><br>\nすでにGmailやGoogle Driveをお使いの場合は、そのアカウントでOKです。持っていない場合は無料で作成できます。</p>\n</li>\n<li data-sourcepos=\"58:1-60:0\">\n<p data-sourcepos=\"58:5-59:337\"><strong>Google Colabを開く</strong><br>\nブラウザで<a href=\"https://colab.research.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">Google Colab</a>にアクセスし、右下の「新しいノートブック」をクリックして、新しいノートブックを作成します。するとJupyter Notebookのような画面が現れ、セル（コードを入力する領域）が使えるようになります。</p>\n</li>\n<li data-sourcepos=\"61:1-68:0\">\n<p data-sourcepos=\"61:5-62:79\"><strong>PDFファイルをアップロード</strong><br>\n変換したいPDFファイルを手元に用意しておきましょう。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"63:5-66:7\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"n\">google.colab</span> <span class=\"kn\">import</span> <span class=\"n\">files</span>\n<span class=\"n\">uploaded</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"p\">.</span><span class=\"nf\">upload</span><span class=\"p\">()</span>  <span class=\"c1\"># ここでPDFを選択\n</span></code></pre></div></div>\n<p data-sourcepos=\"67:5-67:324\">上記コードをColabのセルに貼り付けて実行すると、ファイル選択画面が表示されるので、変換したいPDFを選択します。アップロードに成功すると<code>sample.pdf</code>のようにファイル名が表示されるので、あとで使うためにメモしておいてください。</p>\n</li>\n</ol>\n<hr data-sourcepos=\"69:1-70:0\">\n<h2 data-sourcepos=\"71:1-71:59\">\n<span id=\"3-google-colabでpdfの表をexcelに変換する方法\" class=\"fragment\"></span><a href=\"#3-google-colab%E3%81%A7pdf%E3%81%AE%E8%A1%A8%E3%82%92excel%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>3. Google ColabでPDFの表をExcelに変換する方法</h2>\n<h3 data-sourcepos=\"73:1-73:53\">\n<span id=\"31-必要なライブラリのインストール\" class=\"fragment\"></span><a href=\"#31-%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>3.1 必要なライブラリのインストール</h3>\n<p data-sourcepos=\"75:1-75:147\">PDFから表を抽出するには、<strong>tabula-py</strong>というライブラリが便利です。Colabでは簡単にインストールが可能です。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"77:1-79:3\"><div class=\"highlight\"><pre><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">tabula</span><span class=\"o\">-</span><span class=\"n\">py</span>\n</code></pre></div></div>\n<p data-sourcepos=\"81:1-81:240\"><code>!</code>はColabでシェルコマンドを実行するための記号で、普通のPythonコードとは区別されます。インストールが完了すると「Successfully installed...」のようなメッセージが表示されます。</p>\n<h3 data-sourcepos=\"83:1-83:50\">\n<span id=\"32-pdfから表を抽出するtabula-py\" class=\"fragment\"></span><a href=\"#32-pdf%E3%81%8B%E3%82%89%E8%A1%A8%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%99%E3%82%8Btabula-py\"><i class=\"fa fa-link\"></i></a>3.2 PDFから表を抽出する（tabula-py）</h3>\n<p data-sourcepos=\"85:1-85:174\">インストールが終わったら、以下のコードを実行してPDFから表を読み取ります。先ほどメモしたPDFファイル名を使ってください。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"87:1-91:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">tabula</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">tabula</span><span class=\"p\">.</span><span class=\"nf\">read_pdf</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sample.pdf</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">all</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># 'sample.pdf'をアップロードしたファイル名に変更\n</span></code></pre></div></div>\n<ul data-sourcepos=\"93:1-95:0\">\n<li data-sourcepos=\"93:1-93:157\">\n<code>pages='all'</code> はPDF全ページから表を抽出する指定です。必要に応じて <code>pages='1'</code> や <code>pages='1-3'</code> に変えてみてください。</li>\n<li data-sourcepos=\"94:1-95:0\">\n<code>df</code> は抽出した表を格納する変数です。PDFに複数の表がある場合はリスト形式で複数のDataFrameが返ってきます。</li>\n</ul>\n<h4 data-sourcepos=\"96:1-96:47\">\n<span id=\"コツ正しく読み込めないとき\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%84%E6%AD%A3%E3%81%97%E3%81%8F%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>コツ：正しく読み込めないとき</h4>\n<p data-sourcepos=\"98:1-98:288\">もし正しく表を抽出できていないと感じる場合は、tabulaの<code>lattice=True</code>オプションや<code>stream=True</code>オプション、あるいは<code>area</code>パラメータで表の範囲を指定する方法もあります。複雑なレイアウトのPDFの場合に役立ちます。</p>\n<h3 data-sourcepos=\"100:1-100:40\">\n<span id=\"33-excelファイルに書き出す\" class=\"fragment\"></span><a href=\"#33-excel%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%99\"><i class=\"fa fa-link\"></i></a>3.3 Excelファイルに書き出す</h3>\n<p data-sourcepos=\"102:1-102:104\">抽出したデータフレーム（DataFrame）をExcel形式に出力する方法を紹介します。</p>\n<ul data-sourcepos=\"104:1-123:0\">\n<li data-sourcepos=\"104:1-111:0\">\n<p data-sourcepos=\"104:5-104:43\"><strong>単一の表をExcelに保存する</strong></p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"106:5-108:7\"><div class=\"highlight\"><pre><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">to_excel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">output.xlsx</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"110:5-110:178\">もし1つのテーブルしかない場合は、<code>df</code>がそのままDataFrameの場合もあります。その場合は<code>df.to_excel('output.xlsx', index=False)</code>でOKです。</p>\n</li>\n<li data-sourcepos=\"112:1-123:0\">\n<p data-sourcepos=\"112:5-112:56\"><strong>複数の表を別々のシートに保存する</strong></p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"114:5-120:7\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">ExcelWriter</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">output.xlsx</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">):</span>\n        <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"nf\">to_excel</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">sheet_name</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Table_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"122:5-122:110\">この場合、<code>Table_1</code>, <code>Table_2</code>, ...というシート名でそれぞれの表が出力されます。</p>\n</li>\n</ul>\n<h3 data-sourcepos=\"124:1-124:46\">\n<span id=\"34-excelファイルをダウンロード\" class=\"fragment\"></span><a href=\"#34-excel%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>3.4 Excelファイルをダウンロード</h3>\n<p data-sourcepos=\"126:1-126:112\">Colabで生成したExcelファイルは、下記のコードでローカルにダウンロードできます。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"128:1-131:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"n\">google.colab</span> <span class=\"kn\">import</span> <span class=\"n\">files</span>\n<span class=\"n\">files</span><span class=\"p\">.</span><span class=\"nf\">download</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">output.xlsx</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"133:1-133:138\"><strong>ワンポイント</strong>：ダウンロード後にExcelを開いてみて、表が正しく抽出されているか確認しましょう。</p>\n<hr data-sourcepos=\"135:1-136:0\">\n<h2 data-sourcepos=\"137:1-137:63\">\n<span id=\"4-notebooklmでpdfの表を抽出しexcel化する方法\" class=\"fragment\"></span><a href=\"#4-notebooklm%E3%81%A7pdf%E3%81%AE%E8%A1%A8%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%97excel%E5%8C%96%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>4. NotebookLMでPDFの表を抽出し、Excel化する方法</h2>\n<p data-sourcepos=\"139:1-139:276\">Google Colabに慣れていない方は、NotebookLMというAIツールを使う方法もあります。NotebookLMはテキストやPDFをアップロードすると、その内容をAIが解析し、質問に応じて答えを返してくれる便利なサービスです。</p>\n<h3 data-sourcepos=\"141:1-141:45\">\n<span id=\"41-notebooklmへのpdfアップロード\" class=\"fragment\"></span><a href=\"#41-notebooklm%E3%81%B8%E3%81%AEpdf%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>4.1 NotebookLMへのPDFアップロード</h3>\n<ol data-sourcepos=\"143:1-146:0\">\n<li data-sourcepos=\"143:1-143:107\">\n<a href=\"https://something.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">NotebookLM</a>にアクセスし、Googleアカウントでログイン。</li>\n<li data-sourcepos=\"144:1-144:103\">「新しいノートブック」を作成し、解析したいPDFをアップロードします。</li>\n<li data-sourcepos=\"145:1-146:0\">アップロードが完了するとNotebookLMがファイル内容をインデックス化し、検索やAI解析が可能になります。</li>\n</ol>\n<h3 data-sourcepos=\"147:1-147:53\">\n<span id=\"42-表形式のデータをリクエストする\" class=\"fragment\"></span><a href=\"#42-%E8%A1%A8%E5%BD%A2%E5%BC%8F%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4.2 表形式のデータをリクエストする</h3>\n<p data-sourcepos=\"149:1-149:103\">NotebookLMのチャットインターフェースに以下のように入力してみてください。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"151:5-152:0\"><div class=\"highlight\"><pre><code>このPDFに含まれる表を抽出して、学校名、偏差値、受験日、受験会場、合格発表日時を一覧表にしてください。\n</code></pre></div></div>\n<p data-sourcepos=\"153:1-153:353\">NotebookLMはPDFを解析し、上記のような<strong>項目ごとに表を作って回答</strong>してくれる場合があります。もし表形式で返ってこなければ、追加で「表形式で出力して」「列は◯◯と◯◯に分けて」などと指示すると、より構造化された形式で返してくれることがあります。</p>\n<h3 data-sourcepos=\"155:1-155:50\">\n<span id=\"43-notebooklmの出力結果をexcelに転記\" class=\"fragment\"></span><a href=\"#43-notebooklm%E3%81%AE%E5%87%BA%E5%8A%9B%E7%B5%90%E6%9E%9C%E3%82%92excel%E3%81%AB%E8%BB%A2%E8%A8%98\"><i class=\"fa fa-link\"></i></a>4.3 NotebookLMの出力結果をExcelに転記</h3>\n<p data-sourcepos=\"157:1-157:370\">NotebookLMが返した表をテキスト選択してコピーし、ExcelのセルにペーストすればOKです。その際、改行や区切りがうまく反映されない場合がありますが、Excelの「区切り位置指定」機能や、テキストエディタでタブやカンマ区切りに置換してから貼り付けると整列しやすいです。</p>\n<p data-sourcepos=\"159:1-159:247\">NotebookLMが文章形式で返してきた場合は、手作業でExcelに列を分けて貼り付ける必要がありますが、内容の解析をNotebookLMがやってくれるので、情報の抜け漏れを減らすことができます。</p>\n<hr data-sourcepos=\"161:1-162:0\">\n<h2 data-sourcepos=\"163:1-163:72\">\n<span id=\"5-トラブルシューティングよくある問題と対処法\" class=\"fragment\"></span><a href=\"#5-%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95\"><i class=\"fa fa-link\"></i></a>5. トラブルシューティング：よくある問題と対処法</h2>\n<h3 data-sourcepos=\"165:1-165:50\">\n<span id=\"51-スキャンpdf画像ベースの問題\" class=\"fragment\"></span><a href=\"#51-%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3pdf%E7%94%BB%E5%83%8F%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>5.1 スキャンPDF・画像ベースの問題</h3>\n<p data-sourcepos=\"167:1-167:287\">PDFが文字情報を持っていない「画像ベース（スキャンされたもの）」の場合、tabula-pyやNotebookLMだけでは正しく表を抽出できません。その場合は<strong>OCR</strong>（光学文字認識）を使ってPDFをテキスト化する必要があります。</p>\n<ul data-sourcepos=\"169:1-171:0\">\n<li data-sourcepos=\"169:1-169:154\">Google DriveにPDFをアップロードして「Googleドキュメントとして開く」ことでOCRが自動的にかかる場合があります。</li>\n<li data-sourcepos=\"170:1-171:0\">無料のオンラインサービス（例：PDF Candy など）でOCRをかける手もあります。</li>\n</ul>\n<h3 data-sourcepos=\"172:1-172:53\">\n<span id=\"52-複雑な表のレイアウトによる問題\" class=\"fragment\"></span><a href=\"#52-%E8%A4%87%E9%9B%91%E3%81%AA%E8%A1%A8%E3%81%AE%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>5.2 複雑な表のレイアウトによる問題</h3>\n<p data-sourcepos=\"174:1-174:144\">セルの結合が多用されていたり、表が縦横に入り乱れている場合、抽出がうまくいかないことがあります。</p>\n<ul data-sourcepos=\"176:1-179:0\">\n<li data-sourcepos=\"176:1-176:65\">\n<code>tabula-py</code> では <code>lattice=True</code> や <code>stream=True</code> を試す</li>\n<li data-sourcepos=\"177:1-177:65\">\n<code>area</code> パラメータで抽出範囲を細かく指定する</li>\n<li data-sourcepos=\"178:1-179:0\">行列がずれてしまう場合は、<strong>camelot-py</strong>等を試してみる</li>\n</ul>\n<h3 data-sourcepos=\"180:1-180:47\">\n<span id=\"53-エラーメッセージが出る場合\" class=\"fragment\"></span><a href=\"#53-%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%8C%E5%87%BA%E3%82%8B%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>5.3 エラーメッセージが出る場合</h3>\n<ul data-sourcepos=\"182:1-185:0\">\n<li data-sourcepos=\"182:1-182:92\">\n<strong>ファイル名のミス</strong>：拡張子やスペルが合っているか確認する。</li>\n<li data-sourcepos=\"183:1-183:114\">\n<strong>ライブラリがインストールされていない</strong>：<code>!pip install tabula-py</code> を再度実行する。</li>\n<li data-sourcepos=\"184:1-185:0\">\n<strong>ターミナル権限や環境の問題</strong>：Colabを一度ランタイム再起動するなどを試してみる。</li>\n</ul>\n<hr data-sourcepos=\"186:1-187:0\">\n<h2 data-sourcepos=\"188:1-188:52\">\n<span id=\"6-tabula-py以外の方法camelot-pyの活用\" class=\"fragment\"></span><a href=\"#6-tabula-py%E4%BB%A5%E5%A4%96%E3%81%AE%E6%96%B9%E6%B3%95camelot-py%E3%81%AE%E6%B4%BB%E7%94%A8\"><i class=\"fa fa-link\"></i></a>6. tabula-py以外の方法：camelot-pyの活用</h2>\n<p data-sourcepos=\"190:1-190:163\"><code>tabula-py</code>でうまく抽出できない場合、同様の用途で人気なのが<strong>camelot-py</strong>です。インストールと使い方は以下の通りです。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"192:1-194:3\"><div class=\"highlight\"><pre><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">camelot</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"p\">[</span><span class=\"n\">cv</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<p data-sourcepos=\"196:1-196:93\">インストール後、PDFから表を読み込むコードは次のようになります。</p>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"198:1-202:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"n\">camelot</span>\n\n<span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">camelot</span><span class=\"p\">.</span><span class=\"nf\">read_pdf</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">sample.pdf</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">all</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<ul data-sourcepos=\"204:1-206:0\">\n<li data-sourcepos=\"204:1-204:103\">\n<code>tables</code> は、読み込んだ複数のテーブル（表）をリスト形式で保持します。</li>\n<li data-sourcepos=\"205:1-206:0\">Excelに書き出す方法は、タブのように <code>tables[0].to_excel('output.xlsx')</code> のように指定します。</li>\n</ul>\n<p data-sourcepos=\"207:1-207:243\">Camelotは表が線でしっかり区切られているPDFには強いと言われています。Google Colabでも同様に動作するので、<strong>tabula-pyとcamelot-pyを使い分ける</strong>ことで、より多様なPDFに対応できます。</p>\n<hr data-sourcepos=\"209:1-210:0\">\n<h2 data-sourcepos=\"211:1-211:60\">\n<span id=\"7-応用例さらに便利に使うためのヒント\" class=\"fragment\"></span><a href=\"#7-%E5%BF%9C%E7%94%A8%E4%BE%8B%E3%81%95%E3%82%89%E3%81%AB%E4%BE%BF%E5%88%A9%E3%81%AB%E4%BD%BF%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%83%92%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>7. 応用例：さらに便利に使うためのヒント</h2>\n<h3 data-sourcepos=\"213:1-213:32\">\n<span id=\"71-複数pdfを一括処理\" class=\"fragment\"></span><a href=\"#71-%E8%A4%87%E6%95%B0pdf%E3%82%92%E4%B8%80%E6%8B%AC%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>7.1 複数PDFを一括処理</h3>\n<p data-sourcepos=\"215:1-215:317\">同じ形式のPDFが大量にある場合は、Google Colab上で「フォルダ内にある全PDFファイルをループ処理して、一括でExcelにまとめる」スクリプトを書くと効率的です。ファイル名や保存先を動的に変更できるので、大量処理にも向いています。</p>\n<h3 data-sourcepos=\"217:1-217:41\">\n<span id=\"72-毎月の定期レポート作成\" class=\"fragment\"></span><a href=\"#72-%E6%AF%8E%E6%9C%88%E3%81%AE%E5%AE%9A%E6%9C%9F%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>7.2 毎月の定期レポート作成</h3>\n<p data-sourcepos=\"219:1-219:170\">定期的に送付されるPDFレポートから表を抽出し、Excelにまとめるフローを自動化すれば、手作業の時間を大幅に削減できます。</p>\n<ul data-sourcepos=\"221:1-223:0\">\n<li data-sourcepos=\"221:1-221:160\">Google Colabに自動化用のノートブックを作り、PDFのアップロード → 表抽出 → Excel出力まで一連の流れを保存しておく</li>\n<li data-sourcepos=\"222:1-223:0\">MacrosやGoogle Apps Scriptなど、他のツールと連携してメール自動送信を組み合わせることも可能</li>\n</ul>\n<h3 data-sourcepos=\"224:1-224:41\">\n<span id=\"73-データ分析やグラフ作成\" class=\"fragment\"></span><a href=\"#73-%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%82%84%E3%82%B0%E3%83%A9%E3%83%95%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>7.3 データ分析やグラフ作成</h3>\n<p data-sourcepos=\"226:1-226:315\">Pythonのデータ分析ライブラリ（pandasやmatplotlib、seabornなど）を使えば、抽出した表をそのままグラフ化したり、統計分析を行うことができます。Excelだけでは難しい大規模なデータも、Colabなら無料である程度扱えるのでおすすめです。</p>\n<hr data-sourcepos=\"228:1-229:0\">\n<h2 data-sourcepos=\"230:1-230:15\">\n<span id=\"8-まとめ\" class=\"fragment\"></span><a href=\"#8-%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>8. まとめ</h2>\n<ul data-sourcepos=\"232:1-236:0\">\n<li data-sourcepos=\"232:1-232:148\">\n<strong>Google Colab</strong>を使うと、Python環境を手軽にセットアップし、<code>tabula-py</code>や<code>camelot-py</code>でPDFから表を抽出しやすい。</li>\n<li data-sourcepos=\"233:1-233:137\">\n<strong>NotebookLM</strong>を併用すれば、AIの力でPDF内の情報をまとめたり、表形式に整理してもらうことも可能。</li>\n<li data-sourcepos=\"234:1-234:193\">スキャンPDFや複雑な表レイアウトなど、慣れてくると遭遇する問題もあるが、OCRを活用したり、追加オプションを試すなどの解決策がある。</li>\n<li data-sourcepos=\"235:1-236:0\">うまく使いこなせば、単発の表抽出だけでなく、定期的なレポート作成やデータ分析の自動化にも応用できる。</li>\n</ul>\n<p data-sourcepos=\"237:1-237:309\">初心者のうちはエラーが出たり、表が崩れたりすることもあるかもしれませんが、何度か試行錯誤してみるとポイントが掴めてくるはずです。PDF処理は仕事や学業で頻出のタスクなので、これを機にぜひマスターしてみましょう！</p>\n<hr data-sourcepos=\"239:1-240:0\">\n<h2 data-sourcepos=\"241:1-241:33\">\n<span id=\"9-よくある質問faq\" class=\"fragment\"></span><a href=\"#9-%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E8%B3%AA%E5%95%8Ffaq\"><i class=\"fa fa-link\"></i></a>9. よくある質問（FAQ）</h2>\n<p data-sourcepos=\"243:1-244:207\"><strong>Q1. スキャンされたPDFでも自動抽出できますか？</strong><br>\nA. 文字情報が埋め込まれていない画像ベースのPDFは、まずOCRでテキスト化する必要があります。Google DriveやオンラインOCRツールを活用してみてください。</p>\n<p data-sourcepos=\"246:1-247:207\"><strong>Q2. PDF内に複数の表があってうまく抽出できません。</strong><br>\nA. <code>tabula-py</code>の返却結果が複数のDataFrameリストになっている可能性があります。<code>df[i]</code>などインデックス指定で取り出すか、<code>camelot-py</code>を試してみてください。</p>\n<p data-sourcepos=\"249:1-250:216\"><strong>Q3. NotebookLMが表を返してくれません。</strong><br>\nA. 質問の仕方を工夫してみてください。「表形式で列の名前を◯◯にして」「◯◯をカラムとして分けて」など、具体的に指示すると出力されやすくなります。</p>\n<p data-sourcepos=\"252:1-253:213\"><strong>Q4. 出力されたExcelファイルが文字化けしているようです。</strong><br>\nA. PDF自体が特殊なフォントを使用している場合、抽出結果が文字化けすることがあります。OCRや別のPDF変換ツールなどを併用すると改善することがあります。</p>\n<p data-sourcepos=\"255:1-256:241\"><strong>Q5. セキュリティ上の問題はありませんか？</strong><br>\nA. Google ColabやNotebookLMでPDFを扱うときは、機密情報が含まれていないことを確認してください。社外秘文書などは利用規約や社内ポリシーに抵触する可能性があるため要注意です。</p>\n<hr data-sourcepos=\"258:1-259:0\">\n<p data-sourcepos=\"260:1-260:349\">以上が、<strong>Google ColabとNotebookLMを活用したPDFの表をExcelに変換するための完全ガイド</strong>です。最初は少し戸惑うかもしれませんが、一度やり方を覚えてしまえば効率が大幅にアップします。ぜひこの記事を参考に、PDF処理の作業をスムーズに進めてみてください。</p>\n",
        "body": "***\n\n# 【初心者向け】\"Google Colab\" or \"NotebookLM\" でPDFの表をExcelに変換する完全ガイド\n\n「PDFに含まれる表をExcelにまとめたい！」そんなとき、手動でコピペしていると時間もかかるし、ミスも増える…。しかし、**Google Colab**と**NotebookLM**を上手に使えば、PDFから表を抽出してExcelに書き出す作業がぐっと楽になります。プログラミング初心者でもわかるように、ステップバイステップでやり方を紹介します。さらに、トラブルシューティングや応用例も含めて、充実した内容をお届けします！\n\n***\n\n## 目次\n\n1.  **はじめに：なぜGoogle ColabとNotebookLM？**\n2.  **事前準備：Google ColabのセットアップとPDFファイルのアップロード**\n3.  **Google ColabでPDFの表をExcelに変換する方法**\n    *   3.1 必要なライブラリのインストール\n    *   3.2 PDFから表を抽出する（tabula-py）\n    *   3.3 Excelファイルに書き出す\n    *   3.4 Excelファイルをダウンロード\n4.  **NotebookLMでPDFの表を抽出し、Excel化する方法**\n    *   4.1 NotebookLMへのPDFアップロード\n    *   4.2 表形式のデータをリクエストする\n    *   4.3 NotebookLMの出力結果をExcelに転記\n5.  **トラブルシューティング：よくある問題と対処法**\n    *   5.1 スキャンPDF・画像ベースの問題\n    *   5.2 複雑な表のレイアウトによる問題\n    *   5.3 エラーメッセージが出る場合\n6.  **tabula-py以外の方法：camelot-pyの活用**\n7.  **応用例：さらに便利に使うためのヒント**\n    *   7.1 複数PDFを一括処理\n    *   7.2 毎月の定期レポート作成\n    *   7.3 データ分析やグラフ作成\n8.  **まとめ**\n9.  **よくある質問（FAQ）**\n\n***\n\n## 1. はじめに：なぜGoogle ColabとNotebookLM？\n\n**Google Colab**は、ブラウザ上でPythonを実行できる無料のサービスです。わざわざ自分のPCにPythonをインストールしなくても、すぐにPythonコードを試すことができます。また、データ分析や機械学習を学ぶ際にも広く使われている人気ツールです。\n\n一方、**NotebookLM**はGoogleが提供するAIツールで、PDFやテキストドキュメントなどの内容をAIが解析してくれます。文章内の表やデータを見つけ出して構造化したり、必要に応じて要約や分類なども行ってくれる便利なサービスです。\n\nこの2つを組み合わせると、\n\n*   Google Colab上でPDFをPythonのライブラリ（例：tabula-py, camelot-py）を用いて表を抽出し、Excelに変換\n*   NotebookLM上でAI解析を活用して、PDFの表形式データを素早くテキストやExcelにまとめる\n\nといったことが可能になります。**初心者でも扱いやすい**環境なので、ぜひ活用してみましょう。\n\n***\n\n## 2. 事前準備：Google ColabのセットアップとPDFファイルのアップロード\n\nまずはGoogle Colabを準備します。\n\n1.  **Googleアカウントの用意**\\\n    すでにGmailやGoogle Driveをお使いの場合は、そのアカウントでOKです。持っていない場合は無料で作成できます。\n\n2.  **Google Colabを開く**\\\n    ブラウザで[Google Colab](https://colab.research.google.com/)にアクセスし、右下の「新しいノートブック」をクリックして、新しいノートブックを作成します。するとJupyter Notebookのような画面が現れ、セル（コードを入力する領域）が使えるようになります。\n\n3.  **PDFファイルをアップロード**\\\n    変換したいPDFファイルを手元に用意しておきましょう。\n    ```python\n    from google.colab import files\n    uploaded = files.upload()  # ここでPDFを選択\n    ```\n    上記コードをColabのセルに貼り付けて実行すると、ファイル選択画面が表示されるので、変換したいPDFを選択します。アップロードに成功すると`sample.pdf`のようにファイル名が表示されるので、あとで使うためにメモしておいてください。\n\n***\n\n## 3. Google ColabでPDFの表をExcelに変換する方法\n\n### 3.1 必要なライブラリのインストール\n\nPDFから表を抽出するには、**tabula-py**というライブラリが便利です。Colabでは簡単にインストールが可能です。\n\n```python\n!pip install tabula-py\n```\n\n`!`はColabでシェルコマンドを実行するための記号で、普通のPythonコードとは区別されます。インストールが完了すると「Successfully installed...」のようなメッセージが表示されます。\n\n### 3.2 PDFから表を抽出する（tabula-py）\n\nインストールが終わったら、以下のコードを実行してPDFから表を読み取ります。先ほどメモしたPDFファイル名を使ってください。\n\n```python\nimport tabula\n\ndf = tabula.read_pdf('sample.pdf', pages='all')  # 'sample.pdf'をアップロードしたファイル名に変更\n```\n\n*   `pages='all'` はPDF全ページから表を抽出する指定です。必要に応じて `pages='1'` や `pages='1-3'` に変えてみてください。\n*   `df` は抽出した表を格納する変数です。PDFに複数の表がある場合はリスト形式で複数のDataFrameが返ってきます。\n\n#### コツ：正しく読み込めないとき\n\nもし正しく表を抽出できていないと感じる場合は、tabulaの`lattice=True`オプションや`stream=True`オプション、あるいは`area`パラメータで表の範囲を指定する方法もあります。複雑なレイアウトのPDFの場合に役立ちます。\n\n### 3.3 Excelファイルに書き出す\n\n抽出したデータフレーム（DataFrame）をExcel形式に出力する方法を紹介します。\n\n*   **単一の表をExcelに保存する**\n\n    ```python\n    df[0].to_excel('output.xlsx', index=False)\n    ```\n\n    もし1つのテーブルしかない場合は、`df`がそのままDataFrameの場合もあります。その場合は`df.to_excel('output.xlsx', index=False)`でOKです。\n\n*   **複数の表を別々のシートに保存する**\n\n    ```python\n    import pandas as pd\n\n    with pd.ExcelWriter('output.xlsx') as writer:\n        for i, table in enumerate(df):\n            table.to_excel(writer, sheet_name=f'Table_{i+1}', index=False)\n    ```\n\n    この場合、`Table_1`, `Table_2`, ...というシート名でそれぞれの表が出力されます。\n\n### 3.4 Excelファイルをダウンロード\n\nColabで生成したExcelファイルは、下記のコードでローカルにダウンロードできます。\n\n```python\nfrom google.colab import files\nfiles.download('output.xlsx')\n```\n\n**ワンポイント**：ダウンロード後にExcelを開いてみて、表が正しく抽出されているか確認しましょう。\n\n***\n\n## 4. NotebookLMでPDFの表を抽出し、Excel化する方法\n\nGoogle Colabに慣れていない方は、NotebookLMというAIツールを使う方法もあります。NotebookLMはテキストやPDFをアップロードすると、その内容をAIが解析し、質問に応じて答えを返してくれる便利なサービスです。\n\n### 4.1 NotebookLMへのPDFアップロード\n\n1.  [NotebookLM](https://something.google.com/)にアクセスし、Googleアカウントでログイン。\n2.  「新しいノートブック」を作成し、解析したいPDFをアップロードします。\n3.  アップロードが完了するとNotebookLMがファイル内容をインデックス化し、検索やAI解析が可能になります。\n\n### 4.2 表形式のデータをリクエストする\n\nNotebookLMのチャットインターフェースに以下のように入力してみてください。\n\n    このPDFに含まれる表を抽出して、学校名、偏差値、受験日、受験会場、合格発表日時を一覧表にしてください。\n\nNotebookLMはPDFを解析し、上記のような**項目ごとに表を作って回答**してくれる場合があります。もし表形式で返ってこなければ、追加で「表形式で出力して」「列は◯◯と◯◯に分けて」などと指示すると、より構造化された形式で返してくれることがあります。\n\n### 4.3 NotebookLMの出力結果をExcelに転記\n\nNotebookLMが返した表をテキスト選択してコピーし、ExcelのセルにペーストすればOKです。その際、改行や区切りがうまく反映されない場合がありますが、Excelの「区切り位置指定」機能や、テキストエディタでタブやカンマ区切りに置換してから貼り付けると整列しやすいです。\n\nNotebookLMが文章形式で返してきた場合は、手作業でExcelに列を分けて貼り付ける必要がありますが、内容の解析をNotebookLMがやってくれるので、情報の抜け漏れを減らすことができます。\n\n***\n\n## 5. トラブルシューティング：よくある問題と対処法\n\n### 5.1 スキャンPDF・画像ベースの問題\n\nPDFが文字情報を持っていない「画像ベース（スキャンされたもの）」の場合、tabula-pyやNotebookLMだけでは正しく表を抽出できません。その場合は**OCR**（光学文字認識）を使ってPDFをテキスト化する必要があります。\n\n*   Google DriveにPDFをアップロードして「Googleドキュメントとして開く」ことでOCRが自動的にかかる場合があります。\n*   無料のオンラインサービス（例：PDF Candy など）でOCRをかける手もあります。\n\n### 5.2 複雑な表のレイアウトによる問題\n\nセルの結合が多用されていたり、表が縦横に入り乱れている場合、抽出がうまくいかないことがあります。\n\n*   `tabula-py` では `lattice=True` や `stream=True` を試す\n*   `area` パラメータで抽出範囲を細かく指定する\n*   行列がずれてしまう場合は、**camelot-py**等を試してみる\n\n### 5.3 エラーメッセージが出る場合\n\n*   **ファイル名のミス**：拡張子やスペルが合っているか確認する。\n*   **ライブラリがインストールされていない**：`!pip install tabula-py` を再度実行する。\n*   **ターミナル権限や環境の問題**：Colabを一度ランタイム再起動するなどを試してみる。\n\n***\n\n## 6. tabula-py以外の方法：camelot-pyの活用\n\n`tabula-py`でうまく抽出できない場合、同様の用途で人気なのが**camelot-py**です。インストールと使い方は以下の通りです。\n\n```python\n!pip install camelot-py[cv]\n```\n\nインストール後、PDFから表を読み込むコードは次のようになります。\n\n```python\nimport camelot\n\ntables = camelot.read_pdf('sample.pdf', pages='all')\n```\n\n*   `tables` は、読み込んだ複数のテーブル（表）をリスト形式で保持します。\n*   Excelに書き出す方法は、タブのように `tables[0].to_excel('output.xlsx')` のように指定します。\n\nCamelotは表が線でしっかり区切られているPDFには強いと言われています。Google Colabでも同様に動作するので、**tabula-pyとcamelot-pyを使い分ける**ことで、より多様なPDFに対応できます。\n\n***\n\n## 7. 応用例：さらに便利に使うためのヒント\n\n### 7.1 複数PDFを一括処理\n\n同じ形式のPDFが大量にある場合は、Google Colab上で「フォルダ内にある全PDFファイルをループ処理して、一括でExcelにまとめる」スクリプトを書くと効率的です。ファイル名や保存先を動的に変更できるので、大量処理にも向いています。\n\n### 7.2 毎月の定期レポート作成\n\n定期的に送付されるPDFレポートから表を抽出し、Excelにまとめるフローを自動化すれば、手作業の時間を大幅に削減できます。\n\n*   Google Colabに自動化用のノートブックを作り、PDFのアップロード → 表抽出 → Excel出力まで一連の流れを保存しておく\n*   MacrosやGoogle Apps Scriptなど、他のツールと連携してメール自動送信を組み合わせることも可能\n\n### 7.3 データ分析やグラフ作成\n\nPythonのデータ分析ライブラリ（pandasやmatplotlib、seabornなど）を使えば、抽出した表をそのままグラフ化したり、統計分析を行うことができます。Excelだけでは難しい大規模なデータも、Colabなら無料である程度扱えるのでおすすめです。\n\n***\n\n## 8. まとめ\n\n*   **Google Colab**を使うと、Python環境を手軽にセットアップし、`tabula-py`や`camelot-py`でPDFから表を抽出しやすい。\n*   **NotebookLM**を併用すれば、AIの力でPDF内の情報をまとめたり、表形式に整理してもらうことも可能。\n*   スキャンPDFや複雑な表レイアウトなど、慣れてくると遭遇する問題もあるが、OCRを活用したり、追加オプションを試すなどの解決策がある。\n*   うまく使いこなせば、単発の表抽出だけでなく、定期的なレポート作成やデータ分析の自動化にも応用できる。\n\n初心者のうちはエラーが出たり、表が崩れたりすることもあるかもしれませんが、何度か試行錯誤してみるとポイントが掴めてくるはずです。PDF処理は仕事や学業で頻出のタスクなので、これを機にぜひマスターしてみましょう！\n\n***\n\n## 9. よくある質問（FAQ）\n\n**Q1. スキャンされたPDFでも自動抽出できますか？**\\\nA. 文字情報が埋め込まれていない画像ベースのPDFは、まずOCRでテキスト化する必要があります。Google DriveやオンラインOCRツールを活用してみてください。\n\n**Q2. PDF内に複数の表があってうまく抽出できません。**\\\nA. `tabula-py`の返却結果が複数のDataFrameリストになっている可能性があります。`df[i]`などインデックス指定で取り出すか、`camelot-py`を試してみてください。\n\n**Q3. NotebookLMが表を返してくれません。**\\\nA. 質問の仕方を工夫してみてください。「表形式で列の名前を◯◯にして」「◯◯をカラムとして分けて」など、具体的に指示すると出力されやすくなります。\n\n**Q4. 出力されたExcelファイルが文字化けしているようです。**\\\nA. PDF自体が特殊なフォントを使用している場合、抽出結果が文字化けすることがあります。OCRや別のPDF変換ツールなどを併用すると改善することがあります。\n\n**Q5. セキュリティ上の問題はありませんか？**\\\nA. Google ColabやNotebookLMでPDFを扱うときは、機密情報が含まれていないことを確認してください。社外秘文書などは利用規約や社内ポリシーに抵触する可能性があるため要注意です。\n\n***\n\n以上が、**Google ColabとNotebookLMを活用したPDFの表をExcelに変換するための完全ガイド**です。最初は少し戸惑うかもしれませんが、一度やり方を覚えてしまえば効率が大幅にアップします。ぜひこの記事を参考に、PDF処理の作業をスムーズに進めてみてください。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-02-21T23:26:21+09:00",
        "group": null,
        "id": "fb62b7dfbb4d9c82fdfc",
        "likes_count": 2,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 1,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "HiÐΞ",
            "versions": []
          },
          {
            "name": "NotebookLM",
            "versions": []
          }
        ],
        "title": "【初心者向け】\"Google Colab\" or \"NotebookLM\" でPDFの表をExcelに変換する完全ガイド",
        "updated_at": "2025-02-21T23:26:21+09:00",
        "url": "https://qiita.com/ussu_ussu_ussu/items/fb62b7dfbb4d9c82fdfc",
        "user": {
          "description": "ussu",
          "facebook_id": "",
          "followees_count": 5,
          "followers_count": 7,
          "github_login_name": "SYOGAKU-TOUSHI",
          "id": "ussu_ussu_ussu",
          "items_count": 132,
          "linkedin_id": "",
          "location": "ussu",
          "name": "ussu ussu",
          "organization": "",
          "permanent_id": 2433285,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2433285/14c32eff7b519757cca26cac942d2a54073d2d9c/x_large.png?1642312288",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.738272488117218,
        "quality_score": 19,
        "python_code_score": 4,
        "python_code_blocks": 8
      },
      {
        "rendered_body": "<h1 data-sourcepos=\"1:1-1:103\">\n<span id=\"python初学者aiプロンプトで作るビジネス自動化アプリを公開しました\" class=\"fragment\"></span><a href=\"#python%E5%88%9D%E5%AD%A6%E8%80%85ai%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%A7%E4%BD%9C%E3%82%8B%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E8%87%AA%E5%8B%95%E5%8C%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F\"><i class=\"fa fa-link\"></i></a>【Python初学者】AIプロンプトで作るビジネス自動化アプリを公開しました！</h1>\n<h2 data-sourcepos=\"3:1-3:53\">\n<span id=\"-プロンプトでアプリを作る時代へ\" class=\"fragment\"></span><a href=\"#-%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B%E6%99%82%E4%BB%A3%E3%81%B8\"><i class=\"fa fa-link\"></i></a>🤖 プロンプトでアプリを作る時代へ</h2>\n<p data-sourcepos=\"5:1-5:138\">これからのビジネスでは、<strong>「AIに何をどう頼むか」＝プロンプト設計力</strong>が大きなスキルとなります。</p>\n<p data-sourcepos=\"7:1-7:136\">実際にこのアプリでは、以下のような手順で<strong>初心者でも自分の仕事用の自動化ツール</strong>を作れます：</p>\n<ol data-sourcepos=\"9:1-13:0\">\n<li data-sourcepos=\"9:1-9:86\">やりたいこと（例：毎月のレポートを自動で作成）を考える</li>\n<li data-sourcepos=\"10:1-10:70\">用意されたプロンプト例を使ってAIツールに依頼</li>\n<li data-sourcepos=\"11:1-11:52\">出力されたコードを自分のPCで実行</li>\n<li data-sourcepos=\"12:1-13:0\">\n<strong>自分の仕事が自動化</strong>されて、本来の業務に集中できる！</li>\n</ol>\n<hr data-sourcepos=\"14:1-15:0\">\n<p data-sourcepos=\"16:1-18:51\">🧠 <strong>AIを使いこなすスキル＝新しいビジネス教養</strong><br>\n「コードが書けなくても、自動化アプリを作れる」<br>\nそんな時代がすでに始まっています。</p>\n<p data-sourcepos=\"20:1-20:40\"><strong>仕事で手一杯のあなたへ</strong>：</p>\n<ul data-sourcepos=\"21:1-24:0\">\n<li data-sourcepos=\"21:1-21:74\">毎日のルーチンワークに時間を取られていませんか？</li>\n<li data-sourcepos=\"22:1-22:64\">Excelの手作業でミスを繰り返していませんか？</li>\n<li data-sourcepos=\"23:1-24:0\">本来やるべき仕事に集中できていますか？</li>\n</ul>\n<p data-sourcepos=\"25:1-25:59\"><strong>たった1つの自動化アプリを作るだけで</strong>：</p>\n<ul data-sourcepos=\"26:1-29:0\">\n<li data-sourcepos=\"26:1-26:38\">月に数十時間の時間を節約</li>\n<li data-sourcepos=\"27:1-27:26\">ミスを大幅に削減</li>\n<li data-sourcepos=\"28:1-29:0\">本来の価値ある仕事に集中できる</li>\n</ul>\n<p data-sourcepos=\"30:1-30:78\">特に以下のような方に、このスキルは強くおすすめです：</p>\n<ul data-sourcepos=\"32:1-36:0\">\n<li data-sourcepos=\"32:1-32:58\">ノーコードツールに限界を感じている方</li>\n<li data-sourcepos=\"33:1-33:55\">エクセル業務をもっと効率化したい方</li>\n<li data-sourcepos=\"34:1-34:54\">将来AIを活かした仕事をしたい初学者</li>\n<li data-sourcepos=\"35:1-36:0\">AIツール（Claude、Gemini、Copilot等）を使って**\"自分で作れる力\"**を身につけたい方</li>\n</ul>\n<hr data-sourcepos=\"37:1-38:0\">\n<p data-sourcepos=\"39:1-39:169\">このアプリでは、<strong>プロンプトとコード例がセットで紹介されている</strong>ので、「自分の仕事を自動化したい」人にも最適です。</p>\n<p data-sourcepos=\"41:1-41:151\">AIと一緒に、今すぐ \"自分の仕事用の自動化ツール\" を作って、<strong>本来の業務に集中できる時間</strong>を創りましょう。</p>\n<h2 data-sourcepos=\"43:1-43:15\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n<p data-sourcepos=\"45:1-45:76\">こんにちは！プログラミング初学者のyamashitayoshikoです。</p>\n<p data-sourcepos=\"47:1-47:151\">今回、<strong>AIプロンプトを活用したPython学習</strong>の一環として、<strong>ビジネス自動化ツール紹介アプリ</strong>を作成しました！</p>\n<p data-sourcepos=\"49:1-49:156\"><strong>プログラミング未経験でも、AIツールを使えば自分の仕事用の自動化ツールが作れる</strong>ことを実証したアプリです。</p>\n<h2 data-sourcepos=\"51:1-51:21\">\n<span id=\"アプリの概要\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>アプリの概要</h2>\n<h3 data-sourcepos=\"53:1-53:27\">\n<span id=\"-アプリの目的\" class=\"fragment\"></span><a href=\"#-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>🎯 アプリの目的</h3>\n<ul data-sourcepos=\"54:1-57:0\">\n<li data-sourcepos=\"54:1-54:127\">\n<strong>業務効率化</strong>: 仕事で手一杯の方でも、AIツールを使えば業務自動化が実現できることを実証</li>\n<li data-sourcepos=\"55:1-55:144\">\n<strong>プロンプト設計力向上</strong>: 各ツールに具体的なAIプロンプト例を提供（ChatGPT、Claude、Gemini、Copilot等対応）</li>\n<li data-sourcepos=\"56:1-57:0\">\n<strong>実践的な学習</strong>: 20種類のビジネス自動化タスクを、AIと一緒に実装</li>\n</ul>\n<h3 data-sourcepos=\"58:1-58:27\">\n<span id=\"-アプリの特徴\" class=\"fragment\"></span><a href=\"#-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%89%B9%E5%BE%B4\"><i class=\"fa fa-link\"></i></a>📱 アプリの特徴</h3>\n<ul data-sourcepos=\"59:1-63:0\">\n<li data-sourcepos=\"59:1-59:92\">\n<strong>AIプロンプト例</strong>: 各ツールにChatGPT用の具体的なプロンプトを提供</li>\n<li data-sourcepos=\"60:1-60:68\">\n<strong>段階的学習</strong>: 初級→中級レベル別の難易度設定</li>\n<li data-sourcepos=\"61:1-61:62\">\n<strong>即座に実装可能</strong>: コピペで使えるコード例</li>\n<li data-sourcepos=\"62:1-63:0\">\n<strong>レスポンシブ</strong>: スマートフォンでも見やすいレイアウト</li>\n</ul>\n<h2 data-sourcepos=\"64:1-64:21\">\n<span id=\"技術スタック\" class=\"fragment\"></span><a href=\"#%E6%8A%80%E8%A1%93%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>技術スタック</h2>\n<h3 data-sourcepos=\"66:1-66:22\">\n<span id=\"バックエンド\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89\"><i class=\"fa fa-link\"></i></a>バックエンド</h3>\n<ul data-sourcepos=\"67:1-70:0\">\n<li data-sourcepos=\"67:1-67:45\">\n<strong>Python 3.13.4</strong>: 最新のPythonを使用</li>\n<li data-sourcepos=\"68:1-68:50\">\n<strong>Flask 3.x</strong>: 軽量なWebフレームワーク</li>\n<li data-sourcepos=\"69:1-70:0\">\n<strong>Gunicorn</strong>: 本番環境用WSGIサーバー</li>\n</ul>\n<h3 data-sourcepos=\"71:1-71:25\">\n<span id=\"フロントエンド\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89\"><i class=\"fa fa-link\"></i></a>フロントエンド</h3>\n<ul data-sourcepos=\"72:1-74:0\">\n<li data-sourcepos=\"72:1-72:54\">\n<strong>Bootstrap 5</strong>: モダンなUIフレームワーク</li>\n<li data-sourcepos=\"73:1-74:0\">\n<strong>HTML/CSS</strong>: シンプルで見やすいデザイン</li>\n</ul>\n<h3 data-sourcepos=\"75:1-75:16\">\n<span id=\"デプロイ\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"><i class=\"fa fa-link\"></i></a>デプロイ</h3>\n<ul data-sourcepos=\"76:1-77:0\">\n<li data-sourcepos=\"76:1-77:0\">\n<strong>Render</strong>: 無料プランでホスティング</li>\n</ul>\n<h2 data-sourcepos=\"78:1-78:32\">\n<span id=\"aiプロンプト例の紹介\" class=\"fragment\"></span><a href=\"#ai%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E4%BE%8B%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>AIプロンプト例の紹介</h2>\n<h3 data-sourcepos=\"80:1-80:51\">\n<span id=\"-メール自動送信のプロンプト例\" class=\"fragment\"></span><a href=\"#-%E3%83%A1%E3%83%BC%E3%83%AB%E8%87%AA%E5%8B%95%E9%80%81%E4%BF%A1%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>📧 メール自動送信のプロンプト例</h3>\n<p data-sourcepos=\"82:1-82:65\"><strong>対応AIツール</strong>: ChatGPT、Claude、Gemini、GitHub Copilot</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"84:1-97:3\"><div class=\"highlight\"><pre><code>Pythonでメール自動送信のコードを作成してください。以下の条件でお願いします：\n\n1. smtplibライブラリを使う\n2. GmailのSMTPサーバーを使用する\n3. 件名、本文、送信者、受信者を設定する\n4. エラーハンドリングも含める\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n送信者: 自分のGmailアドレス\n受信者: 指定したメールアドレス\n件名: 自動送信メール\n本文: 簡単なメッセージ\n</code></pre></div></div>\n<h3 data-sourcepos=\"99:1-99:47\">\n<span id=\"-excel自動処理のプロンプト例\" class=\"fragment\"></span><a href=\"#-excel%E8%87%AA%E5%8B%95%E5%87%A6%E7%90%86%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>📊 Excel自動処理のプロンプト例</h3>\n<p data-sourcepos=\"101:1-101:65\"><strong>対応AIツール</strong>: ChatGPT、Claude、Gemini、GitHub Copilot</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"103:1-115:3\"><div class=\"highlight\"><pre><code>PythonでExcel自動処理のコードを作成してください。以下の条件でお願いします：\n\n1. openpyxlライブラリを使う\n2. Excelファイルを読み込んでデータを取得する\n3. 売上データを集計する\n4. 結果を新しいセルに書き込む\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n対象ファイル: data.xlsx\n集計項目: 売上列の合計\n出力先: 新しいセル（D2など）\n</code></pre></div></div>\n<h2 data-sourcepos=\"117:1-117:51\">\n<span id=\"アプリで紹介している自動化ツール\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E7%B4%B9%E4%BB%8B%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E8%87%AA%E5%8B%95%E5%8C%96%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>アプリで紹介している自動化ツール</h2>\n<h3 data-sourcepos=\"119:1-119:40\">\n<span id=\"初級レベル30分1時間\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E7%B4%9A%E3%83%AC%E3%83%99%E3%83%AB30%E5%88%861%E6%99%82%E9%96%93\"><i class=\"fa fa-link\"></i></a>初級レベル（30分〜1時間）</h3>\n<ol data-sourcepos=\"120:1-127:0\">\n<li data-sourcepos=\"120:1-120:47\">\n<strong>メール自動送信</strong> - smtplibを使用</li>\n<li data-sourcepos=\"121:1-121:44\">\n<strong>Excel自動処理</strong> - openpyxl + pandas</li>\n<li data-sourcepos=\"122:1-122:53\">\n<strong>データ可視化グラフ作成</strong> - matplotlib</li>\n<li data-sourcepos=\"123:1-123:71\">\n<strong>ファイル自動整理</strong> - os, shutil（標準ライブラリ）</li>\n<li data-sourcepos=\"124:1-124:64\">\n<strong>チャットボット作成</strong> - 標準ライブラリのみ</li>\n<li data-sourcepos=\"125:1-125:40\">\n<strong>画像自動リサイズ</strong> - Pillow</li>\n<li data-sourcepos=\"126:1-127:0\">\n<strong>アンケート自動集計</strong> - pandas + matplotlib</li>\n</ol>\n<h3 data-sourcepos=\"128:1-128:36\">\n<span id=\"中級レベル12時間\" class=\"fragment\"></span><a href=\"#%E4%B8%AD%E7%B4%9A%E3%83%AC%E3%83%99%E3%83%AB12%E6%99%82%E9%96%93\"><i class=\"fa fa-link\"></i></a>中級レベル（1〜2時間）</h3>\n<ol data-sourcepos=\"129:1-142:0\">\n<li data-sourcepos=\"129:1-129:34\">\n<strong>PDF自動生成</strong> - reportlab</li>\n<li data-sourcepos=\"130:1-130:58\">\n<strong>Webスクレイピング</strong> - requests + BeautifulSoup</li>\n<li data-sourcepos=\"131:1-131:59\">\n<strong>定期レポート自動送信</strong> - schedule + smtplib</li>\n<li data-sourcepos=\"132:1-132:32\">\n<strong>SNS自動投稿</strong> - tweepy</li>\n<li data-sourcepos=\"133:1-133:63\">\n<strong>Googleカレンダー自動登録</strong> - Google Calendar API</li>\n<li data-sourcepos=\"134:1-134:60\">\n<strong>名刺データ自動整理</strong> - OpenCV + Tesseract OCR</li>\n<li data-sourcepos=\"135:1-135:41\">\n<strong>請求書自動作成</strong> - reportlab</li>\n<li data-sourcepos=\"136:1-136:60\">\n<strong>データベース自動バックアップ</strong> - sqlite3</li>\n<li data-sourcepos=\"137:1-137:52\">\n<strong>ログファイル自動分析</strong> - pandas + re</li>\n<li data-sourcepos=\"138:1-138:54\">\n<strong>画像からテキスト抽出</strong> - Tesseract OCR</li>\n<li data-sourcepos=\"139:1-139:44\">\n<strong>CSVファイル自動変換</strong> - pandas</li>\n<li data-sourcepos=\"140:1-140:49\">\n<strong>フォルダ監視自動処理</strong> - watchdog</li>\n<li data-sourcepos=\"141:1-142:0\">\n<strong>API自動テスト</strong> - requests + unittest</li>\n</ol>\n<h2 data-sourcepos=\"143:1-143:26\">\n<span id=\"ai活用の学習効果\" class=\"fragment\"></span><a href=\"#ai%E6%B4%BB%E7%94%A8%E3%81%AE%E5%AD%A6%E7%BF%92%E5%8A%B9%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>AI活用の学習効果</h2>\n<h3 data-sourcepos=\"145:1-145:42\">\n<span id=\"-従来の学習方法との違い\" class=\"fragment\"></span><a href=\"#-%E5%BE%93%E6%9D%A5%E3%81%AE%E5%AD%A6%E7%BF%92%E6%96%B9%E6%B3%95%E3%81%A8%E3%81%AE%E9%81%95%E3%81%84\"><i class=\"fa fa-link\"></i></a>🚀 従来の学習方法との違い</h3>\n<p data-sourcepos=\"147:1-147:26\"><strong>従来の学習方法</strong>:</p>\n<ul data-sourcepos=\"148:1-151:0\">\n<li data-sourcepos=\"148:1-148:23\">本で理論を学ぶ</li>\n<li data-sourcepos=\"149:1-149:32\">サンプルコードを写経</li>\n<li data-sourcepos=\"150:1-151:0\">エラーが出ると挫折</li>\n</ul>\n<p data-sourcepos=\"152:1-152:28\"><strong>AI活用の学習方法</strong>:</p>\n<ul data-sourcepos=\"153:1-157:0\">\n<li data-sourcepos=\"153:1-153:32\">やりたいことを明確化</li>\n<li data-sourcepos=\"154:1-154:68\">AIツール（ChatGPT、Claude、Gemini等）に具体的に指示</li>\n<li data-sourcepos=\"155:1-155:25\">エラーもAIに相談</li>\n<li data-sourcepos=\"156:1-157:0\">即座に実装可能</li>\n</ul>\n<h3 data-sourcepos=\"158:1-158:35\">\n<span id=\"-aiプロンプトのコツ\" class=\"fragment\"></span><a href=\"#-ai%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%AE%E3%82%B3%E3%83%84\"><i class=\"fa fa-link\"></i></a>💡 AIプロンプトのコツ</h3>\n<ol data-sourcepos=\"160:1-172:0\">\n<li data-sourcepos=\"160:1-162:3\">\n<p data-sourcepos=\"160:4-160:31\"><strong>具体的に指示する</strong></p>\n<ul data-sourcepos=\"161:4-162:3\">\n<li data-sourcepos=\"161:4-162:3\">「メール送信のコードを作って」→「Gmailでメール自動送信のコードを作って」</li>\n</ul>\n</li>\n<li data-sourcepos=\"163:1-167:0\">\n<p data-sourcepos=\"163:4-163:31\"><strong>条件を明確にする</strong></p>\n<ul data-sourcepos=\"164:4-167:0\">\n<li data-sourcepos=\"164:4-164:32\">使用するライブラリ</li>\n<li data-sourcepos=\"165:4-165:29\">入力・出力の形式</li>\n<li data-sourcepos=\"166:4-167:0\">エラーハンドリングの要否</li>\n</ul>\n</li>\n<li data-sourcepos=\"168:1-172:0\">\n<p data-sourcepos=\"168:4-168:31\"><strong>段階的に改善する</strong></p>\n<ul data-sourcepos=\"169:4-172:0\">\n<li data-sourcepos=\"169:4-169:26\">まずは基本機能</li>\n<li data-sourcepos=\"170:4-170:38\">次にエラーハンドリング</li>\n<li data-sourcepos=\"171:4-172:0\">最後に最適化</li>\n</ul>\n</li>\n</ol>\n<h2 data-sourcepos=\"173:1-173:27\">\n<span id=\"開発で学んだこと\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA%E3%81%A7%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>開発で学んだこと</h2>\n<h3 data-sourcepos=\"175:1-175:27\">\n<span id=\"1-aiとの協働開発\" class=\"fragment\"></span><a href=\"#1-ai%E3%81%A8%E3%81%AE%E5%8D%94%E5%83%8D%E9%96%8B%E7%99%BA\"><i class=\"fa fa-link\"></i></a>1. AIとの協働開発</h3>\n<div class=\"code-frame\" data-lang=\"python\" data-sourcepos=\"176:1-187:3\"><div class=\"highlight\"><pre><code><span class=\"c1\"># AIに相談して解決した例\n# ❌ Flask 3.xでは削除された\n</span><span class=\"nd\">@app.before_first_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_first_request</span><span class=\"p\">():</span>\n    <span class=\"c1\"># 処理\n</span>\n<span class=\"c1\"># ✅ AIの提案で修正\n</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># 初期化処理\n</span>    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"189:1-189:40\">\n<span id=\"2-プロンプト設計の重要性\" class=\"fragment\"></span><a href=\"#2-%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E8%A8%AD%E8%A8%88%E3%81%AE%E9%87%8D%E8%A6%81%E6%80%A7\"><i class=\"fa fa-link\"></i></a>2. プロンプト設計の重要性</h3>\n<ul data-sourcepos=\"190:1-193:0\">\n<li data-sourcepos=\"190:1-190:67\">\n<strong>明確な指示</strong>: AIに何を求めているかを具体的に</li>\n<li data-sourcepos=\"191:1-191:68\">\n<strong>段階的な要求</strong>: 一度に全部ではなく、段階的に</li>\n<li data-sourcepos=\"192:1-193:0\">\n<strong>エラー時の対処</strong>: エラーメッセージもAIに相談</li>\n</ul>\n<h3 data-sourcepos=\"194:1-194:34\">\n<span id=\"3-実践的なスキル習得\" class=\"fragment\"></span><a href=\"#3-%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E3%82%B9%E3%82%AD%E3%83%AB%E7%BF%92%E5%BE%97\"><i class=\"fa fa-link\"></i></a>3. 実践的なスキル習得</h3>\n<ul data-sourcepos=\"195:1-198:0\">\n<li data-sourcepos=\"195:1-195:59\">\n<strong>本番環境での運用</strong>: Renderでの実際の運用</li>\n<li data-sourcepos=\"196:1-196:86\">\n<strong>エラーハンドリング</strong>: 本番環境でのトラブルシューティング</li>\n<li data-sourcepos=\"197:1-198:0\">\n<strong>段階的な開発</strong>: 簡単な機能 → 本格的な機能</li>\n</ul>\n<h2 data-sourcepos=\"199:1-199:18\">\n<span id=\"今後の展望\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E5%B1%95%E6%9C%9B\"><i class=\"fa fa-link\"></i></a>今後の展望</h2>\n<h3 data-sourcepos=\"201:1-201:36\">\n<span id=\"-短期目標1-2ヶ月\" class=\"fragment\"></span><a href=\"#-%E7%9F%AD%E6%9C%9F%E7%9B%AE%E6%A8%991-2%E3%83%B6%E6%9C%88\"><i class=\"fa fa-link\"></i></a>🚀 短期目標（1-2ヶ月）</h3>\n<ul data-sourcepos=\"202:1-205:0\">\n<li data-sourcepos=\"202:1-202:66\">\n<strong>AI統合強化</strong>: ChatGPT APIを使ったコード生成機能</li>\n<li data-sourcepos=\"203:1-203:92\">\n<strong>プロンプトライブラリ</strong>: よく使われるプロンプトパターンの蓄積</li>\n<li data-sourcepos=\"204:1-205:0\">\n<strong>モバイル対応</strong>: PWA（Progressive Web App）化</li>\n</ul>\n<h3 data-sourcepos=\"206:1-206:36\">\n<span id=\"-中期目標3-6ヶ月\" class=\"fragment\"></span><a href=\"#-%E4%B8%AD%E6%9C%9F%E7%9B%AE%E6%A8%993-6%E3%83%B6%E6%9C%88\"><i class=\"fa fa-link\"></i></a>📈 中期目標（3-6ヶ月）</h3>\n<ul data-sourcepos=\"207:1-210:0\">\n<li data-sourcepos=\"207:1-207:78\">\n<strong>AIアシスタント機能</strong>: アプリ内でAIと対話しながら開発</li>\n<li data-sourcepos=\"208:1-208:74\">\n<strong>プロンプト最適化</strong>: より効果的なプロンプトの研究</li>\n<li data-sourcepos=\"209:1-210:0\">\n<strong>コミュニティ機能</strong>: ユーザーが独自のプロンプトを投稿</li>\n</ul>\n<h3 data-sourcepos=\"211:1-211:37\">\n<span id=\"-長期目標6ヶ月\" class=\"fragment\"></span><a href=\"#-%E9%95%B7%E6%9C%9F%E7%9B%AE%E6%A8%996%E3%83%B6%E6%9C%88\"><i class=\"fa fa-link\"></i></a>🎯 長期目標（6ヶ月〜）</h3>\n<ul data-sourcepos=\"212:1-215:0\">\n<li data-sourcepos=\"212:1-212:88\">\n<strong>AI教育プラットフォーム</strong>: プロンプト設計力を学べる学習環境</li>\n<li data-sourcepos=\"213:1-213:83\">\n<strong>テンプレート機能</strong>: 業界別の自動化パターンテンプレート</li>\n<li data-sourcepos=\"214:1-215:0\">\n<strong>多言語対応</strong>: 英語版の提供</li>\n</ul>\n<h2 data-sourcepos=\"216:1-216:33\">\n<span id=\"初学者へのメッセージ\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E5%AD%A6%E8%80%85%E3%81%B8%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>初学者へのメッセージ</h2>\n<h3 data-sourcepos=\"218:1-218:35\">\n<span id=\"-ai時代の学習のコツ\" class=\"fragment\"></span><a href=\"#-ai%E6%99%82%E4%BB%A3%E3%81%AE%E5%AD%A6%E7%BF%92%E3%81%AE%E3%82%B3%E3%83%84\"><i class=\"fa fa-link\"></i></a>💡 AI時代の学習のコツ</h3>\n<ol data-sourcepos=\"219:1-223:0\">\n<li data-sourcepos=\"219:1-219:56\">\n<strong>完璧を求めない</strong>: AIが補完してくれる</li>\n<li data-sourcepos=\"220:1-220:63\">\n<strong>プロンプト力を磨く</strong>: これが新しいスキル</li>\n<li data-sourcepos=\"221:1-221:63\">\n<strong>実践を重視</strong>: 作ってみることが一番の学習</li>\n<li data-sourcepos=\"222:1-223:0\">\n<strong>コミュニティを活用</strong>: AIと人間の両方の知恵を借りる</li>\n</ol>\n<h3 data-sourcepos=\"224:1-224:32\">\n<span id=\"-ai活用の学習順序\" class=\"fragment\"></span><a href=\"#-ai%E6%B4%BB%E7%94%A8%E3%81%AE%E5%AD%A6%E7%BF%92%E9%A0%86%E5%BA%8F\"><i class=\"fa fa-link\"></i></a>🔧 AI活用の学習順序</h3>\n<ol data-sourcepos=\"225:1-230:0\">\n<li data-sourcepos=\"225:1-225:99\">\n<strong>プロンプト基礎</strong>: AIツール（ChatGPT、Claude、Gemini等）の基本的な使い方</li>\n<li data-sourcepos=\"226:1-226:48\">\n<strong>Python基礎</strong>: 変数、関数、クラス</li>\n<li data-sourcepos=\"227:1-227:55\">\n<strong>AI協働開発</strong>: AIと一緒にコードを書く</li>\n<li data-sourcepos=\"228:1-228:28\">\n<strong>Web開発</strong>: Flask + AI</li>\n<li data-sourcepos=\"229:1-230:0\">\n<strong>デプロイ</strong>: Render + AI</li>\n</ol>\n<h2 data-sourcepos=\"231:1-231:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<p data-sourcepos=\"233:1-233:96\">このアプリ開発を通じて、<strong>AIとの協働開発の可能性</strong>を実感しました。</p>\n<h3 data-sourcepos=\"235:1-235:34\">\n<span id=\"特に印象的だったこと\" class=\"fragment\"></span><a href=\"#%E7%89%B9%E3%81%AB%E5%8D%B0%E8%B1%A1%E7%9A%84%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>特に印象的だったこと</h3>\n<ul data-sourcepos=\"236:1-241:0\">\n<li data-sourcepos=\"236:1-236:97\">\n<strong>AIプロンプトの威力</strong>: 適切な指示で驚くほど良いコードが生成される</li>\n<li data-sourcepos=\"237:1-237:71\">\n<strong>学習効率の向上</strong>: 従来の数倍の速度でスキル習得</li>\n<li data-sourcepos=\"238:1-238:86\">\n<strong>実践的なスキル</strong>: 理論だけでなく、実際に動くものを作れる</li>\n<li data-sourcepos=\"239:1-239:77\">\n<strong>新しい可能性</strong>: プログラミングの敷居が大幅に下がる</li>\n<li data-sourcepos=\"240:1-241:0\">\n<strong>業務効率化</strong>: 1つの自動化で月に数十時間の時間を節約できる</li>\n</ul>\n<h3 data-sourcepos=\"242:1-242:25\">\n<span id=\"これからの時代\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89%E3%81%AE%E6%99%82%E4%BB%A3\"><i class=\"fa fa-link\"></i></a>これからの時代</h3>\n<p data-sourcepos=\"243:1-243:102\">**「AIを使いこなす力」**が、新しいビジネススキルとして重要になります。</p>\n<p data-sourcepos=\"245:1-245:117\">プログラミング初学者の皆さん、AIと一緒に、今すぐ \"つくる力\" を手に入れましょう！</p>\n<h2 data-sourcepos=\"247:1-247:12\">\n<span id=\"リンク\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%B3%E3%82%AF\"><i class=\"fa fa-link\"></i></a>リンク</h2>\n<ul data-sourcepos=\"249:1-250:0\">\n<li data-sourcepos=\"249:1-250:0\">\n<strong>アプリ</strong>: <a href=\"https://pyme-app.onrender.com/\" rel=\"nofollow noopener\" target=\"_blank\">pyme-app</a>\n</li>\n</ul>\n<h2 data-sourcepos=\"251:1-251:15\">\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h2>\n<p data-sourcepos=\"253:1-253:93\">AI時代のプログラミング学習は、<strong>楽しく、効率的で、実践的</strong>です。</p>\n<p data-sourcepos=\"255:1-255:108\">**「完璧でなくても、AIと一緒に作ってみる」**これが新しい学習スタイルです。</p>\n<p data-sourcepos=\"257:1-257:140\">質問やアドバイスがあれば、コメントでお気軽にお声かけください。AIと一緒に成長していきましょう！</p>\n<hr data-sourcepos=\"259:1-260:0\">\n<p data-sourcepos=\"261:1-261:170\"><strong>#Python #Flask #初学者 #Webアプリ #自動化 #Render #プログラミング学習 #AI #ChatGPT #Claude #Gemini #Copilot #プロンプト設計 #業務効率化</strong></p>\n",
        "body": "# 【Python初学者】AIプロンプトで作るビジネス自動化アプリを公開しました！\n\n## 🤖 プロンプトでアプリを作る時代へ\n\nこれからのビジネスでは、**「AIに何をどう頼むか」＝プロンプト設計力**が大きなスキルとなります。\n\n実際にこのアプリでは、以下のような手順で**初心者でも自分の仕事用の自動化ツール**を作れます：\n\n1. やりたいこと（例：毎月のレポートを自動で作成）を考える  \n2. 用意されたプロンプト例を使ってAIツールに依頼  \n3. 出力されたコードを自分のPCで実行  \n4. **自分の仕事が自動化**されて、本来の業務に集中できる！\n\n---\n\n🧠 **AIを使いこなすスキル＝新しいビジネス教養**  \n「コードが書けなくても、自動化アプリを作れる」  \nそんな時代がすでに始まっています。\n\n**仕事で手一杯のあなたへ**：\n- 毎日のルーチンワークに時間を取られていませんか？\n- Excelの手作業でミスを繰り返していませんか？\n- 本来やるべき仕事に集中できていますか？\n\n**たった1つの自動化アプリを作るだけで**：\n- 月に数十時間の時間を節約\n- ミスを大幅に削減\n- 本来の価値ある仕事に集中できる\n\n特に以下のような方に、このスキルは強くおすすめです：\n\n- ノーコードツールに限界を感じている方  \n- エクセル業務をもっと効率化したい方  \n- 将来AIを活かした仕事をしたい初学者  \n- AIツール（Claude、Gemini、Copilot等）を使って**\"自分で作れる力\"**を身につけたい方\n\n---\n\nこのアプリでは、**プロンプトとコード例がセットで紹介されている**ので、「自分の仕事を自動化したい」人にも最適です。\n\nAIと一緒に、今すぐ \"自分の仕事用の自動化ツール\" を作って、**本来の業務に集中できる時間**を創りましょう。\n\n## はじめに\n\nこんにちは！プログラミング初学者のyamashitayoshikoです。\n\n今回、**AIプロンプトを活用したPython学習**の一環として、**ビジネス自動化ツール紹介アプリ**を作成しました！\n\n**プログラミング未経験でも、AIツールを使えば自分の仕事用の自動化ツールが作れる**ことを実証したアプリです。\n\n## アプリの概要\n\n### 🎯 アプリの目的\n- **業務効率化**: 仕事で手一杯の方でも、AIツールを使えば業務自動化が実現できることを実証\n- **プロンプト設計力向上**: 各ツールに具体的なAIプロンプト例を提供（ChatGPT、Claude、Gemini、Copilot等対応）\n- **実践的な学習**: 20種類のビジネス自動化タスクを、AIと一緒に実装\n\n### 📱 アプリの特徴\n- **AIプロンプト例**: 各ツールにChatGPT用の具体的なプロンプトを提供\n- **段階的学習**: 初級→中級レベル別の難易度設定\n- **即座に実装可能**: コピペで使えるコード例\n- **レスポンシブ**: スマートフォンでも見やすいレイアウト\n\n## 技術スタック\n\n### バックエンド\n- **Python 3.13.4**: 最新のPythonを使用\n- **Flask 3.x**: 軽量なWebフレームワーク\n- **Gunicorn**: 本番環境用WSGIサーバー\n\n### フロントエンド\n- **Bootstrap 5**: モダンなUIフレームワーク\n- **HTML/CSS**: シンプルで見やすいデザイン\n\n### デプロイ\n- **Render**: 無料プランでホスティング\n\n## AIプロンプト例の紹介\n\n### 📧 メール自動送信のプロンプト例\n\n**対応AIツール**: ChatGPT、Claude、Gemini、GitHub Copilot\n\n```\nPythonでメール自動送信のコードを作成してください。以下の条件でお願いします：\n\n1. smtplibライブラリを使う\n2. GmailのSMTPサーバーを使用する\n3. 件名、本文、送信者、受信者を設定する\n4. エラーハンドリングも含める\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n送信者: 自分のGmailアドレス\n受信者: 指定したメールアドレス\n件名: 自動送信メール\n本文: 簡単なメッセージ\n```\n\n### 📊 Excel自動処理のプロンプト例\n\n**対応AIツール**: ChatGPT、Claude、Gemini、GitHub Copilot\n\n```\nPythonでExcel自動処理のコードを作成してください。以下の条件でお願いします：\n\n1. openpyxlライブラリを使う\n2. Excelファイルを読み込んでデータを取得する\n3. 売上データを集計する\n4. 結果を新しいセルに書き込む\n5. 初心者でも理解できるようにコメントを詳しく書く\n\n対象ファイル: data.xlsx\n集計項目: 売上列の合計\n出力先: 新しいセル（D2など）\n```\n\n## アプリで紹介している自動化ツール\n\n### 初級レベル（30分〜1時間）\n1. **メール自動送信** - smtplibを使用\n2. **Excel自動処理** - openpyxl + pandas\n3. **データ可視化グラフ作成** - matplotlib\n4. **ファイル自動整理** - os, shutil（標準ライブラリ）\n5. **チャットボット作成** - 標準ライブラリのみ\n6. **画像自動リサイズ** - Pillow\n7. **アンケート自動集計** - pandas + matplotlib\n\n### 中級レベル（1〜2時間）\n8. **PDF自動生成** - reportlab\n9. **Webスクレイピング** - requests + BeautifulSoup\n10. **定期レポート自動送信** - schedule + smtplib\n11. **SNS自動投稿** - tweepy\n12. **Googleカレンダー自動登録** - Google Calendar API\n13. **名刺データ自動整理** - OpenCV + Tesseract OCR\n14. **請求書自動作成** - reportlab\n15. **データベース自動バックアップ** - sqlite3\n16. **ログファイル自動分析** - pandas + re\n17. **画像からテキスト抽出** - Tesseract OCR\n18. **CSVファイル自動変換** - pandas\n19. **フォルダ監視自動処理** - watchdog\n20. **API自動テスト** - requests + unittest\n\n## AI活用の学習効果\n\n### 🚀 従来の学習方法との違い\n\n**従来の学習方法**:\n- 本で理論を学ぶ\n- サンプルコードを写経\n- エラーが出ると挫折\n\n**AI活用の学習方法**:\n- やりたいことを明確化\n- AIツール（ChatGPT、Claude、Gemini等）に具体的に指示\n- エラーもAIに相談\n- 即座に実装可能\n\n### 💡 AIプロンプトのコツ\n\n1. **具体的に指示する**\n   - 「メール送信のコードを作って」→「Gmailでメール自動送信のコードを作って」\n   \n2. **条件を明確にする**\n   - 使用するライブラリ\n   - 入力・出力の形式\n   - エラーハンドリングの要否\n\n3. **段階的に改善する**\n   - まずは基本機能\n   - 次にエラーハンドリング\n   - 最後に最適化\n\n## 開発で学んだこと\n\n### 1. AIとの協働開発\n```python\n# AIに相談して解決した例\n# ❌ Flask 3.xでは削除された\n@app.before_first_request\ndef before_first_request():\n    # 処理\n\n# ✅ AIの提案で修正\nif __name__ == '__main__':\n    # 初期化処理\n    app.run()\n```\n\n### 2. プロンプト設計の重要性\n- **明確な指示**: AIに何を求めているかを具体的に\n- **段階的な要求**: 一度に全部ではなく、段階的に\n- **エラー時の対処**: エラーメッセージもAIに相談\n\n### 3. 実践的なスキル習得\n- **本番環境での運用**: Renderでの実際の運用\n- **エラーハンドリング**: 本番環境でのトラブルシューティング\n- **段階的な開発**: 簡単な機能 → 本格的な機能\n\n## 今後の展望\n\n### 🚀 短期目標（1-2ヶ月）\n- **AI統合強化**: ChatGPT APIを使ったコード生成機能\n- **プロンプトライブラリ**: よく使われるプロンプトパターンの蓄積\n- **モバイル対応**: PWA（Progressive Web App）化\n\n### 📈 中期目標（3-6ヶ月）\n- **AIアシスタント機能**: アプリ内でAIと対話しながら開発\n- **プロンプト最適化**: より効果的なプロンプトの研究\n- **コミュニティ機能**: ユーザーが独自のプロンプトを投稿\n\n### 🎯 長期目標（6ヶ月〜）\n- **AI教育プラットフォーム**: プロンプト設計力を学べる学習環境\n- **テンプレート機能**: 業界別の自動化パターンテンプレート\n- **多言語対応**: 英語版の提供\n\n## 初学者へのメッセージ\n\n### 💡 AI時代の学習のコツ\n1. **完璧を求めない**: AIが補完してくれる\n2. **プロンプト力を磨く**: これが新しいスキル\n3. **実践を重視**: 作ってみることが一番の学習\n4. **コミュニティを活用**: AIと人間の両方の知恵を借りる\n\n### 🔧 AI活用の学習順序\n1. **プロンプト基礎**: AIツール（ChatGPT、Claude、Gemini等）の基本的な使い方\n2. **Python基礎**: 変数、関数、クラス\n3. **AI協働開発**: AIと一緒にコードを書く\n4. **Web開発**: Flask + AI\n5. **デプロイ**: Render + AI\n\n## まとめ\n\nこのアプリ開発を通じて、**AIとの協働開発の可能性**を実感しました。\n\n### 特に印象的だったこと\n- **AIプロンプトの威力**: 適切な指示で驚くほど良いコードが生成される\n- **学習効率の向上**: 従来の数倍の速度でスキル習得\n- **実践的なスキル**: 理論だけでなく、実際に動くものを作れる\n- **新しい可能性**: プログラミングの敷居が大幅に下がる\n- **業務効率化**: 1つの自動化で月に数十時間の時間を節約できる\n\n### これからの時代\n**「AIを使いこなす力」**が、新しいビジネススキルとして重要になります。\n\nプログラミング初学者の皆さん、AIと一緒に、今すぐ \"つくる力\" を手に入れましょう！\n\n## リンク\n\n- **アプリ**: [pyme-app](https://pyme-app.onrender.com/)\n\n## おわりに\n\nAI時代のプログラミング学習は、**楽しく、効率的で、実践的**です。\n\n**「完璧でなくても、AIと一緒に作ってみる」**これが新しい学習スタイルです。\n\n質問やアドバイスがあれば、コメントでお気軽にお声かけください。AIと一緒に成長していきましょう！\n\n---\n\n**#Python #Flask #初学者 #Webアプリ #自動化 #Render #プログラミング学習 #AI #ChatGPT #Claude #Gemini #Copilot #プロンプト設計 #業務効率化** \n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2025-07-07T15:21:42+09:00",
        "group": null,
        "id": "6fa7823d5e691b8e5da8",
        "likes_count": 4,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 2,
        "tags": [
          {
            "name": "Python",
            "versions": []
          },
          {
            "name": "Flask",
            "versions": []
          },
          {
            "name": "自動化",
            "versions": []
          },
          {
            "name": "プログラミング学習",
            "versions": []
          },
          {
            "name": "初学者",
            "versions": []
          }
        ],
        "title": "【Python初学者】Flaskで作ったビジネス自動化ツール紹介アプリを公開しました！",
        "updated_at": "2025-07-07T17:37:30+09:00",
        "url": "https://qiita.com/yykm666/items/6fa7823d5e691b8e5da8",
        "user": {
          "description": "2025年4月からオンラインスクールでプログラミングを学び６月半ばに終えました。\r\nその間に毎日のようにAIによるプログラミングの自動生成がアップデートされる情報が流れ、自分が学んでいる今のコードを書いたりすること自体が意味のあることなのかと不安になりながらスクールを終えましたが、基礎を学ぶことは、意味があるなと思います。（まだまだ基礎の復習が足りないと痛感をしてます）",
          "facebook_id": "",
          "followees_count": 3,
          "followers_count": 3,
          "github_login_name": "Ykuroyy",
          "id": "yykm666",
          "items_count": 5,
          "linkedin_id": "",
          "location": "",
          "name": "yoshiko yamashita",
          "organization": "",
          "permanent_id": 546440,
          "profile_image_url": "https://lh3.googleusercontent.com/-7kUsQknApBI/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rcSA-lNe_EAc6kEXsZDXI57O3DzTQ/s50/photo.jpg",
          "team_only": false,
          "twitter_screen_name": "Yykuroy",
          "website_url": ""
        },
        "page_views_count": null,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false,
        "semantic_similarity": 0.7347673773765564,
        "quality_score": 19,
        "python_code_score": 6,
        "python_code_blocks": 1
      }
    ],
    "common_technologies": {
      "AWS": 16,
      "Azure": 4,
      "Docker": 1,
      "React": 1
    },
    "code_patterns": [],
    "articles_analyzed": 30
  },
  "local_code_results": {},
  "sample_code_collection": [
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "import streamlit as st\nimport base64\nimport requests\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport urllib3\n\n# --- 初期設定 ---\nst.title(\"食事管理アプリ\")\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\nmatplotlib.rcParams['font.family'] = 'MS Gothic'\n\n# --- ユーザー入力 ---\ndef get_user_input():\n    st.sidebar.header(\"入力項目\")\n    height = st.sidebar.number_input(\"身長（cm）\", 0.0, 300.0, 170.0, 0.1)\n    weight = st.sidebar.number_input(\"体重（kg）\", 0.0, 300.0, 60.0, 0.1)\n    age = st.sidebar.number_input(\"年齢\", 0, 120, 30, 1)\n    gender = st.sidebar.selectbox(\"性別\", (\"男性\", \"女性\"))\n\n    activity_levels = {\n        \"ほぼ運動しない活動代謝量\": 1.2,\n        \"軽い運動活動代謝量\": 1.375,\n        \"中程度の運動活動代謝量\": 1.55,\n        \"激しい運動活動代謝量\": 1.725,\n        \"非常に激しい活動代謝量\": 1.9\n    }\n    activity_label = st.sidebar.selectbox(\"活動レベル\", list(activity_levels.keys()))\n\n    goal_options = {\n        \"減量\": 0.8,\n        \"現状維持\": 1.0,\n        \"増量\": 1.2\n    }\n    goal_label = st.sidebar.selectbox(\"体重の目標\", list(goal_options.keys()))\n\n    return height, weight, age, gender, activity_levels[activity_label], goal_label, goal_options[goal_label]\n\n# --- 栄養計算 ---\ndef calculate_nutrition(height, weight, age, gender, activity_mult, goal_label, goal_mult):\n    bmr = (\n        66.47 + (13.75 * weight) + (5.0 * height) - (6.76 * age)\n        if gender == \"男性\"\n        else 665.1 + (9.56 * weight) + (1.85 * height) - (4.68 * age)\n    )\n    tdee = bmr * activity_mult\n    target_calories = tdee * goal_mult\n    p_kcal, f_kcal, c_kcal = target_calories * 0.2, target_calories * 0.3, target_calories * 0.5\n    p_g, f_g, c_g = p_kcal / 4, f_kcal / 9, c_kcal / 4\n    return bmr, tdee, target_calories, (p_kcal, f_kcal, c_kcal), (p_g, f_g, c_g)\n\n# --- 表示 ---\ndef display_target_info(bmr, tdee, target_calories, goal_label, pfc_kcal, pfc_g):\n    st.subheader(\"計算結果\")\n    st.dataframe(pd.DataFrame({\n        \"項目\": [\"基礎代謝量（BMR）\", \"活動代謝量（TDEE）\", f\"目標摂取カロリー（{goal_label}）\"],\n        \"値 (kcal/日)\": [f\"{bmr:.1f}\", f\"{tdee:.1f}\", f\"{target_calories:.1f}\"]\n    }), hide_index=True)\n\n    st.subheader(\"PFC目標摂取量\")\n    st.dataframe(pd.DataFrame({\n        \"栄養素\": [\"たんぱく質（P）\", \"脂質　　　（F）\", \"炭水化物　（C）\"],\n        \"カロリー (kcal)\": [f\"{pfc_kcal[0]:.1f}\", f\"{pfc_kcal[1]:.1f}\", f\"{pfc_kcal[2]:.1f}\"],\n        \"グラム (g)\": [f\"{pfc_g[0]:.1f}\", f\"{pfc_g[1]:.1f}\", f\"{pfc_g[2]:.1f}\"]\n    }), hide_index=True)\n\n# --- API呼び出し ---\ndef encode_image(uploaded_file):\n    return base64.b64encode(uploaded_file.read()).decode(\"utf-8\")\n\ndef analyze_image(base64_image, api_key):\n    url = \"https://api.openai.com/v1/chat/completions\"\n    headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {api_key}\"}\n    payload = json.dumps({\n        \"model\": \"gpt-4o\",\n        \"messages\": [{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"この画像の栄養成分表示から「たんぱく質、脂質、炭水化物」の各値を抽出し、",
      "language": "python",
      "snippet_id": "qiita_86dd04ce533d86205d14_0"
    },
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "</details>\n\n\n### ユーザー入力の取得\nサイドバーにユーザー情報を入力するUIをまとめた関数です。\n* 活動レベルや目標を辞書で定義し、対応する係数を返すようにしています\n* 選択肢の日本語表示と係数を分離して、UIと処理を明確にしています",
      "language": "unknown",
      "snippet_id": "qiita_86dd04ce533d86205d14_1"
    },
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "### 基礎代謝と目標PFCの計算\n基礎代謝量、活動代謝量、目標摂取カロリー、PFCバランスを計算しています。\n* PFCは一般的な比率（20:30:50）で計算していますが、Pを多くするなどカスタマイズしてもいいとおもいます",
      "language": "unknown",
      "snippet_id": "qiita_86dd04ce533d86205d14_2"
    },
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "### 計算結果の表示\n計算された基礎代謝量・目標摂取カロリー・PFCの目標量などをDataFrameとして表示しています。",
      "language": "unknown",
      "snippet_id": "qiita_86dd04ce533d86205d14_3"
    },
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "### 画像処理とAPI連携\n画像をbase64に変換し、OpenAI APIにリクエストを送り、画像から栄養素（PFC）の数値をJSON形式で抽出。その後、得られたJSONを数値に変換している。\n* APIレスポンスが失敗したときの例外処理も含まれています\n* マークダウン記号が含まているときもあったため、プロンプトにその内容を入れています",
      "language": "unknown",
      "snippet_id": "qiita_86dd04ce533d86205d14_4"
    },
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "### 抽出結果の表示と集計\nアップロードされた複数の画像から抽出されたPFCをDataFrameとして表示し、合計して目標と比較しています。",
      "language": "unknown",
      "snippet_id": "qiita_86dd04ce533d86205d14_5"
    },
    {
      "source": "qiita",
      "article_title": "夏までにやせたい！栄養成分表示の画像から食事管理するアプリ作ってみた",
      "article_url": "https://qiita.com/mamoru-ngy/items/86dd04ce533d86205d14",
      "code_snippet": "### 達成率グラフの表示\nPFCそれぞれに対して接種達成率を円グラフで表示します。\n* 達成率と残りの割合を見やすく色分けしています",
      "language": "unknown",
      "snippet_id": "qiita_86dd04ce533d86205d14_6"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "pip install --no-index --find-links=pylib [導入するライブラリ名]",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_0"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "## 2.4. 学習モデル\n　自分で試行錯誤してモデルを定義してみましたが、学習してもaccuracy（正答率）が0.89どまりのものしか作れませんでした。（本当はここで0.95などを叩き出すものを提示できたらカッコ良かったのですが、実力が足りませんでした。ゴメンなさい。）\n　そこで、先人の知恵をお借りすることとしました。\n　25万件のデータで鍛え上げ、accuracy=099757を叩き出したとのNotebookをkaggleで見つけました。（https://www.kaggle.com/code/cdeotte/25-million-images-0-99757-mnist)\n　恐れながら、そのモデルを真似させて頂きます。",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_1"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "# 3.　準備\n　実際に読ませる帳票は、A4サイズの次の帳票です。\n ![20250227192457-0005.tif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/4ca5a019-b3b8-4f5c-9850-c0f360e04d48.tiff)\n\n　このままOCRに読ませて、成果物を得ることができたらカッコいいのですが、初心者らしく手堅く進めます。\n　具体的には、この帳票から「社員コード」と「個人番号」を読み取りたいのですが、文字の大きさが「社員コード」と「個人番号」では異なる上に、「個人番号」には格子までついています。いかにも調整が難しそうです。\n　そこで２ファイルに分け、それぞれをモデルに掛けることにします。\n　なお、ここの技法（切り出して、グレースケール保存する）については、\n \n（１）社員番号を切り出すコード\n<!--\n![社員コード切り出し.tif](https://qiita-image-store.s3.ap-northeast- 1.amazonaws.com/0/3937616/63565afe-cbc4-4524-a95c-3be334ed11bd.tiff)\n-->\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/63565afe-cbc4-4524-a95c-3be334ed11bd.tiff\" width=50%>",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_2"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "【切り出した画像】\n<!-- \n![sample1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/a91b5b39-1d65-4a54-a619-ee07d894f98e.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/a91b5b39-1d65-4a54-a619-ee07d894f98e.png\" width=50%>\n\n※なお、保存形式としては、Bitmapを採用しました。\n　Bitmapにすると、MS-paintで開いて、該当する部分が何pixelか数えることができるからです。\n \n（２）個人番号を切り出すコード\n<!--\n![mno切り出し.tif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/180eab2b-ee3c-43f4-947d-0da3ae13a5dc.tiff\" width=50%>",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_3"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "【切り出した画像」\n<!--\n![sample1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/1e416c8a-4bc5-48ef-922d-e653cd906a47.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/1e416c8a-4bc5-48ef-922d-e653cd906a47.png\" width=50%>\n\n# 4.　制作\n## 4.1. モデルの学習\n　モデル構築と、学習のコード全体です。",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_4"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "100エポックの訓練後、accuracy=0.9431, val_accuray=0.9916 という、すばらしいモデルになりました。\n\n## 4.2. 本番運用\n### 4.2.1. 社員番号の抽出\n　社員番号を抽出するコードは以下のとおりです。\n　OPEN-CVというライブラリを使用して、画像処理を行います。\n　OPEN-CVの使い方は次のサイトを参考にしました。\n [OpenCVのfindContours関数を使った画像の輪郭検出]\n https://www.argocorp.com/OpenCV/imageprocessing/opencv_find_contours.html",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_5"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "### 4.2.2. 個人番号の抽出\n　個人番号を抽出するコードは以下のとおりです。",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_6"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "# 5.　結果\n　サンプル画像 20250227192457-0001\n<!--\n ![まとめ.tif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/013e10ec-c7aa-4c41-8d6c-8d9f84534123.tiff\" width=50%>\n\nにつきまして、\n\n## (1)kcd_output.txt\n\n**20250227192457-0001,0408317**\n\nという結果になっていました。\nどういうふうに認識しているかを次のコードで書き出ししてみます。",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_7"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "<!--\n![numbers-cnt.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png)\n-->\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/0d3a126c-e6fc-4a86-854e-13ac6d20a51c.png\" width=50%>\n\n３文字目の「6」を「0」と誤認識するのは仕方がないけど、最後の「7」を「1」「7」とご認識しているのは痛い。\n\nここはロジックの次の部分が甘いことによります。\nここは認識しても無視するサイズを指定しています。",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_8"
    },
    {
      "source": "qiita",
      "article_title": "AI-OCRを自作しました(2025.2)",
      "article_url": "https://qiita.com/jupiter-san/items/d7b3e2a70c8624c43c45",
      "code_snippet": "![Screenshot from 2025-03-02 22-03-45.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3937616/7aa704eb-7306-44b8-8fa1-94e511e43847.png)\n\n７の一画目の幅は８ピクセルあります。",
      "language": "unknown",
      "snippet_id": "qiita_d7b3e2a70c8624c43c45_9"
    },
    {
      "source": "qiita",
      "article_title": "Markitdownで取れないテキストをOCR機能を抽出しよう！！",
      "article_url": "https://qiita.com/makotodaxi5/items/96c36c3fc09b30761bff",
      "code_snippet": "import os                                            # OS操作用\nfrom markitdown import MarkItDown                   # 任意テキスト→Markdown\nfrom pdfminer.high_level import extract_text        # PDFテキスト抽出\nfrom pdf2image import convert_from_path             # PDF→画像\nimport pytesseract                                  # OCR\nimport pandas as pd                                 # Excel処理\nfrom docx import Document                           # Word処理\npytesseract.pytesseract.tesseract_cmd = r\"<TESSERACT_PATH>\" # tesseract.exeをインストール・格納したパスを指定する。\n\nmd_engine = MarkItDown()                            # Markdown変換エンジン共有\n\ndef save_md(path, content):                         # Markdown保存関数\n    md_path = os.path.splitext(path)[0] + \".md\"     # 出力パス生成\n    with open(md_path, \"w\", encoding=\"utf-8\") as f: # UTF-8で書込\n        f.write(content)                            # Markdown書込\n    return md_path                                  # 保存先返却\n\ndef pdf_to_md(path):\n    text = extract_text(path)\n    if not text.strip():\n        pages = convert_from_path(\n            path,\n            dpi=300,\n            poppler_path=r\"<POPPLER_PATH>\" # popplerをダウンロードしたパス（xxx\\Release-24.08.0-0\\poppler-24.08.0\\Library\\bin）を指定する。\n        )\n        text = \"\\n\\n\".join(\n            pytesseract.image_to_string(p, lang=\"jpn+eng\") for p in pages\n        )\n\n    # OCR結果はすでにMarkdown的な構造なのでそのまま保存するのがベター\n    return text  # ← MarkItDown は通さずにテキストを返すだけ\n\n\n\ndef docx_to_md(path):                               # Word→Markdown\n    doc = Document(path)                            # 読込\n    text = \"\\n\".join(p.text for p in doc.paragraphs) # 段落結合\n    return md_engine.convert_text(text)             # Markdown生成\n\ndef excel_to_md(path):                              # Excel→Markdown\n    dfs = []                                        # シート保持\n    try:\n        # openpyxlバージョン問題を回避するため、xlrdエンジンも試行\n        with pd.ExcelFile(path, engine='openpyxl') as xls:\n            for name in xls.sheet_names:            # 各シート巡回\n                df = xls.parse(name)                # DataFrame取得\n                dfs.append(f\"### {name}\\n\"          # 見出し\n                            + df.to_markdown(index=False))\n    except Exception as e:\n        # openpyxlで失敗した場合はxlrdを試行（.xlsファイル用）\n        try:\n            with pd.ExcelFile(path, engine='xlrd') as xls:\n                for name in xls.sheet_names:\n                    df = xls.parse(name)\n                    dfs.append(f\"### {name}\\n\"\n                                + df.to_markdown(index=False))\n        except Exception as e2:\n            # 両方失敗した場合は基本的なCSV風変換\n            print(f\"Excel読み込みエラー: {e}, {e2}\")\n            return f\"# Excel変換エラー\\n\\nファイル: {path}\\nエラー: openpyxlバージョン要件未満\"\n    return \"\\n\\n\".join(dfs)                         # 全シート結合\n\n\n\n\ndef convert_file_to_markdown(path):                 # 拡張子分岐変換\n    ext = os.path.splitext(path)[1].lower()         # 拡張子取得\n    \n    # 対応しない形式をスキップ\n    skip_extensions = {\".csv\", \".md\", \".pyc\", \".log\", \".tmp\", \".ipynb\", \".json\"}\n    if ext in skip_extensions:\n        print(f\"スキップ: {path} (未対応形式)\")\n        return None\n    \n    if ext == \".pdf\":                               # PDF\n        md = pdf_to_md(path)                        # 専用処理\n    elif ext in {\".docx\"}:                          # Word系\n        md = docx_to_md(path)                       # Word処理\n    elif ext in {\".xlsx\", \".xls\"}:                  # Excel系\n        md = excel_to_md(path)                      # Excel処理\n    else:                                           # 上記以外\n        try:\n            md = md_engine.convert(path).text_content   # MarkItDown汎用\n        except Exception as e:\n            print(f\"変換失敗: {path} → {e}\")\n            return None\n    return save_md(path, md)                        # 保存しパス返却\n\ndef convert_directory_to_markdown(dir_path):        # 再帰的一括変換\n    for root, _, files in os.walk(dir_path):        # ディレクトリ探索\n        for f in files:                             # 各ファイル\n            try:                                    # 例外捕捉\n                full_path = os.path.join(root, f)   # フルパス生成\n                result_path = convert_file_to_markdown(full_path)\n                if result_path:  # Noneでない場合のみ成功ログ\n                    print(f\"成功: {f} → {result_path}\")\n            except Exception as e:                  # エラー時\n                print(f\"失敗: {f} → {e}\")            # ログ出力\n\n## 出力ブロック（フォルダ内一括変換）\nos.chdir(\"<./mdファイルへと変換したいファイルのある場所>\")\ncurrent_directory = os.getcwd()  # 現在の作業ディレクトリを取得\nprint(f\"現在の作業ディレクトリ: {current_directory}\")\nconvert_directory_to_markdown(current_directory)",
      "language": "python",
      "snippet_id": "qiita_96c36c3fc09b30761bff_0"
    },
    {
      "source": "qiita",
      "article_title": "Markitdownで取れないテキストをOCR機能を抽出しよう！！",
      "article_url": "https://qiita.com/makotodaxi5/items/96c36c3fc09b30761bff",
      "code_snippet": "import os\nfrom markitdown import MarkItDown\nfrom pdfminer.high_level import extract_text\nfrom pdf2image import convert_from_path\nimport pytesseract\nimport pandas as pd\nfrom docx import Document\n\npytesseract.pytesseract.tesseract_cmd = r\"<TESSERACT_PATH>\"\n\nmd_engine = MarkItDown()",
      "language": "python",
      "snippet_id": "qiita_96c36c3fc09b30761bff_1"
    },
    {
      "source": "qiita",
      "article_title": "Markitdownで取れないテキストをOCR機能を抽出しよう！！",
      "article_url": "https://qiita.com/makotodaxi5/items/96c36c3fc09b30761bff",
      "code_snippet": "def save_md(path, content):\n    md_path = os.path.splitext(path)[0] + \".md\"\n    with open(md_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(content)\n    return md_path",
      "language": "python",
      "snippet_id": "qiita_96c36c3fc09b30761bff_2"
    }
  ],
  "technical_approaches": [
    "Utilize pre-trained models for OCR tasks to accelerate development and improve accuracy.",
    "Implement multi-stage OCR processing, combining image preprocessing (e.g., noise reduction, binarization) with text recognition using libraries like Tesseract or Google Cloud Vision.",
    "Develop custom OCR solutions using deep learning frameworks (e.g., TensorFlow, PyTorch) to handle specific use cases such as handwritten text recognition.",
    "Integrate OCR with existing document management systems to automate data entry and improve workflow efficiency."
  ],
  "implementation_patterns": [
    "Use a microservices architecture to separate OCR processing from the main application, allowing for scalability and easier maintenance.",
    "Adopt a modular approach where image preprocessing, text recognition, and post-processing are handled by distinct components.",
    "Implement a user-friendly interface that allows users to upload images and view extracted text, enhancing user experience.",
    "Create a logging and error handling mechanism to track OCR processing results and handle exceptions gracefully."
  ],
  "best_practices": [
    "Ensure high-quality input images by implementing image preprocessing techniques to enhance text visibility.",
    "Test OCR solutions with a diverse set of documents to validate accuracy across different fonts, layouts, and languages.",
    "Regularly update and retrain OCR models with new data to improve recognition capabilities and adapt to changing document formats.",
    "Incorporate user feedback to refine the OCR process and address common pain points experienced by end-users."
  ],
  "potential_challenges": [
    "Dealing with low-quality images that can lead to inaccurate text recognition; mitigate by implementing robust image preprocessing techniques.",
    "Handling complex document layouts that may confuse OCR engines; consider using layout analysis tools to improve recognition accuracy.",
    "Integrating OCR solutions with existing systems may present compatibility issues; ensure thorough testing and use standard APIs for integration.",
    "Limited language support in some OCR libraries; explore libraries that offer multilingual capabilities or consider training custom models."
  ],
  "recommended_technologies": [
    "Tesseract OCR for open-source text recognition tasks.",
    "Google Cloud Vision API for high-accuracy OCR with support for multiple languages.",
    "OpenCV for image preprocessing tasks such as noise reduction and image rotation.",
    "Flask or Django for building web applications that incorporate OCR functionalities.",
    "YomiToku for Japanese language OCR, especially for documents with complex layouts."
  ],
  "search_keywords_used": [
    "Ensuring compatibility with different image formats",
    "Machine learning models for text recognition",
    "Developing algorithms that can handle diverse fonts and handwriting",
    "Image preprocessing techniques (e.g., noise reduction, binarization)",
    "User interface for input and output display",
    "OCR technology is widely used in industries such as finance for check processing, healthcare for patient record management, and logistics for inventory management. The demand for automation and digital transformation is driving the need for effective OCR solutions.",
    "OCR",
    "Optimizing performance for real-time processing",
    "Integration capabilities with existing software systems",
    "Implementing robust error handling and correction mechanisms"
  ],
  "sources_searched": [
    "qiita"
  ]
}